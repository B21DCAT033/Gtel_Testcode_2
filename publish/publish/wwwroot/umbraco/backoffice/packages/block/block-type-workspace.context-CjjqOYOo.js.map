{"version":3,"file":"block-type-workspace.context-CjjqOYOo.js","sources":["../../../src/packages/block/block-type/workspace/block-type-workspace-editor.element.ts","../../../src/packages/block/block-type/workspace/block-type-workspace.context.ts"],"sourcesContent":["import { UMB_BLOCK_TYPE_WORKSPACE_CONTEXT } from './block-type-workspace.context-token.js';\r\nimport { UmbTextStyles } from '@umbraco-cms/backoffice/style';\r\nimport { customElement, css, html, state } from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\nimport { UmbRepositoryItemsManager } from '@umbraco-cms/backoffice/repository';\r\nimport type { UmbDocumentTypeItemModel } from '@umbraco-cms/backoffice/document-type';\r\nimport { UMB_DOCUMENT_TYPE_ITEM_REPOSITORY_ALIAS } from '@umbraco-cms/backoffice/document-type';\r\n\r\n@customElement('umb-block-type-workspace-editor')\r\nexport class UmbBlockTypeWorkspaceEditorElement extends UmbLitElement {\r\n\t#itemManager = new UmbRepositoryItemsManager<UmbDocumentTypeItemModel>(this, UMB_DOCUMENT_TYPE_ITEM_REPOSITORY_ALIAS);\r\n\r\n\t#workspaceContext?: typeof UMB_BLOCK_TYPE_WORKSPACE_CONTEXT.TYPE;\r\n\r\n\t@state()\r\n\t_name?: string;\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.consumeContext(UMB_BLOCK_TYPE_WORKSPACE_CONTEXT, (instance) => {\r\n\t\t\tthis.#workspaceContext = instance;\r\n\t\t\tthis.#workspaceContext?.createPropertyDatasetContext(this);\r\n\t\t\tthis.observe(this.#workspaceContext.unique, (unique) => {\r\n\t\t\t\tif (unique) {\r\n\t\t\t\t\tthis.#itemManager.setUniques([unique]);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tthis.observe(this.#itemManager.items, (items) => {\r\n\t\t\tconst item = items[0];\r\n\t\t\tif (item) {\r\n\t\t\t\tthis._name = item.name;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\toverride render() {\r\n\t\treturn html`\r\n\t\t\t<umb-workspace-editor headline=${this.localize.term('blockEditor_blockConfigurationOverlayTitle', [this._name])}>\r\n\t\t\t</umb-workspace-editor>\r\n\t\t`;\r\n\t}\r\n\r\n\tstatic override styles = [\r\n\t\tUmbTextStyles,\r\n\t\tcss`\r\n\t\t\t:host {\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\twidth: 100%;\r\n\t\t\t\theight: 100%;\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\nexport default UmbBlockTypeWorkspaceEditorElement;\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-block-type-workspace-editor': UmbBlockTypeWorkspaceEditorElement;\r\n\t}\r\n}\r\n","import type { UmbBlockTypeBaseModel, UmbBlockTypeWithGroupKey } from '../types.js';\r\nimport { UmbBlockTypeWorkspaceEditorElement } from './block-type-workspace-editor.element.js';\r\nimport type { UmbPropertyDatasetContext, UmbPropertyValueData } from '@umbraco-cms/backoffice/property';\r\nimport { UMB_PROPERTY_CONTEXT } from '@umbraco-cms/backoffice/property';\r\nimport type {\r\n\tUmbInvariantDatasetWorkspaceContext,\r\n\tUmbRoutableWorkspaceContext,\r\n\tManifestWorkspace,\r\n} from '@umbraco-cms/backoffice/workspace';\r\nimport {\r\n\tUmbSubmittableWorkspaceContextBase,\r\n\tUmbInvariantWorkspacePropertyDatasetContext,\r\n\tUmbWorkspaceIsNewRedirectController,\r\n\tUmbWorkspaceIsNewRedirectControllerAlias,\r\n\tumbObjectToPropertyValueArray,\r\n} from '@umbraco-cms/backoffice/workspace';\r\nimport { UmbObjectState, appendToFrozenArray } from '@umbraco-cms/backoffice/observable-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { firstValueFrom } from '@umbraco-cms/backoffice/external/rxjs';\r\n\r\nexport class UmbBlockTypeWorkspaceContext<BlockTypeData extends UmbBlockTypeWithGroupKey = UmbBlockTypeWithGroupKey>\r\n\textends UmbSubmittableWorkspaceContextBase<BlockTypeData>\r\n\timplements UmbInvariantDatasetWorkspaceContext, UmbRoutableWorkspaceContext\r\n{\r\n\t// Just for context token safety:\r\n\tpublic readonly IS_BLOCK_TYPE_WORKSPACE_CONTEXT = true;\r\n\r\n\t#entityType: string;\r\n\t#data = new UmbObjectState<BlockTypeData | undefined>(undefined);\r\n\treadonly data = this.#data.asObservable();\r\n\r\n\treadonly name = this.#data.asObservablePart(() => 'block type');\r\n\treadonly unique = this.#data.asObservablePart((data) => data?.contentElementTypeKey);\r\n\r\n\treadonly values = this.#data.asObservablePart((data) => {\r\n\t\treturn umbObjectToPropertyValueArray(data);\r\n\t});\r\n\tasync getValues(): Promise<Array<UmbPropertyValueData> | undefined> {\r\n\t\treturn umbObjectToPropertyValueArray(await firstValueFrom(this.data));\r\n\t}\r\n\r\n\tconstructor(host: UmbControllerHost, args: { manifest: ManifestWorkspace }) {\r\n\t\tsuper(host, args.manifest.alias);\r\n\t\tconst manifest = args.manifest;\r\n\t\tthis.#entityType = manifest.meta?.entityType;\r\n\r\n\t\tthis.routes.setRoutes([\r\n\t\t\t{\r\n\t\t\t\t// Would it make more sense to have groupKey before elementTypeKey?\r\n\t\t\t\tpath: 'create/:elementTypeKey/:groupKey',\r\n\t\t\t\tcomponent: UmbBlockTypeWorkspaceEditorElement,\r\n\t\t\t\tsetup: async (component, info) => {\r\n\t\t\t\t\tconst elementTypeKey = info.match.params.elementTypeKey;\r\n\t\t\t\t\tconst groupKey = info.match.params.groupKey === 'null' ? null : info.match.params.groupKey;\r\n\t\t\t\t\tawait this.create(elementTypeKey, groupKey);\r\n\r\n\t\t\t\t\tnew UmbWorkspaceIsNewRedirectController(\r\n\t\t\t\t\t\tthis,\r\n\t\t\t\t\t\tthis,\r\n\t\t\t\t\t\tthis.getHostElement().shadowRoot!.querySelector('umb-router-slot')!,\r\n\t\t\t\t\t);\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: 'edit/:id',\r\n\t\t\t\tcomponent: UmbBlockTypeWorkspaceEditorElement,\r\n\t\t\t\tsetup: (component, info) => {\r\n\t\t\t\t\tconst id = info.match.params.id;\r\n\t\t\t\t\tthis.load(id);\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t]);\r\n\t}\r\n\r\n\tprotected override resetState() {\r\n\t\tsuper.resetState();\r\n\t\tthis.#data.setValue(undefined);\r\n\t\tthis.removeUmbControllerByAlias(UmbWorkspaceIsNewRedirectControllerAlias);\r\n\t}\r\n\r\n\tcreatePropertyDatasetContext(host: UmbControllerHost): UmbPropertyDatasetContext {\r\n\t\treturn new UmbInvariantWorkspacePropertyDatasetContext(host, this);\r\n\t}\r\n\r\n\tasync load(unique: string) {\r\n\t\tthis.resetState();\r\n\t\tconst context = await this.getContext(UMB_PROPERTY_CONTEXT);\r\n\t\tthis.observe(context.value, (value) => {\r\n\t\t\tif (value) {\r\n\t\t\t\tconst blockTypeData = value.find((x: UmbBlockTypeBaseModel) => x.contentElementTypeKey === unique);\r\n\t\t\t\tif (blockTypeData) {\r\n\t\t\t\t\tthis.#data.setValue(blockTypeData);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Fallback to undefined:\r\n\t\t\tthis.#data.setValue(undefined);\r\n\t\t});\r\n\t}\r\n\r\n\tasync create(contentElementTypeId: string, groupKey?: string | null) {\r\n\t\tthis.resetState();\r\n\r\n\t\tlet data: BlockTypeData = {\r\n\t\t\tcontentElementTypeKey: contentElementTypeId,\r\n\t\t} as BlockTypeData;\r\n\r\n\t\t// If we have a modal context, we blend in the modal preset data: [NL]\r\n\t\tif (this.modalContext) {\r\n\t\t\tdata = { ...data, ...this.modalContext.data.preset };\r\n\t\t}\r\n\r\n\t\t// Only set groupKey property if it has been parsed to this method\r\n\t\tif (groupKey) {\r\n\t\t\tdata.groupKey = groupKey;\r\n\t\t}\r\n\r\n\t\tthis.setIsNew(true);\r\n\t\tthis.#data.setValue(data);\r\n\t}\r\n\r\n\tgetData() {\r\n\t\treturn this.#data.getValue();\r\n\t}\r\n\r\n\tgetUnique() {\r\n\t\treturn this.getData()!.contentElementTypeKey;\r\n\t}\r\n\r\n\tgetEntityType() {\r\n\t\treturn this.#entityType;\r\n\t}\r\n\r\n\tgetName() {\r\n\t\treturn 'block name content element type here...';\r\n\t}\r\n\r\n\t// TODO: [v15] ignoring unused name parameter to avoid breaking changes\r\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n\tsetName(name: string | undefined) {\r\n\t\tconsole.warn('You cannot set a name of a block type.');\r\n\t}\r\n\r\n\t/**\r\n\t * @function propertyValueByAlias\r\n\t * @param {string} propertyAlias\r\n\t * @returns {Promise<Observable<ReturnType | undefined> | undefined>}\r\n\t * @description Get an Observable for the value of this property.\r\n\t */\r\n\tasync propertyValueByAlias<ReturnType = unknown>(propertyAlias: string) {\r\n\t\treturn this.#data.asObservablePart((data) => data?.[propertyAlias as keyof BlockTypeData] as ReturnType);\r\n\t}\r\n\r\n\tgetPropertyValue<ReturnType = unknown>(propertyAlias: string) {\r\n\t\treturn this.#data.getValue()?.[propertyAlias as keyof BlockTypeData] as ReturnType;\r\n\t}\r\n\r\n\t/**\r\n\t * @function setPropertyValue\r\n\t * @param {string} alias\r\n\t * @param {unknown} value - value can be a promise resolving into the actual value or the raw value it self.\r\n\t * @returns {Promise<void>}\r\n\t * @description Set the value of this property.\r\n\t */\r\n\tasync setPropertyValue(alias: string, value: unknown) {\r\n\t\tconst currentData = this.#data.value;\r\n\t\tif (currentData) {\r\n\t\t\tthis.#data.update({ ...currentData, [alias]: value });\r\n\t\t}\r\n\t}\r\n\r\n\tasync submit() {\r\n\t\tif (!this.#data.value) {\r\n\t\t\tthrow new Error('No data to submit.');\r\n\t\t}\r\n\r\n\t\tconst context = await this.getContext(UMB_PROPERTY_CONTEXT);\r\n\r\n\t\tcontext.setValue(\r\n\t\t\tappendToFrozenArray(context.getValue() ?? [], this.#data.getValue(), (x) => x?.contentElementTypeKey),\r\n\t\t);\r\n\r\n\t\tthis.setIsNew(false);\r\n\t}\r\n\r\n\tpublic override destroy(): void {\r\n\t\tthis.#data.destroy();\r\n\t\tsuper.destroy();\r\n\t}\r\n}\r\n\r\nexport { UmbBlockTypeWorkspaceContext as api };\r\n"],"names":["_itemManager","_workspaceContext","UmbBlockTypeWorkspaceEditorElement","UmbLitElement","__privateAdd","UmbRepositoryItemsManager","UMB_DOCUMENT_TYPE_ITEM_REPOSITORY_ALIAS","UMB_BLOCK_TYPE_WORKSPACE_CONTEXT","instance","__privateSet","__privateGet","unique","items","item","html","UmbTextStyles","css","__decorateClass","state","customElement","UmbBlockTypeWorkspaceContext","UmbSubmittableWorkspaceContextBase","host","args","#data","UmbObjectState","data","umbObjectToPropertyValueArray","manifest","#entityType","component","info","elementTypeKey","groupKey","UmbWorkspaceIsNewRedirectController","id","firstValueFrom","UmbWorkspaceIsNewRedirectControllerAlias","UmbInvariantWorkspacePropertyDatasetContext","context","UMB_PROPERTY_CONTEXT","value","blockTypeData","x","contentElementTypeId","name","propertyAlias","alias","currentData","appendToFrozenArray"],"mappings":";;;;;;;;;;;;;;;;gUAAAA,GAAAC;AASa,IAAAC,IAAN,cAAiDC,EAAc;AAAA,EAQrE,cAAc;AACP,UAAA,GARQC,EAAA,MAAAJ,GAAA,IAAIK,EAAoD,MAAMC,CAAuC,CAAA,GAEpHF,EAAA,MAAAH,CAAA,GAQM,KAAA,eAAeM,GAAkC,CAACC,MAAa;AACnE,MAAAC,EAAA,MAAKR,GAAoBO,CAAA,GACpBE,EAAA,MAAAT,CAAA,GAAmB,6BAA6B,IAAI,GACzD,KAAK,QAAQS,EAAA,MAAKT,CAAkB,EAAA,QAAQ,CAACU,MAAW;AACvD,QAAIA,KACHD,EAAA,MAAKV,CAAa,EAAA,WAAW,CAACW,CAAM,CAAC;AAAA,MACtC,CACA;AAAA,IAAA,CACD,GAED,KAAK,QAAQD,EAAA,MAAKV,CAAa,EAAA,OAAO,CAACY,MAAU;AAC1C,YAAAC,IAAOD,EAAM,CAAC;AACpB,MAAIC,MACH,KAAK,QAAQA,EAAK;AAAA,IACnB,CACA;AAAA,EAAA;AAAA,EAGO,SAAS;AACV,WAAAC;AAAA,oCAC2B,KAAK,SAAS,KAAK,8CAA8C,CAAC,KAAK,KAAK,CAAC,CAAC;AAAA;AAAA;AAAA,EAAA;AAelH;AA7CCd,IAAA,oBAAA,QAAA;AAEAC,IAAA,oBAAA,QAAA;AAHYC,EAoCI,SAAS;AAAA,EACxBa;AAAA,EACAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOD;AAvCAC,EAAA;AAAA,EADCC,EAAM;AAAA,GALKhB,EAMZ,WAAA,SAAA,CAAA;AANYA,IAANe,EAAA;AAAA,EADNE,EAAc,iCAAiC;AAAA,GACnCjB,CAAA;ACWN,MAAMkB,UACJC,EAET;AAAA,EAkBC,YAAYC,GAAyBC,GAAuC;AACrE,UAAAD,GAAMC,EAAK,SAAS,KAAK,GAjBhC,KAAgB,kCAAkC,IAG1C,KAAAC,KAAA,IAAIC,EAA0C,MAAS,GACtD,KAAA,OAAO,KAAKD,GAAM,aAAa,GAExC,KAAS,OAAO,KAAKA,GAAM,iBAAiB,MAAM,YAAY,GAC9D,KAAS,SAAS,KAAKA,GAAM,iBAAiB,CAACE,MAASA,GAAM,qBAAqB,GAEnF,KAAS,SAAS,KAAKF,GAAM,iBAAiB,CAACE,MACvCC,EAA8BD,CAAI,CACzC;AAOA,UAAME,IAAWL,EAAK;AACjB,SAAAM,KAAcD,EAAS,MAAM,YAElC,KAAK,OAAO,UAAU;AAAA,MACrB;AAAA;AAAA,QAEC,MAAM;AAAA,QACN,WAAW1B;AAAA,QACX,OAAO,OAAO4B,GAAWC,MAAS;AAC3B,gBAAAC,IAAiBD,EAAK,MAAM,OAAO,gBACnCE,IAAWF,EAAK,MAAM,OAAO,aAAa,SAAS,OAAOA,EAAK,MAAM,OAAO;AAC5E,gBAAA,KAAK,OAAOC,GAAgBC,CAAQ,GAEtC,IAAAC;AAAA,YACH;AAAA,YACA;AAAA,YACA,KAAK,eAAA,EAAiB,WAAY,cAAc,iBAAiB;AAAA,UAClE;AAAA,QAAA;AAAA,MAEF;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,WAAWhC;AAAA,QACX,OAAO,CAAC4B,GAAWC,MAAS;AACrB,gBAAAI,IAAKJ,EAAK,MAAM,OAAO;AAC7B,eAAK,KAAKI,CAAE;AAAA,QAAA;AAAA,MACb;AAAA,IACD,CACA;AAAA,EAAA;AAAA,EA5CFN;AAAA,EACAL;AAAA,EASA,MAAM,YAA8D;AACnE,WAAOG,EAA8B,MAAMS,EAAe,KAAK,IAAI,CAAC;AAAA,EAAA;AAAA,EAoClD,aAAa;AAC/B,UAAM,WAAW,GACZ,KAAAZ,GAAM,SAAS,MAAS,GAC7B,KAAK,2BAA2Ba,CAAwC;AAAA,EAAA;AAAA,EAGzE,6BAA6Bf,GAAoD;AACzE,WAAA,IAAIgB,EAA4ChB,GAAM,IAAI;AAAA,EAAA;AAAA,EAGlE,MAAM,KAAKX,GAAgB;AAC1B,SAAK,WAAW;AAChB,UAAM4B,IAAU,MAAM,KAAK,WAAWC,CAAoB;AAC1D,SAAK,QAAQD,EAAQ,OAAO,CAACE,MAAU;AACtC,UAAIA,GAAO;AACV,cAAMC,IAAgBD,EAAM,KAAK,CAACE,MAA6BA,EAAE,0BAA0BhC,CAAM;AACjG,YAAI+B,GAAe;AACb,eAAAlB,GAAM,SAASkB,CAAa;AACjC;AAAA,QAAA;AAAA,MACD;AAGI,WAAAlB,GAAM,SAAS,MAAS;AAAA,IAAA,CAC7B;AAAA,EAAA;AAAA,EAGF,MAAM,OAAOoB,GAA8BX,GAA0B;AACpE,SAAK,WAAW;AAEhB,QAAIP,IAAsB;AAAA,MACzB,uBAAuBkB;AAAA,IACxB;AAGA,IAAI,KAAK,iBACRlB,IAAO,EAAE,GAAGA,GAAM,GAAG,KAAK,aAAa,KAAK,OAAO,IAIhDO,MACHP,EAAK,WAAWO,IAGjB,KAAK,SAAS,EAAI,GACb,KAAAT,GAAM,SAASE,CAAI;AAAA,EAAA;AAAA,EAGzB,UAAU;AACF,WAAA,KAAKF,GAAM,SAAS;AAAA,EAAA;AAAA,EAG5B,YAAY;AACJ,WAAA,KAAK,UAAW;AAAA,EAAA;AAAA,EAGxB,gBAAgB;AACf,WAAO,KAAKK;AAAA,EAAA;AAAA,EAGb,UAAU;AACF,WAAA;AAAA,EAAA;AAAA;AAAA;AAAA,EAKR,QAAQgB,GAA0B;AACjC,YAAQ,KAAK,wCAAwC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAStD,MAAM,qBAA2CC,GAAuB;AACvE,WAAO,KAAKtB,GAAM,iBAAiB,CAACE,MAASA,IAAOoB,CAAoC,CAAe;AAAA,EAAA;AAAA,EAGxG,iBAAuCA,GAAuB;AAC7D,WAAO,KAAKtB,GAAM,SAAS,IAAIsB,CAAoC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUpE,MAAM,iBAAiBC,GAAeN,GAAgB;AAC/C,UAAAO,IAAc,KAAKxB,GAAM;AAC/B,IAAIwB,KACE,KAAAxB,GAAM,OAAO,EAAE,GAAGwB,GAAa,CAACD,CAAK,GAAGN,GAAO;AAAA,EACrD;AAAA,EAGD,MAAM,SAAS;AACV,QAAA,CAAC,KAAKjB,GAAM;AACT,YAAA,IAAI,MAAM,oBAAoB;AAGrC,UAAMe,IAAU,MAAM,KAAK,WAAWC,CAAoB;AAElD,IAAAD,EAAA;AAAA,MACPU,EAAoBV,EAAQ,SAAS,KAAK,IAAI,KAAKf,GAAM,SAAS,GAAG,CAACmB,MAAMA,GAAG,qBAAqB;AAAA,IACrG,GAEA,KAAK,SAAS,EAAK;AAAA,EAAA;AAAA,EAGJ,UAAgB;AAC/B,SAAKnB,GAAM,QAAQ,GACnB,MAAM,QAAQ;AAAA,EAAA;AAEhB;"}