{"version":3,"file":"block-workspace.context-Bg8l3Wpy.js","sources":["../../../src/packages/block/block/workspace/block-workspace-editor.element.ts","../../../src/packages/block/block/workspace/block-element-property-dataset.context.ts","../../../src/packages/block/block/workspace/block-element-manager.ts","../../../src/packages/block/block/workspace/block-workspace.context.ts"],"sourcesContent":["import { UMB_BLOCK_WORKSPACE_CONTEXT } from './index.js';\r\nimport { UmbTextStyles } from '@umbraco-cms/backoffice/style';\r\nimport { customElement, css, html, state } from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\nimport { observeMultiple } from '@umbraco-cms/backoffice/observable-api';\r\n\r\n@customElement('umb-block-workspace-editor')\r\nexport class UmbBlockWorkspaceEditorElement extends UmbLitElement {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.consumeContext(UMB_BLOCK_WORKSPACE_CONTEXT, (context) => {\r\n\t\t\tthis.observe(\r\n\t\t\t\tobserveMultiple([\r\n\t\t\t\t\tcontext.isNew,\r\n\t\t\t\t\tcontext.content.structure.ownerContentTypeObservablePart((contentType) => contentType?.name),\r\n\t\t\t\t]),\r\n\t\t\t\t([isNew, name]) => {\r\n\t\t\t\t\tthis._headline =\r\n\t\t\t\t\t\tthis.localize.term(isNew ? 'general_add' : 'general_edit') + ' ' + this.localize.string(name);\r\n\t\t\t\t},\r\n\t\t\t\t'observeOwnerContentElementTypeName',\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\t@state()\r\n\t_headline: string = '';\r\n\r\n\toverride render() {\r\n\t\treturn html`<umb-workspace-editor headline=${this._headline}> </umb-workspace-editor> `;\r\n\t}\r\n\r\n\tstatic override readonly styles = [\r\n\t\tUmbTextStyles,\r\n\t\tcss`\r\n\t\t\t:host {\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\twidth: 100%;\r\n\t\t\t\theight: 100%;\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\nexport default UmbBlockWorkspaceEditorElement;\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-block-workspace-editor': UmbBlockWorkspaceEditorElement;\r\n\t}\r\n}\r\n","import type { UmbBlockElementManager } from './block-element-manager.js';\r\nimport type { UmbPropertyDatasetContext } from '@umbraco-cms/backoffice/property';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport type { UmbVariantId } from '@umbraco-cms/backoffice/variant';\r\nimport { UmbElementPropertyDatasetContext } from '@umbraco-cms/backoffice/content';\r\nimport { createObservablePart } from '@umbraco-cms/backoffice/observable-api';\r\n\r\nexport class UmbBlockElementPropertyDatasetContext\r\n\textends UmbElementPropertyDatasetContext\r\n\timplements UmbPropertyDatasetContext\r\n{\r\n\treadonly name;\r\n\treadonly culture;\r\n\treadonly segment;\r\n\treadonly getName;\r\n\r\n\tconstructor(host: UmbControllerHost, elementManager: UmbBlockElementManager, variantId?: UmbVariantId) {\r\n\t\t// The controller alias, is a very generic name cause we want only one of these for this controller host.\r\n\t\tsuper(host, elementManager, variantId);\r\n\r\n\t\t// Ugly, but we just inherit these from the workspace context: [NL]\r\n\t\tthis.name = elementManager.name;\r\n\t\tthis.getName = elementManager.getName;\r\n\t\tthis.culture = createObservablePart(elementManager.variantId, (v) => v?.culture);\r\n\t\tthis.segment = createObservablePart(elementManager.variantId, (v) => v?.segment);\r\n\t}\r\n}\r\n","import type { UmbBlockDataModel, UmbBlockDataValueModel, UmbBlockLayoutBaseModel } from '../types.js';\r\nimport { UmbBlockElementValuesDataValidationPathTranslator } from '../validation/block-element-values-validation-path-translator.controller.js';\r\nimport { UmbBlockElementPropertyDatasetContext } from './block-element-property-dataset.context.js';\r\nimport type { UmbBlockWorkspaceContext } from './block-workspace.context.js';\r\nimport type { UmbContentTypeModel, UmbPropertyTypeModel } from '@umbraco-cms/backoffice/content-type';\r\nimport { UmbContentTypeStructureManager } from '@umbraco-cms/backoffice/content-type';\r\nimport {\r\n\ttype Observable,\r\n\tUmbClassState,\r\n\tappendToFrozenArray,\r\n\tmergeObservables,\r\n} from '@umbraco-cms/backoffice/observable-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { type UmbClassInterface, UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\nimport { UmbDocumentTypeDetailRepository } from '@umbraco-cms/backoffice/document-type';\r\nimport { UmbVariantId } from '@umbraco-cms/backoffice/variant';\r\nimport { UmbValidationController } from '@umbraco-cms/backoffice/validation';\r\nimport { UmbElementWorkspaceDataManager, type UmbElementPropertyDataOwner } from '@umbraco-cms/backoffice/content';\r\nimport { UmbReadOnlyVariantStateManager } from '@umbraco-cms/backoffice/utils';\r\n\r\nimport { UmbDataTypeItemRepositoryManager } from '@umbraco-cms/backoffice/data-type';\r\n\r\nexport class UmbBlockElementManager<LayoutDataType extends UmbBlockLayoutBaseModel = UmbBlockLayoutBaseModel>\r\n\textends UmbControllerBase\r\n\timplements UmbElementPropertyDataOwner<UmbBlockDataModel, UmbContentTypeModel>\r\n{\r\n\t//\r\n\r\n\treadonly #data = new UmbElementWorkspaceDataManager<UmbBlockDataModel>(this);\r\n\t//#data = new UmbObjectState<UmbBlockDataModel | undefined>(undefined);\r\n\treadonly data = this.#data.current;\r\n\t#getDataPromise = new Promise<void>((resolve) => {\r\n\t\tthis.#getDataResolver = resolve;\r\n\t});\r\n\t#getDataResolver!: () => void;\r\n\r\n\tpublic readonly readOnlyState = new UmbReadOnlyVariantStateManager(this);\r\n\r\n\t#variantId = new UmbClassState<UmbVariantId | undefined>(undefined);\r\n\treadonly variantId = this.#variantId.asObservable();\r\n\r\n\treadonly name;\r\n\treadonly getName;\r\n\treadonly unique = this.#data.createObservablePartOfCurrent((data) => data?.key);\r\n\treadonly contentTypeId = this.#data.createObservablePartOfCurrent((data) => data?.contentTypeKey);\r\n\r\n\treadonly values = this.#data.createObservablePartOfCurrent((data) => data?.values);\r\n\tgetValues() {\r\n\t\treturn this.#data.getCurrent()?.values;\r\n\t}\r\n\r\n\treadonly #dataTypeItemManager = new UmbDataTypeItemRepositoryManager(this);\r\n\t#dataTypeSchemaAliasMap = new Map<string, string>();\r\n\r\n\treadonly structure = new UmbContentTypeStructureManager<UmbContentTypeModel>(\r\n\t\tthis,\r\n\t\tnew UmbDocumentTypeDetailRepository(this),\r\n\t);\r\n\r\n\treadonly validation = new UmbValidationController(this);\r\n\r\n\tconstructor(host: UmbBlockWorkspaceContext<LayoutDataType>, dataPathPropertyName: string) {\r\n\t\tsuper(host);\r\n\r\n\t\t// Ugly, but we just inherit these from the workspace context: [NL]\r\n\t\tthis.name = host.name;\r\n\t\tthis.getName = host.getName;\r\n\r\n\t\tthis.observe(this.contentTypeId, (id) => this.structure.loadType(id));\r\n\t\tthis.observe(this.unique, (key) => {\r\n\t\t\tif (key) {\r\n\t\t\t\tthis.validation.setDataPath('$.' + dataPathPropertyName + `[?(@.key == '${key}')]`);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.observe(\r\n\t\t\tthis.structure.contentTypeDataTypeUniques,\r\n\t\t\t(dataTypeUniques: Array<string>) => {\r\n\t\t\t\tthis.#dataTypeItemManager.setUniques(dataTypeUniques);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\t\tthis.observe(\r\n\t\t\tthis.#dataTypeItemManager.items,\r\n\t\t\t(dataTypes) => {\r\n\t\t\t\t// Make a map of the data type unique and editorAlias:\r\n\t\t\t\tthis.#dataTypeSchemaAliasMap = new Map(\r\n\t\t\t\t\tdataTypes.map((dataType) => {\r\n\t\t\t\t\t\treturn [dataType.unique, dataType.propertyEditorSchemaAlias];\r\n\t\t\t\t\t}),\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\t}\r\n\r\n\tpublic isLoaded() {\r\n\t\treturn this.#getDataPromise;\r\n\t}\r\n\r\n\tresetState() {\r\n\t\tthis.#data.clear();\r\n\t}\r\n\r\n\tsetVariantId(variantId: UmbVariantId | undefined) {\r\n\t\tthis.#variantId.setValue(variantId);\r\n\t}\r\n\tgetVariantId(): UmbVariantId {\r\n\t\treturn this.#variantId.getValue() ?? UmbVariantId.CreateInvariant();\r\n\t}\r\n\r\n\t// TODO: rename to currentData:\r\n\tsetData(data: UmbBlockDataModel | undefined) {\r\n\t\tthis.#data.setPersisted(data);\r\n\t\tthis.#data.setCurrent(data);\r\n\t\tthis.#getDataResolver();\r\n\t}\r\n\r\n\tgetData() {\r\n\t\treturn this.#data.getCurrent();\r\n\t}\r\n\r\n\tgetUnique() {\r\n\t\treturn this.getData()?.key;\r\n\t}\r\n\r\n\tgetEntityType() {\r\n\t\treturn 'element';\r\n\t}\r\n\r\n\tgetContentTypeId() {\r\n\t\treturn this.getData()?.contentTypeKey;\r\n\t}\r\n\r\n\t#createPropertyVariantId(property: UmbPropertyTypeModel, variantId: UmbVariantId) {\r\n\t\treturn variantId.toVariant(property.variesByCulture, property.variesBySegment);\r\n\t}\r\n\r\n\t// We will implement propertyAlias in the future, when implementing Varying Blocks. [NL]\r\n\r\n\tasync propertyVariantId(propertyAlias: string) {\r\n\t\treturn mergeObservables(\r\n\t\t\t[await this.structure.propertyStructureByAlias(propertyAlias), this.variantId],\r\n\t\t\t([property, variantId]) =>\r\n\t\t\t\tproperty && variantId ? this.#createPropertyVariantId(property, variantId) : undefined,\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @function propertyValueByAlias\r\n\t * @param {string} propertyAlias - The alias of the property\r\n\t * @param {UmbVariantId} variantId - The variant\r\n\t * @returns {Promise<Observable<ReturnType | undefined> | undefined>} - An observable for the value of the property\r\n\t * @description Get an Observable for the value of this property.\r\n\t */\r\n\tasync propertyValueByAlias<PropertyValueType = unknown>(\r\n\t\tpropertyAlias: string,\r\n\t\tvariantId?: UmbVariantId,\r\n\t): Promise<Observable<PropertyValueType | undefined> | undefined> {\r\n\t\treturn this.#data.createObservablePartOfCurrent(\r\n\t\t\t(data) =>\r\n\t\t\t\tdata?.values?.find((x) => x?.alias === propertyAlias && (variantId ? variantId.compare(x) : true))\r\n\t\t\t\t\t?.value as PropertyValueType,\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Get the current value of the property with the given alias and variantId.\r\n\t * @param {string} alias - The alias of the property\r\n\t * @param {UmbVariantId | undefined} variantId - The variant id of the property\r\n\t * @returns {ReturnType | undefined} The value or undefined if not set or found.\r\n\t */\r\n\tgetPropertyValue<ReturnType = unknown>(alias: string, variantId?: UmbVariantId) {\r\n\t\tconst currentData = this.#data.getCurrent();\r\n\t\tif (currentData) {\r\n\t\t\tconst newDataSet = currentData.values?.find(\r\n\t\t\t\t(x) => x.alias === alias && (variantId ? variantId.compare(x) : true),\r\n\t\t\t);\r\n\t\t\treturn newDataSet?.value as ReturnType;\r\n\t\t}\r\n\t\treturn undefined;\r\n\t}\r\n\tasync setPropertyValue<ValueType = unknown>(alias: string, value: ValueType, variantId?: UmbVariantId) {\r\n\t\tthis.initiatePropertyValueChange();\r\n\t\tvariantId ??= UmbVariantId.CreateInvariant();\r\n\t\tconst property = await this.structure.getPropertyStructureByAlias(alias);\r\n\r\n\t\tif (!property) {\r\n\t\t\tthrow new Error(`Property alias \"${alias}\" not found.`);\r\n\t\t}\r\n\r\n\t\t// TODO: I think we should await this in the same way as we do for Content Detail Workspace Context. [NL]\r\n\t\tconst editorAlias = this.#dataTypeSchemaAliasMap.get(property.dataType.unique);\r\n\t\tif (!editorAlias) {\r\n\t\t\tthrow new Error(`Editor Alias of \"${property.dataType.unique}\" not found.`);\r\n\t\t}\r\n\r\n\t\tconst entry = { editorAlias, ...variantId.toObject(), alias, value } as UmbBlockDataValueModel<ValueType>;\r\n\r\n\t\tconst currentData = this.getData();\r\n\t\tif (currentData) {\r\n\t\t\tconst values = appendToFrozenArray(\r\n\t\t\t\tcurrentData.values ?? [],\r\n\t\t\t\tentry,\r\n\t\t\t\t(x) => x.alias === alias && variantId!.compare(x),\r\n\t\t\t);\r\n\t\t\tthis.#data.updateCurrent({ values });\r\n\t\t}\r\n\t\tthis.finishPropertyValueChange();\r\n\t}\r\n\r\n\tinitiatePropertyValueChange() {\r\n\t\tthis.#data.initiatePropertyValueChange();\r\n\t}\r\n\tfinishPropertyValueChange = () => {\r\n\t\tthis.#data.finishPropertyValueChange();\r\n\t};\r\n\r\n\tpublic createPropertyDatasetContext(host: UmbControllerHost, variantId: UmbVariantId) {\r\n\t\treturn new UmbBlockElementPropertyDatasetContext(host, this, variantId);\r\n\t}\r\n\r\n\tpublic setup(host: UmbClassInterface, variantId: UmbVariantId) {\r\n\t\tthis.createPropertyDatasetContext(host, variantId);\r\n\r\n\t\t// Provide Validation Context for this view:\r\n\t\tthis.validation.provideAt(host);\r\n\r\n\t\t// TODO: Implement ctrl alias.\r\n\t\tnew UmbBlockElementValuesDataValidationPathTranslator(host);\r\n\t}\r\n\r\n\tpublic override destroy(): void {\r\n\t\tthis.structure.destroy();\r\n\t\tsuper.destroy();\r\n\t}\r\n}\r\n\r\nexport default UmbBlockElementManager;\r\n","import type { UmbBlockDataModel, UmbBlockLayoutBaseModel } from '../types.js';\r\nimport { UmbBlockWorkspaceEditorElement } from './block-workspace-editor.element.js';\r\nimport { UmbBlockElementManager } from './block-element-manager.js';\r\nimport {\r\n\tUmbSubmittableWorkspaceContextBase,\r\n\ttype UmbRoutableWorkspaceContext,\r\n\tUmbWorkspaceIsNewRedirectController,\r\n\ttype ManifestWorkspace,\r\n\tUmbWorkspaceIsNewRedirectControllerAlias,\r\n} from '@umbraco-cms/backoffice/workspace';\r\nimport {\r\n\tUmbBooleanState,\r\n\tUmbClassState,\r\n\tUmbObjectState,\r\n\tUmbStringState,\r\n\tobserveMultiple,\r\n} from '@umbraco-cms/backoffice/observable-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UMB_MODAL_CONTEXT } from '@umbraco-cms/backoffice/modal';\r\nimport { decodeFilePath, UmbReadOnlyVariantStateManager } from '@umbraco-cms/backoffice/utils';\r\nimport {\r\n\tUMB_BLOCK_ENTRIES_CONTEXT,\r\n\tUMB_BLOCK_MANAGER_CONTEXT,\r\n\ttype UmbBlockWorkspaceOriginData,\r\n\tUMB_BLOCK_ENTRY_CONTEXT,\r\n} from '@umbraco-cms/backoffice/block';\r\nimport { UmbVariantId } from '@umbraco-cms/backoffice/variant';\r\nimport type { UUIModalSidebarSize } from '@umbraco-cms/backoffice/external/uui';\r\n\r\nexport type UmbBlockWorkspaceElementManagerNames = 'content' | 'settings';\r\nexport class UmbBlockWorkspaceContext<LayoutDataType extends UmbBlockLayoutBaseModel = UmbBlockLayoutBaseModel>\r\n\textends UmbSubmittableWorkspaceContextBase<LayoutDataType>\r\n\timplements UmbRoutableWorkspaceContext\r\n{\r\n\t// Just for context token safety:\r\n\tpublic readonly IS_BLOCK_WORKSPACE_CONTEXT = true;\r\n\t//\r\n\r\n\t#blockManager?: typeof UMB_BLOCK_MANAGER_CONTEXT.TYPE;\r\n\t#retrieveBlockManager;\r\n\t#blockEntries?: typeof UMB_BLOCK_ENTRIES_CONTEXT.TYPE;\r\n\t#retrieveBlockEntries;\r\n\t#originData?: UmbBlockWorkspaceOriginData;\r\n\t// Set the origin data for this workspace. Example used by inline editing which setups the workspace context it self.\r\n\tsetOriginData(data: UmbBlockWorkspaceOriginData) {\r\n\t\tthis.#originData = data;\r\n\t}\r\n\t#modalContext?: typeof UMB_MODAL_CONTEXT.TYPE;\r\n\t#retrieveModalContext;\r\n\r\n\t#entityType: string;\r\n\r\n\t#liveEditingMode?: boolean;\r\n\r\n\t#initialLayout?: LayoutDataType;\r\n\t#initialContent?: UmbBlockDataModel;\r\n\t#initialSettings?: UmbBlockDataModel;\r\n\r\n\t#layout = new UmbObjectState<LayoutDataType | undefined>(undefined);\r\n\treadonly layout = this.#layout.asObservable();\r\n\treadonly unique = this.#layout.asObservablePart((x) => x?.contentKey);\r\n\treadonly contentKey = this.#layout.asObservablePart((x) => x?.contentKey);\r\n\r\n\treadonly content = new UmbBlockElementManager(this, 'contentData');\r\n\r\n\treadonly settings = new UmbBlockElementManager(this, 'settingsData');\r\n\r\n\t#name = new UmbStringState<string | undefined>(undefined);\r\n\treadonly name = this.#name.asObservable();\r\n\r\n\t#variantId = new UmbClassState<UmbVariantId | undefined>(undefined);\r\n\treadonly variantId = this.#variantId.asObservable();\r\n\r\n\t#exposed = new UmbBooleanState<undefined>(undefined);\r\n\treadonly exposed = this.#exposed.asObservable();\r\n\r\n\tpublic readonly readOnlyState = new UmbReadOnlyVariantStateManager(this);\r\n\r\n\tconstructor(host: UmbControllerHost, workspaceArgs: { manifest: ManifestWorkspace }) {\r\n\t\tsuper(host, workspaceArgs.manifest.alias);\r\n\t\tconst manifest = workspaceArgs.manifest;\r\n\t\tthis.#entityType = manifest.meta?.entityType;\r\n\r\n\t\tthis.addValidationContext(this.content.validation);\r\n\t\tthis.addValidationContext(this.settings.validation);\r\n\r\n\t\tthis.#retrieveModalContext = this.consumeContext(UMB_MODAL_CONTEXT, (context) => {\r\n\t\t\tthis.#modalContext = context;\r\n\t\t\tthis.#originData = context?.data.originData;\r\n\t\t\tcontext.onSubmit().catch(this.#modalRejected);\r\n\t\t}).asPromise();\r\n\r\n\t\tthis.#retrieveBlockManager = this.consumeContext(UMB_BLOCK_MANAGER_CONTEXT, (manager) => {\r\n\t\t\tthis.#blockManager = manager;\r\n\t\t\tthis.#gotManager();\r\n\t\t});\r\n\r\n\t\tthis.#retrieveBlockEntries = this.consumeContext(UMB_BLOCK_ENTRIES_CONTEXT, (context) => {\r\n\t\t\tthis.#blockEntries = context;\r\n\t\t}).asPromise();\r\n\r\n\t\tthis.consumeContext(UMB_BLOCK_ENTRY_CONTEXT, (context) => {\r\n\t\t\tthis.#name.setValue(context.getName());\r\n\t\t});\r\n\r\n\t\tthis.observe(this.variantId, (variantId) => {\r\n\t\t\tthis.content.setVariantId(variantId);\r\n\t\t\tthis.settings.setVariantId(variantId);\r\n\t\t});\r\n\r\n\t\tthis.routes.setRoutes([\r\n\t\t\t{\r\n\t\t\t\tpath: 'create/:elementTypeKey',\r\n\t\t\t\tcomponent: UmbBlockWorkspaceEditorElement,\r\n\t\t\t\tsetup: async (component, info) => {\r\n\t\t\t\t\tconst elementTypeKey = info.match.params.elementTypeKey;\r\n\t\t\t\t\tawait this.create(elementTypeKey);\r\n\r\n\t\t\t\t\tnew UmbWorkspaceIsNewRedirectController(\r\n\t\t\t\t\t\tthis,\r\n\t\t\t\t\t\tthis,\r\n\t\t\t\t\t\tthis.getHostElement().shadowRoot!.querySelector('umb-router-slot')!,\r\n\t\t\t\t\t);\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: 'edit/:key',\r\n\t\t\t\tcomponent: UmbBlockWorkspaceEditorElement,\r\n\t\t\t\tsetup: (component, info) => {\r\n\t\t\t\t\tconst key = decodeFilePath(info.match.params.key);\r\n\t\t\t\t\tthis.load(key);\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t]);\r\n\t}\r\n\r\n\t#gotManager() {\r\n\t\tif (!this.#blockManager) return;\r\n\t\tconst manager = this.#blockManager;\r\n\r\n\t\tthis.observe(\r\n\t\t\tmanager.liveEditingMode,\r\n\t\t\t(liveEditingMode) => {\r\n\t\t\t\tthis.#liveEditingMode = liveEditingMode ?? false;\r\n\t\t\t},\r\n\t\t\t'observeLiveEditingMode',\r\n\t\t);\r\n\r\n\t\tthis.observe(\r\n\t\t\tobserveMultiple([\r\n\t\t\t\tmanager.variantId,\r\n\t\t\t\tthis.content.structure.variesByCulture,\r\n\t\t\t\tthis.content.structure.variesBySegment,\r\n\t\t\t]),\r\n\t\t\t([variantId, variesByCulture, variesBySegment]) => {\r\n\t\t\t\tif (!variantId || variesByCulture === undefined || variesBySegment === undefined) return;\r\n\r\n\t\t\t\tif (!variesBySegment && !variesByCulture) {\r\n\t\t\t\t\tvariantId = UmbVariantId.CreateInvariant();\r\n\t\t\t\t} else if (!variesBySegment) {\r\n\t\t\t\t\tvariantId = variantId.toSegmentInvariant();\r\n\t\t\t\t} else if (!variesByCulture) {\r\n\t\t\t\t\tvariantId = variantId.toCultureInvariant();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.#variantId.setValue(variantId);\r\n\t\t\t},\r\n\t\t\t'observeVariantIds',\r\n\t\t);\r\n\r\n\t\tthis.removeUmbControllerByAlias('observeHasExpose');\r\n\t\tthis.observe(\r\n\t\t\tobserveMultiple([this.contentKey, this.variantId]),\r\n\t\t\t([contentKey, variantId]) => {\r\n\t\t\t\tif (!contentKey || !variantId) return;\r\n\r\n\t\t\t\tthis.observe(\r\n\t\t\t\t\tmanager.hasExposeOf(contentKey, variantId),\r\n\t\t\t\t\t(exposed) => {\r\n\t\t\t\t\t\tthis.#exposed.setValue(exposed);\r\n\t\t\t\t\t},\r\n\t\t\t\t\t'observeHasExpose',\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\t'observeContentKeyAndVariantId',\r\n\t\t);\r\n\r\n\t\tthis.observe(\r\n\t\t\tobserveMultiple([manager.readOnlyState.isReadOnly, this.variantId]),\r\n\t\t\t([isReadOnly, variantId]) => {\r\n\t\t\t\tconst unique = 'UMB_BLOCK_MANAGER_CONTEXT';\r\n\t\t\t\tif (variantId === undefined) return;\r\n\r\n\t\t\t\tif (isReadOnly) {\r\n\t\t\t\t\tconst state = {\r\n\t\t\t\t\t\tunique,\r\n\t\t\t\t\t\tvariantId,\r\n\t\t\t\t\t\tmessage: '',\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tthis.readOnlyState?.addState(state);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.readOnlyState?.removeState(unique);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'observeIsReadOnly',\r\n\t\t);\r\n\r\n\t\tthis.observe(\r\n\t\t\tthis.content.contentTypeId,\r\n\t\t\t(contentTypeId) => {\r\n\t\t\t\tthis.observe(\r\n\t\t\t\t\tcontentTypeId ? manager.blockTypeOf(contentTypeId) : undefined,\r\n\t\t\t\t\t(blockType) => {\r\n\t\t\t\t\t\tif (blockType?.editorSize) {\r\n\t\t\t\t\t\t\tthis.setEditorSize(blockType.editorSize);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t'observeBlockType',\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\t'observeContentTypeId',\r\n\t\t);\r\n\t}\r\n\r\n\tsetEditorSize(editorSize: UUIModalSidebarSize) {\r\n\t\tthis.#modalContext?.setModalSize(editorSize);\r\n\t}\r\n\r\n\tprotected override resetState() {\r\n\t\tsuper.resetState();\r\n\t\tthis.#name.setValue(undefined);\r\n\t\tthis.#layout.setValue(undefined);\r\n\t\tthis.#initialLayout = undefined;\r\n\t\tthis.#initialContent = undefined;\r\n\t\tthis.#initialSettings = undefined;\r\n\t\tthis.content.resetState();\r\n\t\tthis.settings.resetState();\r\n\t\tthis.removeUmbControllerByAlias(UmbWorkspaceIsNewRedirectControllerAlias);\r\n\t}\r\n\r\n\tasync load(unique: string) {\r\n\t\tawait this.#retrieveBlockManager;\r\n\t\tawait this.#retrieveBlockEntries;\r\n\t\tif (!this.#blockManager || !this.#blockEntries) {\r\n\t\t\tthrow new Error('Block manager not found');\r\n\t\t}\r\n\r\n\t\tthis.observe(\r\n\t\t\tthis.#blockEntries.layoutOf(unique),\r\n\t\t\t(layoutData) => {\r\n\t\t\t\tthis.#initialLayout ??= layoutData as LayoutDataType;\r\n\t\t\t\tthis.removeUmbControllerByAlias('observeLayoutInitially');\r\n\t\t\t},\r\n\t\t\t'observeLayoutInitially',\r\n\t\t);\r\n\r\n\t\tthis.#observeBlockData(unique);\r\n\t\tif (this.#liveEditingMode) {\r\n\t\t\tthis.establishLiveSync();\r\n\t\t}\r\n\t}\r\n\r\n\tasync create(contentElementTypeId: string) {\r\n\t\tawait this.#retrieveBlockEntries;\r\n\t\tawait this.#retrieveModalContext;\r\n\t\tif (!this.#blockEntries) {\r\n\t\t\tthrow new Error('Block Entries not found');\r\n\t\t}\r\n\t\tif (!this.#originData) {\r\n\t\t\tthrow new Error('Origin data not defined');\r\n\t\t}\r\n\r\n\t\t// TODO: Missing some way to append more layout data... this could be part of modal data, (or context api?)\r\n\r\n\t\tthis.setIsNew(true);\r\n\r\n\t\tconst blockCreated = await this.#blockEntries.create(contentElementTypeId, {}, this.#originData);\r\n\t\tif (!blockCreated) {\r\n\t\t\tthrow new Error('Block Entries could not create block');\r\n\t\t}\r\n\r\n\t\t// TODO: We should investigate if it makes sense to gather\r\n\r\n\t\tif (this.#liveEditingMode) {\r\n\t\t\t// Insert already, cause we are in live editing mode:\r\n\t\t\tconst blockInserted = await this.#blockEntries.insert(\r\n\t\t\t\tblockCreated.layout,\r\n\t\t\t\tblockCreated.content,\r\n\t\t\t\tblockCreated.settings,\r\n\t\t\t\tthis.#originData,\r\n\t\t\t);\r\n\t\t\tif (!blockInserted) {\r\n\t\t\t\tthrow new Error('Block Entries could not insert block');\r\n\t\t\t}\r\n\r\n\t\t\tconst unique = blockCreated.layout.contentKey;\r\n\r\n\t\t\tthis.#observeBlockData(unique);\r\n\t\t\tthis.establishLiveSync();\r\n\t\t} else {\r\n\t\t\tthis.#layout.setValue(blockCreated.layout as LayoutDataType);\r\n\t\t\tthis.content.setData(blockCreated.content);\r\n\t\t\tif (blockCreated.settings) {\r\n\t\t\t\tthis.settings.setData(blockCreated.settings);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t#observeBlockData(unique: string) {\r\n\t\tif (!this.#blockEntries) {\r\n\t\t\tthrow new Error('Block Entries not found');\r\n\t\t}\r\n\t\tthis.observe(\r\n\t\t\tthis.#blockEntries.layoutOf(unique),\r\n\t\t\t(layoutData) => {\r\n\t\t\t\tthis.#layout.setValue(layoutData as LayoutDataType);\r\n\r\n\t\t\t\t// Content:\r\n\t\t\t\tconst contentKey = layoutData?.contentKey;\r\n\t\t\t\tif (!contentKey) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.observe(\r\n\t\t\t\t\tthis.#blockManager!.contentOf(contentKey),\r\n\t\t\t\t\t(contentData) => {\r\n\t\t\t\t\t\tthis.content.setData(contentData);\r\n\t\t\t\t\t},\r\n\t\t\t\t\t'observeContent',\r\n\t\t\t\t);\r\n\t\t\t\tif (!this.#initialContent) {\r\n\t\t\t\t\tthis.observe(\r\n\t\t\t\t\t\tthis.#blockManager!.contentOf(contentKey),\r\n\t\t\t\t\t\t(contentData) => {\r\n\t\t\t\t\t\t\tthis.#initialContent ??= contentData;\r\n\t\t\t\t\t\t\tthis.removeUmbControllerByAlias('observeContentInitially');\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t'observeContentInitially',\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Settings:\r\n\t\t\t\tconst settingsKey = layoutData?.settingsKey;\r\n\t\t\t\tif (settingsKey) {\r\n\t\t\t\t\tthis.observe(\r\n\t\t\t\t\t\tthis.#blockManager!.settingsOf(settingsKey),\r\n\t\t\t\t\t\t(settingsData) => {\r\n\t\t\t\t\t\t\tthis.settings.setData(settingsData);\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t'observeSettings',\r\n\t\t\t\t\t);\r\n\t\t\t\t\tif (!this.#initialSettings) {\r\n\t\t\t\t\t\tthis.observe(\r\n\t\t\t\t\t\t\tthis.#blockManager!.settingsOf(settingsKey),\r\n\t\t\t\t\t\t\t(settingsData) => {\r\n\t\t\t\t\t\t\t\tthis.#initialSettings ??= settingsData;\r\n\t\t\t\t\t\t\t\tthis.removeUmbControllerByAlias('observeSettingsInitially');\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t'observeSettingsInitially',\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'observeLayout',\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Establishes live synchronization of the block's layout, content, and settings data.\r\n\t * This method observes local changes in the layout, content, and settings data and pushes those updates to the block manager.\r\n\t * This method is used in live editing mode to ensure that changes made to the block's data are immediately reflected\r\n\t * in the backoffice UI.\r\n\t */\r\n\testablishLiveSync() {\r\n\t\t// Syncing Layout data is not a necessity, but it was an idea that someone might wanted to manipulate that from this workspace, but as it is giving trouble in Block Grid with Inline Editing Live Sync, then its taken out for now. [NL]\r\n\t\tlet initialLayoutSet = true;\r\n\t\tthis.observe(\r\n\t\t\tthis.layout,\r\n\t\t\t(layoutData) => {\r\n\t\t\t\tif (layoutData) {\r\n\t\t\t\t\tif (initialLayoutSet) {\r\n\t\t\t\t\t\tinitialLayoutSet = false;\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.#blockManager?.setOneLayout(layoutData, this.#originData);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'observeThisLayout',\r\n\t\t);\r\n\t\tthis.observe(\r\n\t\t\tthis.content.data,\r\n\t\t\t(contentData) => {\r\n\t\t\t\tif (contentData) {\r\n\t\t\t\t\tthis.#blockManager?.setOneContent(contentData);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'observeThisContent',\r\n\t\t);\r\n\t\tthis.observe(\r\n\t\t\tthis.settings.data,\r\n\t\t\t(settingsData) => {\r\n\t\t\t\tif (settingsData) {\r\n\t\t\t\t\tthis.#blockManager?.setOneSettings(settingsData);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'observeThisSettings',\r\n\t\t);\r\n\t}\r\n\r\n\tgetData() {\r\n\t\treturn this.#layout.getValue();\r\n\t}\r\n\r\n\tgetUnique() {\r\n\t\treturn this.getData()!.contentKey;\r\n\t}\r\n\r\n\tgetEntityType() {\r\n\t\treturn this.#entityType;\r\n\t}\r\n\r\n\tgetName() {\r\n\t\treturn 'block name content element type here...';\r\n\t}\r\n\r\n\t/**\r\n\t * @function propertyValueByAlias\r\n\t * @param {string} propertyAlias - The alias of the property to get the value of.\r\n\t * @returns {Promise<Observable<ReturnType | undefined> | undefined>} - The value of the property.\r\n\t * @description Get an Observable for the value of this property.\r\n\t */\r\n\tasync propertyValueByAlias<propertyAliasType extends keyof LayoutDataType>(propertyAlias: propertyAliasType) {\r\n\t\treturn this.#layout.asObservablePart(\r\n\t\t\t(layout) => layout?.[propertyAlias as keyof LayoutDataType] as LayoutDataType[propertyAliasType],\r\n\t\t);\r\n\t}\r\n\r\n\tgetPropertyValue<propertyAliasType extends keyof LayoutDataType>(propertyAlias: propertyAliasType) {\r\n\t\t// TODO: Should be using Content, then we need a toggle or another method for getting settings.\r\n\t\treturn this.#layout.getValue()?.[propertyAlias as keyof LayoutDataType] as LayoutDataType[propertyAliasType];\r\n\t}\r\n\r\n\t/**\r\n\t * @function setPropertyValue\r\n\t * @param {string} alias - The alias of the property to set the value of.\r\n\t * @param {unknown} value - value can be a promise resolving into the actual value or the raw value it self.\r\n\t * @returns {Promise<void>}\r\n\t * @description Set the value of this property.\r\n\t */\r\n\tasync setPropertyValue(alias: string, value: unknown) {\r\n\t\tconst currentData = this.#layout.value;\r\n\t\tif (currentData) {\r\n\t\t\tthis.#layout.update({ ...currentData, [alias]: await value });\r\n\t\t}\r\n\t}\r\n\r\n\tasync submit() {\r\n\t\tconst layoutData = this.#layout.value;\r\n\t\tconst contentData = this.content.getData();\r\n\t\tif (!layoutData || !this.#blockManager || !this.#blockEntries || !contentData || !this.#originData) {\r\n\t\t\tthrow new Error('Missing data');\r\n\t\t}\r\n\r\n\t\tconst settingsData = this.settings.getData();\r\n\r\n\t\tif (!this.#liveEditingMode) {\r\n\t\t\tif (this.getIsNew() === true) {\r\n\t\t\t\t// Insert (This means the layout entry will be inserted at the desired location):\r\n\t\t\t\tconst blockInserted = await this.#blockEntries.insert(layoutData, contentData, settingsData, this.#originData);\r\n\t\t\t\tif (!blockInserted) {\r\n\t\t\t\t\tthrow new Error('Block Entries could not insert block');\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// Update data:\r\n\r\n\t\t\t\tthis.#blockManager.setOneLayout(layoutData, this.#originData);\r\n\t\t\t\tif (contentData) {\r\n\t\t\t\t\tthis.#blockManager.setOneContent(contentData);\r\n\t\t\t\t}\r\n\t\t\t\tif (settingsData) {\r\n\t\t\t\t\tthis.#blockManager.setOneSettings(settingsData);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.#expose(layoutData.contentKey);\r\n\t\tthis.setIsNew(false);\r\n\t}\r\n\r\n\texpose() {\r\n\t\tconst contentKey = this.#layout.value?.contentKey;\r\n\t\tif (!contentKey) throw new Error('Failed to expose block, missing content key.');\r\n\t\tthis.#expose(contentKey);\r\n\t}\r\n\r\n\t#expose(unique: string) {\r\n\t\tconst variantId = this.#variantId.getValue();\r\n\t\tif (!variantId) throw new Error('Failed to expose block, missing variant id.');\r\n\t\tthis.#blockManager?.setOneExpose(unique, variantId);\r\n\t}\r\n\r\n\t#modalRejected = () => {\r\n\t\tif (this.#liveEditingMode) {\r\n\t\t\t// Revert\r\n\t\t\t// Did it exist before?\r\n\t\t\tif (this.getIsNew() === true) {\r\n\t\t\t\t// Remove the block?\r\n\t\t\t\tconst contentKey = this.#layout.value?.contentKey;\r\n\t\t\t\tif (contentKey) {\r\n\t\t\t\t\tthis.#blockEntries?.delete(contentKey);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// Revert the layout, content & settings data to the original state: [NL]\r\n\t\t\t\tif (this.#initialLayout) {\r\n\t\t\t\t\tthis.#blockManager?.setOneLayout(this.#initialLayout, this.#originData);\r\n\t\t\t\t}\r\n\t\t\t\tif (this.#initialContent) {\r\n\t\t\t\t\tthis.#blockManager?.setOneContent(this.#initialContent);\r\n\t\t\t\t}\r\n\t\t\t\tif (this.#initialSettings) {\r\n\t\t\t\t\tthis.#blockManager?.setOneContent(this.#initialSettings);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tpublic override destroy(): void {\r\n\t\tsuper.destroy();\r\n\t\tthis.#layout?.destroy();\r\n\t\tthis.#name?.destroy();\r\n\t\tthis.#layout = undefined as any;\r\n\t\tthis.#name = undefined as any;\r\n\t\tthis.#blockManager = undefined;\r\n\t\tthis.#originData = undefined;\r\n\t}\r\n}\r\n\r\nexport { UmbBlockWorkspaceContext as api };\r\n"],"names":["UmbBlockWorkspaceEditorElement","UmbLitElement","UMB_BLOCK_WORKSPACE_CONTEXT","context","observeMultiple","contentType","isNew","name","html","UmbTextStyles","css","__decorateClass","state","customElement","UmbBlockElementPropertyDatasetContext","UmbElementPropertyDatasetContext","host","elementManager","variantId","createObservablePart","v","UmbBlockElementManager","UmbControllerBase","dataPathPropertyName","#data","UmbElementWorkspaceDataManager","#getDataPromise","resolve","#getDataResolver","UmbReadOnlyVariantStateManager","#variantId","UmbClassState","data","#dataTypeItemManager","UmbDataTypeItemRepositoryManager","#dataTypeSchemaAliasMap","UmbContentTypeStructureManager","UmbDocumentTypeDetailRepository","UmbValidationController","id","key","dataTypeUniques","dataTypes","dataType","UmbVariantId","#createPropertyVariantId","property","propertyAlias","mergeObservables","x","alias","currentData","value","editorAlias","entry","values","appendToFrozenArray","UmbBlockElementValuesDataValidationPathTranslator","UmbBlockWorkspaceContext","UmbSubmittableWorkspaceContextBase","workspaceArgs","#layout","UmbObjectState","#name","UmbStringState","#exposed","UmbBooleanState","#modalRejected","#liveEditingMode","contentKey","#blockEntries","#initialLayout","#blockManager","#originData","#initialContent","#initialSettings","manifest","#entityType","#retrieveModalContext","UMB_MODAL_CONTEXT","#modalContext","#retrieveBlockManager","UMB_BLOCK_MANAGER_CONTEXT","manager","#gotManager","#retrieveBlockEntries","UMB_BLOCK_ENTRIES_CONTEXT","UMB_BLOCK_ENTRY_CONTEXT","component","info","elementTypeKey","UmbWorkspaceIsNewRedirectController","decodeFilePath","liveEditingMode","variesByCulture","variesBySegment","exposed","isReadOnly","unique","contentTypeId","blockType","editorSize","UmbWorkspaceIsNewRedirectControllerAlias","layoutData","#observeBlockData","contentElementTypeId","blockCreated","contentData","settingsKey","settingsData","initialLayoutSet","layout","#expose"],"mappings":"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"}