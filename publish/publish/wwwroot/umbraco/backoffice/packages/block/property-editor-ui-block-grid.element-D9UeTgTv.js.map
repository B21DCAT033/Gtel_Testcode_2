{"version":3,"file":"property-editor-ui-block-grid.element-D9UeTgTv.js","sources":["../../../src/packages/block/block-grid/context/block-grid-manager.context.ts","../../../src/packages/block/block-grid/property-editors/block-grid-editor/property-editor-ui-block-grid.element.ts"],"sourcesContent":["import type { UmbBlockGridLayoutModel, UmbBlockGridTypeModel } from '../types.js';\r\nimport type { UmbBlockGridWorkspaceOriginData } from '../index.js';\r\nimport { UMB_BLOCK_GRID_DEFAULT_LAYOUT_STYLESHEET } from './constants.js';\r\nimport {\r\n\tappendToFrozenArray,\r\n\tpushAtToUniqueArray,\r\n\tUmbArrayState,\r\n\tUmbBooleanState,\r\n} from '@umbraco-cms/backoffice/observable-api';\r\nimport { transformServerPathToClientPath } from '@umbraco-cms/backoffice/utils';\r\nimport { UmbBlockManagerContext } from '@umbraco-cms/backoffice/block';\r\nimport { UMB_APP_CONTEXT } from '@umbraco-cms/backoffice/app';\r\nimport type { UmbBlockDataModel, UmbBlockDataObjectModel } from '@umbraco-cms/backoffice/block';\r\nimport type { UmbBlockTypeGroup } from '@umbraco-cms/backoffice/block-type';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport type { UmbNumberRangeValueType } from '@umbraco-cms/backoffice/models';\r\nimport type { UmbPropertyEditorConfigCollection } from '@umbraco-cms/backoffice/property-editor';\r\n\r\n/**\r\n * A implementation of the Block Manager specifically for the Block Grid Editor.\r\n */\r\nexport class UmbBlockGridManagerContext<\r\n\tBlockLayoutType extends UmbBlockGridLayoutModel = UmbBlockGridLayoutModel,\r\n> extends UmbBlockManagerContext<UmbBlockGridTypeModel, UmbBlockGridLayoutModel, UmbBlockGridWorkspaceOriginData> {\r\n\t//\r\n\t#inlineEditingMode = new UmbBooleanState(undefined);\r\n\treadonly inlineEditingMode = this.#inlineEditingMode.asObservable();\r\n\r\n\tsetInlineEditingMode(inlineEditingMode: boolean | undefined) {\r\n\t\tthis.#inlineEditingMode.setValue(inlineEditingMode ?? false);\r\n\t}\r\n\tgetInlineEditingMode(): boolean | undefined {\r\n\t\treturn this.#inlineEditingMode.getValue();\r\n\t}\r\n\r\n\t#initAppUrl: Promise<void>;\r\n\r\n\t#serverUrl?: string;\r\n\r\n\t#blockGroups = new UmbArrayState(<Array<UmbBlockTypeGroup>>[], (x) => x.key);\r\n\tpublic readonly blockGroups = this.#blockGroups.asObservable();\r\n\r\n\tlayoutStylesheet = this._editorConfiguration.asObservablePart((x) => {\r\n\t\tif (!x) return undefined;\r\n\t\tconst layoutStylesheet = x.getValueByAlias<string>('layoutStylesheet');\r\n\t\tif (!layoutStylesheet) return UMB_BLOCK_GRID_DEFAULT_LAYOUT_STYLESHEET;\r\n\r\n\t\tif (layoutStylesheet) {\r\n\t\t\t// Cause we await initAppUrl in setting the _editorConfiguration, we can trust the appUrl begin here.\r\n\t\t\tconst url = new URL(transformServerPathToClientPath(layoutStylesheet), this.#serverUrl);\r\n\t\t\treturn url.href;\r\n\t\t}\r\n\t\treturn undefined;\r\n\t});\r\n\tgridColumns = this._editorConfiguration.asObservablePart((x) => {\r\n\t\tconst value = x?.getValueByAlias('gridColumns') as string | undefined;\r\n\t\treturn parseInt(value && value !== '' ? value : '12');\r\n\t});\r\n\r\n\tgetMinAllowed() {\r\n\t\treturn this._editorConfiguration.getValue()?.getValueByAlias<UmbNumberRangeValueType>('validationLimit')?.min ?? 0;\r\n\t}\r\n\r\n\tgetMaxAllowed() {\r\n\t\treturn (\r\n\t\t\tthis._editorConfiguration.getValue()?.getValueByAlias<UmbNumberRangeValueType>('validationLimit')?.max ?? Infinity\r\n\t\t);\r\n\t}\r\n\r\n\toverride setEditorConfiguration(configs: UmbPropertyEditorConfigCollection) {\r\n\t\tthis.#initAppUrl.then(() => {\r\n\t\t\t// we await initAppUrl, So the appUrl begin here is available when retrieving the layoutStylesheet.\r\n\t\t\tsuper.setEditorConfiguration(configs);\r\n\t\t});\r\n\t}\r\n\r\n\tsetBlockGroups(blockGroups: Array<UmbBlockTypeGroup>) {\r\n\t\tthis.#blockGroups.setValue(blockGroups);\r\n\t}\r\n\tgetBlockGroups() {\r\n\t\treturn this.#blockGroups.value;\r\n\t}\r\n\tgetBlockGroupName(unique: string) {\r\n\t\treturn this.#blockGroups.getValue().find((group) => group.key === unique)?.name;\r\n\t}\r\n\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host);\r\n\r\n\t\tthis.#initAppUrl = this.getContext(UMB_APP_CONTEXT).then((appContext) => {\r\n\t\t\tthis.#serverUrl = appContext.getServerUrl();\r\n\t\t});\r\n\t}\r\n\t/**\r\n\t * @deprecated Use createWithPresets instead. Will be removed in v.17.\r\n\t */\r\n\tcreate(\r\n\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n\t\tcontentElementTypeKey: string,\r\n\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n\t\tpartialLayoutEntry?: Omit<BlockLayoutType, 'contentKey'>,\r\n\t\t// This property is used by some implementations, but not used in this. Do not remove. [NL]\r\n\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n\t\t_originData?: UmbBlockGridWorkspaceOriginData,\r\n\t) {\r\n\t\tthrow new Error('Method deparecated use createWithPresets');\r\n\t\treturn {} as UmbBlockDataObjectModel<BlockLayoutType>;\r\n\t}\r\n\r\n\tasync createWithPresets(\r\n\t\tcontentElementTypeKey: string,\r\n\t\tpartialLayoutEntry?: Omit<BlockLayoutType, 'contentKey'>,\r\n\t\t// This property is used by some implementations, but not used in this.\r\n\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n\t\toriginData?: UmbBlockGridWorkspaceOriginData,\r\n\t) {\r\n\t\treturn await super._createBlockData(contentElementTypeKey, partialLayoutEntry);\r\n\t}\r\n\r\n\t/**\r\n\t * Inserts a layout entry into an area of a layout entry.\r\n\t * @param layoutEntry The layout entry to insert.\r\n\t * @param insert\r\n\t * @param entries The layout entries to search within.\r\n\t * @param parentUnique The parentUnique to search for.\r\n\t * @param parentId\r\n\t * @param areaKey The areaKey to insert the layout entry into.\r\n\t * @param index The index to insert the layout entry at.\r\n\t * @returns a updated layout entries array if the insert was successful.\r\n\t * @remarks\r\n\t * This method is recursive and will search for the parentUnique in the layout entries.\r\n\t * If the parentUnique is found, the layout entry will be inserted into the items of the area that matches the areaKey.\r\n\t * This returns a new array of layout entries with the updated layout entry inserted.\r\n\t * Because the layout entries are frozen, the affected parts is replaced with a new. Only updating/unfreezing the affected part of the structure.\r\n\t */\r\n\t#appendLayoutEntryToArea(\r\n\t\tinsert: UmbBlockGridLayoutModel,\r\n\t\tentries: Array<UmbBlockGridLayoutModel>,\r\n\t\tparentId: string,\r\n\t\tareaKey: string,\r\n\t\tindex: number,\r\n\t): Array<UmbBlockGridLayoutModel> | undefined {\r\n\t\t// I'm sorry, this code is not easy to read or maintain [NL]\r\n\t\tlet i: number = entries.length;\r\n\t\twhile (i--) {\r\n\t\t\tconst currentEntry = entries[i];\r\n\t\t\t// Lets check if we found the right parent layout entry:\r\n\t\t\tif (currentEntry.contentKey === parentId) {\r\n\t\t\t\t// Append the layout entry to be inserted and unfreeze the rest of the data:\r\n\t\t\t\tconst areas =\r\n\t\t\t\t\tcurrentEntry.areas?.map((x) =>\r\n\t\t\t\t\t\tx.key === areaKey\r\n\t\t\t\t\t\t\t? {\r\n\t\t\t\t\t\t\t\t\t...x,\r\n\t\t\t\t\t\t\t\t\titems: pushAtToUniqueArray([...x.items], insert, (x) => x.contentKey === insert.contentKey, index),\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t: x,\r\n\t\t\t\t\t) ?? [];\r\n\t\t\t\treturn appendToFrozenArray(\r\n\t\t\t\t\tentries,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t...currentEntry,\r\n\t\t\t\t\t\tareas,\r\n\t\t\t\t\t},\r\n\t\t\t\t\t(x) => x.contentKey === currentEntry.contentKey,\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\t// Otherwise check if any items of the areas are the parent layout entry we are looking for. We do so based on parentId, recursively:\r\n\t\t\tif (currentEntry.areas) {\r\n\t\t\t\tlet y: number = currentEntry.areas.length;\r\n\t\t\t\twhile (y--) {\r\n\t\t\t\t\t// Recursively ask the items of this area to insert the layout entry, if something returns there was a match in this branch. [NL]\r\n\t\t\t\t\tconst correctedAreaItems = this.#appendLayoutEntryToArea(\r\n\t\t\t\t\t\tinsert,\r\n\t\t\t\t\t\tcurrentEntry.areas[y].items,\r\n\t\t\t\t\t\tparentId,\r\n\t\t\t\t\t\tareaKey,\r\n\t\t\t\t\t\tindex,\r\n\t\t\t\t\t);\r\n\t\t\t\t\tif (correctedAreaItems) {\r\n\t\t\t\t\t\t// This area got a corrected set of items, lets append those to the area and unfreeze the surrounding data:\r\n\t\t\t\t\t\tconst area = currentEntry.areas[y];\r\n\t\t\t\t\t\treturn appendToFrozenArray(\r\n\t\t\t\t\t\t\tentries,\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t...currentEntry,\r\n\t\t\t\t\t\t\t\tareas: appendToFrozenArray(\r\n\t\t\t\t\t\t\t\t\tcurrentEntry.areas,\r\n\t\t\t\t\t\t\t\t\t{ ...area, items: correctedAreaItems },\r\n\t\t\t\t\t\t\t\t\t(z) => z.key === area.key,\r\n\t\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t(x) => x.contentKey === currentEntry.contentKey,\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\tinsert(\r\n\t\tlayoutEntry: BlockLayoutType,\r\n\t\tcontent: UmbBlockDataModel,\r\n\t\tsettings: UmbBlockDataModel | undefined,\r\n\t\toriginData: UmbBlockGridWorkspaceOriginData,\r\n\t) {\r\n\t\tthis.setOneLayout(layoutEntry, originData);\r\n\t\tthis.insertBlockData(layoutEntry, content, settings, originData);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\toverride setOneLayout(layoutEntry: BlockLayoutType, originData?: UmbBlockGridWorkspaceOriginData) {\r\n\t\tconst index = originData?.index ?? -1;\r\n\r\n\t\tif (originData?.parentUnique && originData?.areaKey) {\r\n\t\t\t// Find layout entry based on parentUnique, recursively, as it needs to check layout of areas as well:\r\n\t\t\tconst layoutEntries = this.#appendLayoutEntryToArea(\r\n\t\t\t\tlayoutEntry,\r\n\t\t\t\tthis._layouts.getValue(),\r\n\t\t\t\toriginData?.parentUnique,\r\n\t\t\t\toriginData?.areaKey,\r\n\t\t\t\tindex,\r\n\t\t\t);\r\n\r\n\t\t\t// If this appending was successful, we got a new set of layout entries which we can set as the new value: [NL]\r\n\t\t\tif (layoutEntries) {\r\n\t\t\t\tthis._layouts.setValue(layoutEntries);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis._layouts.appendOneAt(layoutEntry, index);\r\n\t\t}\r\n\t}\r\n\r\n\tonDragStart() {\r\n\t\t(this.getHostElement() as HTMLElement).style.setProperty('--umb-block-grid--is-dragging', ' ');\r\n\t}\r\n\r\n\tonDragEnd() {\r\n\t\t(this.getHostElement() as HTMLElement).style.removeProperty('--umb-block-grid--is-dragging');\r\n\t}\r\n}\r\n","import { UmbBlockGridManagerContext } from '../../context/block-grid-manager.context.js';\r\nimport { UMB_BLOCK_GRID_PROPERTY_EDITOR_SCHEMA_ALIAS } from './constants.js';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\nimport {\r\n\thtml,\r\n\tcustomElement,\r\n\tproperty,\r\n\tstate,\r\n\tcss,\r\n\ttype PropertyValueMap,\r\n\tref,\r\n} from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbTextStyles } from '@umbraco-cms/backoffice/style';\r\nimport type {\r\n\tUmbPropertyEditorUiElement,\r\n\tUmbPropertyEditorConfigCollection,\r\n} from '@umbraco-cms/backoffice/property-editor';\r\nimport { observeMultiple } from '@umbraco-cms/backoffice/observable-api';\r\nimport { UMB_PROPERTY_CONTEXT, UMB_PROPERTY_DATASET_CONTEXT } from '@umbraco-cms/backoffice/property';\r\nimport { UmbFormControlMixin, UmbValidationContext } from '@umbraco-cms/backoffice/validation';\r\nimport type { UmbBlockTypeGroup } from '@umbraco-cms/backoffice/block-type';\r\nimport type { UmbBlockGridTypeModel, UmbBlockGridValueModel } from '@umbraco-cms/backoffice/block-grid';\r\nimport { UmbBlockElementDataValidationPathTranslator } from '@umbraco-cms/backoffice/block';\r\nimport { debounceTime } from '@umbraco-cms/backoffice/external/rxjs';\r\n\r\nimport '../../components/block-grid-entries/index.js';\r\n\r\n/**\r\n * @element umb-property-editor-ui-block-grid\r\n */\r\n@customElement('umb-property-editor-ui-block-grid')\r\nexport class UmbPropertyEditorUIBlockGridElement\r\n\textends UmbFormControlMixin<UmbBlockGridValueModel, typeof UmbLitElement>(UmbLitElement)\r\n\timplements UmbPropertyEditorUiElement\r\n{\r\n\t#validationContext = new UmbValidationContext(this);\r\n\t#contentDataPathTranslator?: UmbBlockElementDataValidationPathTranslator;\r\n\t#settingsDataPathTranslator?: UmbBlockElementDataValidationPathTranslator;\r\n\t#managerContext = new UmbBlockGridManagerContext(this);\r\n\t//\r\n\r\n\t#lastValue: UmbBlockGridValueModel | undefined = undefined;\r\n\r\n\tpublic set config(config: UmbPropertyEditorConfigCollection | undefined) {\r\n\t\tif (!config) return;\r\n\r\n\t\tconst blocks = config.getValueByAlias<Array<UmbBlockGridTypeModel>>('blocks') ?? [];\r\n\t\tthis.#managerContext.setBlockTypes(blocks);\r\n\r\n\t\tconst blockGroups = config.getValueByAlias<Array<UmbBlockTypeGroup>>('blockGroups') ?? [];\r\n\t\tthis.#managerContext.setBlockGroups(blockGroups);\r\n\r\n\t\tconst useInlineEditingAsDefault = config.getValueByAlias<boolean>('useInlineEditingAsDefault');\r\n\t\tthis.#managerContext.setInlineEditingMode(useInlineEditingAsDefault);\r\n\r\n\t\tthis.style.maxWidth = config.getValueByAlias<string>('maxPropertyWidth') ?? '';\r\n\r\n\t\t//config.useLiveEditing, is covered by the EditorConfiguration of context. [NL]\r\n\t\tthis.#managerContext.setEditorConfiguration(config);\r\n\t}\r\n\r\n\t@state()\r\n\tprivate _layoutColumns?: number;\r\n\r\n\t@property({ attribute: false })\r\n\tpublic override set value(value: UmbBlockGridValueModel | undefined) {\r\n\t\tthis.#lastValue = value;\r\n\r\n\t\tif (!value) {\r\n\t\t\tsuper.value = undefined;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst buildUpValue: Partial<UmbBlockGridValueModel> = value ? { ...value } : {};\r\n\t\tbuildUpValue.layout ??= {};\r\n\t\tbuildUpValue.contentData ??= [];\r\n\t\tbuildUpValue.settingsData ??= [];\r\n\t\tbuildUpValue.expose ??= [];\r\n\t\tsuper.value = buildUpValue as UmbBlockGridValueModel;\r\n\r\n\t\tthis.#managerContext.setLayouts(super.value.layout[UMB_BLOCK_GRID_PROPERTY_EDITOR_SCHEMA_ALIAS] ?? []);\r\n\t\tthis.#managerContext.setContents(super.value.contentData);\r\n\t\tthis.#managerContext.setSettings(super.value.settingsData);\r\n\t\tthis.#managerContext.setExposes(super.value.expose);\r\n\t}\r\n\tpublic override get value(): UmbBlockGridValueModel | undefined {\r\n\t\treturn super.value;\r\n\t}\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.consumeContext(UMB_PROPERTY_CONTEXT, (context) => {\r\n\t\t\tthis.observe(\r\n\t\t\t\tcontext.dataPath,\r\n\t\t\t\t(dataPath) => {\r\n\t\t\t\t\t// Translate paths for content/settings:\r\n\t\t\t\t\tthis.#contentDataPathTranslator?.destroy();\r\n\t\t\t\t\tthis.#settingsDataPathTranslator?.destroy();\r\n\t\t\t\t\tif (dataPath) {\r\n\t\t\t\t\t\t// Set the data path for the local validation context:\r\n\t\t\t\t\t\tthis.#validationContext.setDataPath(dataPath);\r\n\r\n\t\t\t\t\t\tthis.#contentDataPathTranslator = new UmbBlockElementDataValidationPathTranslator(this, 'contentData');\r\n\t\t\t\t\t\tthis.#settingsDataPathTranslator = new UmbBlockElementDataValidationPathTranslator(this, 'settingsData');\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t'observeDataPath',\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\t// TODO: Prevent initial notification from these observes\r\n\t\tthis.consumeContext(UMB_PROPERTY_CONTEXT, (propertyContext) => {\r\n\t\t\tthis.observe(\r\n\t\t\t\tobserveMultiple([\r\n\t\t\t\t\tthis.#managerContext.layouts,\r\n\t\t\t\t\tthis.#managerContext.contents,\r\n\t\t\t\t\tthis.#managerContext.settings,\r\n\t\t\t\t\tthis.#managerContext.exposes,\r\n\t\t\t\t]).pipe(debounceTime(20)),\r\n\t\t\t\t([layouts, contents, settings, exposes]) => {\r\n\t\t\t\t\tif (layouts.length === 0) {\r\n\t\t\t\t\t\tsuper.value = undefined;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tsuper.value = {\r\n\t\t\t\t\t\t\t...super.value,\r\n\t\t\t\t\t\t\tlayout: { [UMB_BLOCK_GRID_PROPERTY_EDITOR_SCHEMA_ALIAS]: layouts },\r\n\t\t\t\t\t\t\tcontentData: contents,\r\n\t\t\t\t\t\t\tsettingsData: settings,\r\n\t\t\t\t\t\t\texpose: exposes,\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// If we don't have a value set from the outside or an internal value, we don't want to set the value.\r\n\t\t\t\t\t// This is added to prevent the block grid from setting an empty value on startup.\r\n\t\t\t\t\tif (this.#lastValue === undefined && super.value === undefined) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tpropertyContext.setValue(super.value);\r\n\t\t\t\t},\r\n\t\t\t\t'motherObserver',\r\n\t\t\t);\r\n\r\n\t\t\tthis.observe(\r\n\t\t\t\tpropertyContext?.alias,\r\n\t\t\t\t(alias) => {\r\n\t\t\t\t\tthis.#managerContext.setPropertyAlias(alias);\r\n\t\t\t\t},\r\n\t\t\t\t'observePropertyAlias',\r\n\t\t\t);\r\n\r\n\t\t\t// If the current property is readonly all inner block content should also be readonly.\r\n\t\t\tthis.observe(\r\n\t\t\t\tobserveMultiple([propertyContext.isReadOnly, propertyContext.variantId]),\r\n\t\t\t\t([isReadOnly, variantId]) => {\r\n\t\t\t\t\tconst unique = 'UMB_PROPERTY_EDITOR_UI';\r\n\t\t\t\t\tif (variantId === undefined) return;\r\n\r\n\t\t\t\t\tif (isReadOnly) {\r\n\t\t\t\t\t\tconst state = {\r\n\t\t\t\t\t\t\tunique,\r\n\t\t\t\t\t\t\tvariantId,\r\n\t\t\t\t\t\t\tmessage: '',\r\n\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\tthis.#managerContext.readOnlyState.addState(state);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.#managerContext.readOnlyState.removeState(unique);\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t'observeIsReadOnly',\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\tthis.consumeContext(UMB_PROPERTY_DATASET_CONTEXT, (context) => {\r\n\t\t\tthis.#managerContext.setVariantId(context.getVariantId());\r\n\t\t});\r\n\t}\r\n\r\n\tprotected override firstUpdated(_changedProperties: PropertyValueMap<any> | Map<PropertyKey, unknown>): void {\r\n\t\tsuper.firstUpdated(_changedProperties);\r\n\r\n\t\tthis.observe(this.#managerContext.gridColumns, (gridColumns) => {\r\n\t\t\tif (gridColumns) {\r\n\t\t\t\tthis._layoutColumns = gridColumns;\r\n\t\t\t\tthis.style.setProperty('--umb-block-grid--grid-columns', gridColumns.toString());\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t#currentEntriesElement?: Element;\r\n\t#gotRootEntriesElement(element: Element | undefined): void {\r\n\t\tif (this.#currentEntriesElement === element) return;\r\n\t\tif (this.#currentEntriesElement) {\r\n\t\t\tthis.removeFormControlElement(this.#currentEntriesElement as any);\r\n\t\t}\r\n\t\tthis.#currentEntriesElement = element;\r\n\t\tif (element) {\r\n\t\t\tthis.addFormControlElement(element as any);\r\n\t\t}\r\n\t}\r\n\r\n\toverride render() {\r\n\t\treturn html` <umb-block-grid-entries\r\n\t\t\t${ref(this.#gotRootEntriesElement)}\r\n\t\t\t.areaKey=${null}\r\n\t\t\t.layoutColumns=${this._layoutColumns}></umb-block-grid-entries>`;\r\n\t}\r\n\r\n\tstatic override styles = [\r\n\t\tUmbTextStyles,\r\n\t\tcss`\r\n\t\t\t:host {\r\n\t\t\t\tdisplay: grid;\r\n\t\t\t\tgap: 1px;\r\n\t\t\t}\r\n\t\t\t> div {\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\tflex-direction: column;\r\n\t\t\t\talign-items: stretch;\r\n\t\t\t}\r\n\r\n\t\t\tuui-button-group {\r\n\t\t\t\tpadding-top: 1px;\r\n\t\t\t\tdisplay: grid;\r\n\t\t\t\tgrid-template-columns: 1fr auto;\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\nexport default UmbPropertyEditorUIBlockGridElement;\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-property-editor-ui-block-grid': UmbPropertyEditorUIBlockGridElement;\r\n\t}\r\n}\r\n"],"names":["UmbBlockGridManagerContext","UmbBlockManagerContext","host","#inlineEditingMode","UmbBooleanState","#blockGroups","UmbArrayState","x","layoutStylesheet","UMB_BLOCK_GRID_DEFAULT_LAYOUT_STYLESHEET","transformServerPathToClientPath","#serverUrl","value","#initAppUrl","UMB_APP_CONTEXT","appContext","inlineEditingMode","configs","blockGroups","unique","group","contentElementTypeKey","partialLayoutEntry","_originData","originData","#appendLayoutEntryToArea","insert","entries","parentId","areaKey","index","i","currentEntry","areas","pushAtToUniqueArray","appendToFrozenArray","y","correctedAreaItems","area","z","layoutEntry","content","settings","layoutEntries","_validationContext","_contentDataPathTranslator","_settingsDataPathTranslator","_managerContext","_lastValue","_currentEntriesElement","_UmbPropertyEditorUIBlockGridElement_instances","gotRootEntriesElement_fn","UmbPropertyEditorUIBlockGridElement","UmbFormControlMixin","UmbLitElement","__privateAdd","UmbValidationContext","UMB_PROPERTY_CONTEXT","context","dataPath","__privateGet","__privateSet","UmbBlockElementDataValidationPathTranslator","propertyContext","observeMultiple","debounceTime","layouts","contents","exposes","UMB_BLOCK_GRID_PROPERTY_EDITOR_SCHEMA_ALIAS","alias","isReadOnly","variantId","state","UMB_PROPERTY_DATASET_CONTEXT","config","blocks","useInlineEditingAsDefault","buildUpValue","_changedProperties","gridColumns","html","ref","__privateMethod","element","UmbTextStyles","css","__decorateClass","property","customElement","UmbPropertyEditorUIBlockGridElement$1"],"mappings":"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"}