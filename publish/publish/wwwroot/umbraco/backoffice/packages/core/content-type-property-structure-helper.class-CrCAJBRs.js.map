{"version":3,"file":"content-type-property-structure-helper.class-CrCAJBRs.js","sources":["../../../src/packages/core/content-type/workspace/views/design/content-type-design-editor-property.context-token.ts","../../../src/packages/core/content-type/structure/content-type-property-structure-helper.class.ts"],"sourcesContent":["import type { UmbPropertyTypeContext } from './content-type-design-editor-property.context.js';\r\nimport { UmbContextToken } from '@umbraco-cms/backoffice/context-api';\r\n\r\nexport const UMB_PROPERTY_TYPE_CONTEXT = new UmbContextToken<UmbPropertyTypeContext>('UmbPropertyTypeContext');\r\n","import type {\r\n\tUmbContentTypeModel,\r\n\tUmbPropertyContainerTypes,\r\n\tUmbPropertyTypeContainerModel,\r\n\tUmbPropertyTypeModel,\r\n} from '../types.js';\r\nimport type { UmbContentTypeStructureManager } from './content-type-structure-manager.class.js';\r\nimport { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbArrayState, mergeObservables } from '@umbraco-cms/backoffice/observable-api';\r\n\r\ntype UmbPropertyTypeId = UmbPropertyTypeModel['id'];\r\n\r\n/**\r\n * This class is a helper class for managing the structure of containers in a content type.\r\n * This requires a structure manager {@link UmbContentTypeStructureManager} to manage the structure.\r\n */\r\nexport class UmbContentTypePropertyStructureHelper<T extends UmbContentTypeModel> extends UmbControllerBase {\r\n\t#init;\r\n\t#initResolver?: (value: unknown) => void;\r\n\r\n\t#structure?: UmbContentTypeStructureManager<T>;\r\n\r\n\t#containerId?: string | null;\r\n\r\n\t// State which holds all the properties of the current container, this is a composition of all properties from the containers that matches our target [NL]\r\n\t#propertyStructure = new UmbArrayState<UmbPropertyTypeModel>([], (x) => x.id);\r\n\treadonly propertyStructure = this.#propertyStructure.asObservable();\r\n\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host);\r\n\t\tthis.#init = new Promise((resolve) => {\r\n\t\t\tthis.#initResolver = resolve;\r\n\t\t});\r\n\t\tthis.#propertyStructure.sortBy((a, b) => a.sortOrder - b.sortOrder);\r\n\t}\r\n\r\n\tasync contentTypes() {\r\n\t\tawait this.#init;\r\n\t\tif (!this.#structure) return;\r\n\t\treturn this.#structure.contentTypes;\r\n\t}\r\n\r\n\tpublic setStructureManager(structure: UmbContentTypeStructureManager<T>) {\r\n\t\tif (this.#structure === structure) return;\r\n\t\tif (this.#structure) {\r\n\t\t\tthrow new Error(\r\n\t\t\t\t'Structure manager is already set, the helpers are not designed to be re-setup with new managers',\r\n\t\t\t);\r\n\t\t}\r\n\t\tthis.#structure = structure;\r\n\t\tthis.#initResolver?.(undefined);\r\n\t\tthis.#initResolver = undefined;\r\n\t\tthis.#observeContainers();\r\n\t}\r\n\r\n\tpublic getStructureManager() {\r\n\t\treturn this.#structure;\r\n\t}\r\n\r\n\tpublic setContainerId(value?: string | null) {\r\n\t\tif (this.#containerId === value) return;\r\n\t\tthis.#containerId = value;\r\n\t\tthis.#observeContainers();\r\n\t}\r\n\tpublic getContainerId() {\r\n\t\treturn this.#containerId;\r\n\t}\r\n\r\n\tprivate _containerName?: string;\r\n\tprivate _containerType?: UmbPropertyContainerTypes;\r\n\tprivate _parentName?: string | null;\r\n\tprivate _parentType?: UmbPropertyContainerTypes;\r\n\r\n\t#containers?: Array<UmbPropertyTypeContainerModel>;\r\n\t#observeContainers() {\r\n\t\tif (!this.#structure || this.#containerId === undefined) return;\r\n\r\n\t\tif (this.#containerId === null) {\r\n\t\t\tthis.observe(\r\n\t\t\t\tthis.#structure.propertyStructuresOf(null),\r\n\t\t\t\t(properties) => {\r\n\t\t\t\t\tthis.#propertyStructure.setValue(properties);\r\n\t\t\t\t},\r\n\t\t\t\t'observePropertyStructures',\r\n\t\t\t);\r\n\t\t\tthis.removeUmbControllerByAlias('_observeContainers');\r\n\t\t} else {\r\n\t\t\tthis.observe(\r\n\t\t\t\tthis.#structure.containerById(this.#containerId),\r\n\t\t\t\t(container) => {\r\n\t\t\t\t\tif (container) {\r\n\t\t\t\t\t\tthis._containerName = container.name ?? '';\r\n\t\t\t\t\t\tthis._containerType = container.type;\r\n\t\t\t\t\t\tif (container.parent) {\r\n\t\t\t\t\t\t\t// We have a parent for our main container, so lets observe that one as well: [NL]\r\n\t\t\t\t\t\t\tthis.observe(\r\n\t\t\t\t\t\t\t\tthis.#structure!.containerById(container.parent.id),\r\n\t\t\t\t\t\t\t\t(parent) => {\r\n\t\t\t\t\t\t\t\t\tif (parent) {\r\n\t\t\t\t\t\t\t\t\t\tthis._parentName = parent.name ?? '';\r\n\t\t\t\t\t\t\t\t\t\tthis._parentType = parent.type;\r\n\t\t\t\t\t\t\t\t\t\tthis.#observeSimilarContainers();\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tthis.removeUmbControllerByAlias('_observeContainers');\r\n\t\t\t\t\t\t\t\t\t\tthis._parentName = undefined;\r\n\t\t\t\t\t\t\t\t\t\tthis._parentType = undefined;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t'_observeMainParentContainer',\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthis.removeUmbControllerByAlias('_observeMainParentContainer');\r\n\t\t\t\t\t\t\tthis._parentName = null; //In this way we want to look for one without a parent. [NL]\r\n\t\t\t\t\t\t\tthis._parentType = undefined;\r\n\t\t\t\t\t\t\tthis.#observeSimilarContainers();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.removeUmbControllerByAlias('_observeContainers');\r\n\t\t\t\t\t\tthis._containerName = undefined;\r\n\t\t\t\t\t\tthis._containerType = undefined;\r\n\t\t\t\t\t\tthis.#propertyStructure.setValue([]);\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t'_observeMainContainer',\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\t#observeSimilarContainers() {\r\n\t\tif (this._containerName === undefined || !this._containerType || this._parentName === undefined) return;\r\n\t\tthis.observe(\r\n\t\t\tthis.#structure!.containersByNameAndTypeAndParent(\r\n\t\t\t\tthis._containerName,\r\n\t\t\t\tthis._containerType,\r\n\t\t\t\tthis._parentName,\r\n\t\t\t\tthis._parentType,\r\n\t\t\t),\r\n\t\t\t(groupContainers) => {\r\n\t\t\t\tif (this.#containers) {\r\n\t\t\t\t\t// We want to remove properties of groups that does not exist anymore: [NL]\r\n\t\t\t\t\tconst goneGroupContainers = this.#containers.filter((x) => !groupContainers.some((y) => y.id === x.id));\r\n\t\t\t\t\tconst _propertyStructure = this.#propertyStructure\r\n\t\t\t\t\t\t.getValue()\r\n\t\t\t\t\t\t.filter((x) => !goneGroupContainers.some((y) => y.id === x.container?.id));\r\n\t\t\t\t\tthis.#propertyStructure.setValue(_propertyStructure);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.observe(\r\n\t\t\t\t\tmergeObservables(\r\n\t\t\t\t\t\tgroupContainers.map((group) => this.#structure!.propertyStructuresOf(group.id)),\r\n\t\t\t\t\t\t(sources) => {\r\n\t\t\t\t\t\t\treturn sources.flatMap((x) => x);\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t),\r\n\t\t\t\t\t(properties) => {\r\n\t\t\t\t\t\tthis.#propertyStructure.setValue(properties);\r\n\t\t\t\t\t},\r\n\t\t\t\t\t'observePropertyStructures',\r\n\t\t\t\t);\r\n\t\t\t\tthis.#containers = groupContainers;\r\n\t\t\t},\r\n\t\t\t'_observeContainers',\r\n\t\t);\r\n\t}\r\n\r\n\tasync isOwnerProperty(propertyId: UmbPropertyTypeId) {\r\n\t\tawait this.#init;\r\n\t\tif (!this.#structure) return;\r\n\r\n\t\treturn this.#structure.ownerContentTypeObservablePart((x) => x?.properties.some((y) => y.id === propertyId));\r\n\t}\r\n\r\n\tasync contentTypeOfProperty(propertyId: UmbPropertyTypeId) {\r\n\t\tawait this.#init;\r\n\t\tif (!this.#structure) return;\r\n\r\n\t\treturn this.#structure.contentTypeOfProperty(propertyId);\r\n\t}\r\n\r\n\t// TODO: consider moving this to another class, to separate 'viewer' from 'manipulator':\r\n\t/** Manipulate methods: */\r\n\r\n\tasync insertProperty(property: UmbPropertyTypeModel, sortOrder?: number) {\r\n\t\tawait this.#init;\r\n\t\tif (!this.#structure) return false;\r\n\r\n\t\tconst newProperty = { ...property };\r\n\t\tif (sortOrder) {\r\n\t\t\tnewProperty.sortOrder = sortOrder;\r\n\t\t}\r\n\r\n\t\tawait this.#structure.insertProperty(null, newProperty);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tasync removeProperty(propertyId: UmbPropertyTypeId) {\r\n\t\tawait this.#init;\r\n\t\tif (!this.#structure) return false;\r\n\r\n\t\tawait this.#structure.removeProperty(null, propertyId);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// Takes optional arguments as this is easier for the implementation in the view:\r\n\tasync partialUpdateProperty(propertyKey?: string, partialUpdate?: Partial<UmbPropertyTypeModel>) {\r\n\t\tawait this.#init;\r\n\t\tif (!this.#structure || !propertyKey || !partialUpdate) return;\r\n\t\treturn await this.#structure.updateProperty(null, propertyKey, partialUpdate);\r\n\t}\r\n}\r\n"],"names":["UMB_PROPERTY_TYPE_CONTEXT","UmbContextToken","UmbContentTypePropertyStructureHelper","UmbControllerBase","host","#propertyStructure","UmbArrayState","x","#init","resolve","#initResolver","a","b","#structure","#containerId","structure","#observeContainers","value","#containers","properties","container","parent","#observeSimilarContainers","groupContainers","goneGroupContainers","y","_propertyStructure","mergeObservables","group","sources","propertyId","property","sortOrder","newProperty","propertyKey","partialUpdate"],"mappings":"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"}