{"version":3,"file":"index.js","sources":["../../../../src/packages/core/content-type/repository/structure/content-type-structure-repository-base.ts","../../../../src/packages/core/content-type/repository/structure/content-type-structure-server-data-source-base.ts","../../../../src/packages/core/content-type/structure/content-type-structure-manager.class.ts","../../../../src/packages/core/content-type/workspace/content-type-workspace-context-base.ts"],"sourcesContent":["import type { UmbContentTypeStructureRepository } from './content-type-structure-repository.interface.js';\r\nimport type {\r\n\tUmbContentTypeStructureDataSource,\r\n\tUmbContentTypeStructureDataSourceConstructor,\r\n} from './content-type-structure-data-source.interface.js';\r\nimport { UmbRepositoryBase } from '@umbraco-cms/backoffice/repository';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\n\r\nexport abstract class UmbContentTypeStructureRepositoryBase<ItemType>\r\n\textends UmbRepositoryBase\r\n\timplements UmbContentTypeStructureRepository<ItemType>\r\n{\r\n\t#structureSource: UmbContentTypeStructureDataSource<ItemType>;\r\n\r\n\tconstructor(host: UmbControllerHost, structureSource: UmbContentTypeStructureDataSourceConstructor<ItemType>) {\r\n\t\tsuper(host);\r\n\t\tthis.#structureSource = new structureSource(host);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a promise with the allowed children of a content type\r\n\t * @param {string} unique\r\n\t * @returns {*}\r\n\t * @memberof UmbContentTypeStructureRepositoryBase\r\n\t */\r\n\trequestAllowedChildrenOf(unique: string | null) {\r\n\t\treturn this.#structureSource.getAllowedChildrenOf(unique);\r\n\t}\r\n}\r\n","import type { UmbPagedModel } from '../../../repository/types.js';\r\nimport type { UmbContentTypeStructureDataSource } from './content-type-structure-data-source.interface.js';\r\nimport type { UmbEntityModel } from '@umbraco-cms/backoffice/entity';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { tryExecuteAndNotify } from '@umbraco-cms/backoffice/resources';\r\n\r\n// Keep this type internal\r\ntype AllowedContentTypeBaseModel = {\r\n\tid: string;\r\n\tname: string;\r\n\tdescription?: string | null;\r\n\ticon?: string | null;\r\n};\r\n\r\nexport interface UmbContentTypeStructureServerDataSourceBaseArgs<\r\n\tServerItemType extends AllowedContentTypeBaseModel,\r\n\tClientItemType extends UmbEntityModel,\r\n> {\r\n\tgetAllowedChildrenOf: (unique: string | null) => Promise<UmbPagedModel<ServerItemType>>;\r\n\tmapper: (item: ServerItemType) => ClientItemType;\r\n}\r\n\r\nexport abstract class UmbContentTypeStructureServerDataSourceBase<\r\n\tServerItemType extends AllowedContentTypeBaseModel,\r\n\tClientItemType extends UmbEntityModel,\r\n> implements UmbContentTypeStructureDataSource<ClientItemType>\r\n{\r\n\t#host;\r\n\t#getAllowedChildrenOf;\r\n\t#mapper;\r\n\r\n\t/**\r\n\t * Creates an instance of UmbContentTypeStructureServerDataSourceBase.\r\n\t * @param {UmbControllerHost} host - The controller host for this controller to be appended to\r\n\t * @param args\r\n\t * @memberof UmbItemServerDataSourceBase\r\n\t */\r\n\tconstructor(\r\n\t\thost: UmbControllerHost,\r\n\t\targs: UmbContentTypeStructureServerDataSourceBaseArgs<ServerItemType, ClientItemType>,\r\n\t) {\r\n\t\tthis.#host = host;\r\n\t\tthis.#getAllowedChildrenOf = args.getAllowedChildrenOf;\r\n\t\tthis.#mapper = args.mapper;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a promise with the allowed content types for the given unique\r\n\t * @param {string} unique\r\n\t * @returns {*}\r\n\t * @memberof UmbContentTypeStructureServerDataSourceBase\r\n\t */\r\n\tasync getAllowedChildrenOf(unique: string | null) {\r\n\t\tconst { data, error } = await tryExecuteAndNotify(this.#host, this.#getAllowedChildrenOf(unique));\r\n\r\n\t\tif (data) {\r\n\t\t\tconst items = data.items.map((item) => this.#mapper(item));\r\n\t\t\treturn { data: { items, total: data.total } };\r\n\t\t}\r\n\r\n\t\treturn { error };\r\n\t}\r\n}\r\n","import type {\r\n\tUmbContentTypeModel,\r\n\tUmbPropertyContainerTypes,\r\n\tUmbPropertyTypeContainerModel,\r\n\tUmbPropertyTypeModel,\r\n} from '../types.js';\r\nimport type { UmbDetailRepository, UmbRepositoryResponse } from '@umbraco-cms/backoffice/repository';\r\nimport { UmbId } from '@umbraco-cms/backoffice/id';\r\nimport type { UmbControllerHost, UmbController } from '@umbraco-cms/backoffice/controller-api';\r\nimport type { MappingFunction } from '@umbraco-cms/backoffice/observable-api';\r\nimport {\r\n\tUmbArrayState,\r\n\tpartialUpdateFrozenArray,\r\n\tappendToFrozenArray,\r\n\tfilterFrozenArray,\r\n\tcreateObservablePart,\r\n} from '@umbraco-cms/backoffice/observable-api';\r\nimport { incrementString } from '@umbraco-cms/backoffice/utils';\r\nimport { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\nimport { UmbExtensionApiInitializer } from '@umbraco-cms/backoffice/extension-api';\r\nimport { umbExtensionsRegistry, type ManifestRepository } from '@umbraco-cms/backoffice/extension-registry';\r\n\r\ntype UmbPropertyTypeId = UmbPropertyTypeModel['id'];\r\n\r\nconst UmbFilterDuplicateStrings = (value: string, index: number, array: Array<string>) =>\r\n\tarray.indexOf(value) === index;\r\n\r\n/**\r\n * Manages a structure of a Content Type and its properties and containers.\r\n * This loads and merges the structures of the Content Type and its inherited and composed Content Types.\r\n * To help manage the data, there is two helper classes:\r\n * - {@link UmbContentTypePropertyStructureHelper} for managing the structure of properties, optional of another container or root.\r\n * - {@link UmbContentTypeContainerStructureHelper} for managing the structure of containers, optional of another container or root.\r\n */\r\nexport class UmbContentTypeStructureManager<\r\n\tT extends UmbContentTypeModel = UmbContentTypeModel,\r\n> extends UmbControllerBase {\r\n\t#initResolver?: (respoonse: UmbRepositoryResponse<T>) => void;\r\n\t#init = new Promise<UmbRepositoryResponse<T>>((resolve) => {\r\n\t\tthis.#initResolver = resolve;\r\n\t});\r\n\r\n\t#repository?: UmbDetailRepository<T>;\r\n\t#initRepositoryResolver?: () => void;\r\n\r\n\t#initRepository = new Promise<void>((resolve) => {\r\n\t\tif (this.#repository) {\r\n\t\t\tresolve();\r\n\t\t} else {\r\n\t\t\tthis.#initRepositoryResolver = resolve;\r\n\t\t}\r\n\t});\r\n\r\n\tasync whenLoaded() {\r\n\t\tawait this.#init;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t#ownerContentTypeUnique?: string;\r\n\t#contentTypeObservers = new Array<UmbController>();\r\n\r\n\t#contentTypes = new UmbArrayState<T>([], (x) => x.unique);\r\n\treadonly contentTypes = this.#contentTypes.asObservable();\r\n\treadonly ownerContentType = this.#contentTypes.asObservablePart((x) =>\r\n\t\tx.find((y) => y.unique === this.#ownerContentTypeUnique),\r\n\t);\r\n\treadonly ownerContentTypeAlias = createObservablePart(this.ownerContentType, (x) => x?.alias);\r\n\treadonly ownerContentTypeName = createObservablePart(this.ownerContentType, (x) => x?.name);\r\n\treadonly ownerContentTypeCompositions = createObservablePart(this.ownerContentType, (x) => x?.compositions);\r\n\r\n\treadonly #contentTypeContainers = this.#contentTypes.asObservablePart((contentTypes) => {\r\n\t\t// Notice this may need to use getValue to avoid resetting it self. [NL]\r\n\t\treturn contentTypes.flatMap((x) => x.containers ?? []);\r\n\t});\r\n\treadonly contentTypeProperties = this.#contentTypes.asObservablePart((contentTypes) => {\r\n\t\t// Notice this may need to use getValue to avoid resetting it self. [NL]\r\n\t\treturn contentTypes.flatMap((x) => x.properties ?? []);\r\n\t});\r\n\tasync getContentTypeProperties() {\r\n\t\treturn await this.observe(this.contentTypeProperties).asPromise();\r\n\t}\r\n\treadonly contentTypeDataTypeUniques = this.#contentTypes.asObservablePart((contentTypes) => {\r\n\t\t// Notice this may need to use getValue to avoid resetting it self. [NL]\r\n\t\treturn contentTypes\r\n\t\t\t.flatMap((x) => x.properties?.map((p) => p.dataType.unique) ?? [])\r\n\t\t\t.filter(UmbFilterDuplicateStrings);\r\n\t});\r\n\treadonly contentTypeHasProperties = this.#contentTypes.asObservablePart((contentTypes) => {\r\n\t\t// Notice this may need to use getValue to avoid resetting it self. [NL]\r\n\t\treturn contentTypes.some((x) => x.properties.length > 0);\r\n\t});\r\n\treadonly contentTypePropertyAliases = createObservablePart(this.contentTypeProperties, (properties) =>\r\n\t\tproperties.map((x) => x.alias),\r\n\t);\r\n\treadonly contentTypeUniques = this.#contentTypes.asObservablePart((x) => x.map((y) => y.unique));\r\n\treadonly contentTypeAliases = this.#contentTypes.asObservablePart((x) => x.map((y) => y.alias));\r\n\r\n\treadonly variesByCulture = createObservablePart(this.ownerContentType, (x) => x?.variesByCulture);\r\n\treadonly variesBySegment = createObservablePart(this.ownerContentType, (x) => x?.variesBySegment);\r\n\r\n\t#containers: UmbArrayState<UmbPropertyTypeContainerModel> = new UmbArrayState<UmbPropertyTypeContainerModel>(\r\n\t\t[],\r\n\t\t(x) => x.id,\r\n\t);\r\n\tcontainerById(id: string) {\r\n\t\treturn this.#containers.asObservablePart((x) => x.find((y) => y.id === id));\r\n\t}\r\n\r\n\tconstructor(host: UmbControllerHost, typeRepository: UmbDetailRepository<T> | string) {\r\n\t\tsuper(host);\r\n\r\n\t\tif (typeof typeRepository === 'string') {\r\n\t\t\tthis.#observeRepository(typeRepository);\r\n\t\t} else {\r\n\t\t\tthis.#repository = typeRepository;\r\n\t\t\tthis.#initRepositoryResolver?.();\r\n\t\t}\r\n\r\n\t\t// Observe owner content type compositions, as we only allow one level of compositions at this moment. [NL]\r\n\t\t// But, we could support more, we would just need to flatMap all compositions and make sure the entries are unique and then base the observation on that. [NL]\r\n\t\tthis.observe(this.ownerContentTypeCompositions, (ownerContentTypeCompositions) => {\r\n\t\t\tthis.#loadContentTypeCompositions(ownerContentTypeCompositions);\r\n\t\t});\r\n\t\tthis.observe(this.#contentTypeContainers, (contentTypeContainers) => {\r\n\t\t\tthis.#containers.setValue(contentTypeContainers);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * loadType will load the ContentType and all inherited and composed ContentTypes.\r\n\t * This will give us all the structure for properties and containers.\r\n\t * @param {string} unique - The unique of the ContentType to load.\r\n\t * @returns {Promise} - Promise resolved\r\n\t */\r\n\tpublic async loadType(unique?: string) {\r\n\t\tif (this.#ownerContentTypeUnique === unique) {\r\n\t\t\t// Its the same, but we do not know if its done loading jet, so we will wait for the load promise to finish. [NL]\r\n\t\t\tawait this.#init;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.#clear();\r\n\t\tthis.#ownerContentTypeUnique = unique;\r\n\t\tif (!unique) return;\r\n\t\tconst result = await this.#loadType(unique);\r\n\t\tthis.#initResolver?.(result);\r\n\t\treturn result;\r\n\t}\r\n\r\n\tpublic async createScaffold(preset?: Partial<T>) {\r\n\t\tawait this.#initRepository;\r\n\t\tthis.#clear();\r\n\r\n\t\tconst repsonse = await this.#repository!.createScaffold(preset);\r\n\t\tif (!repsonse.data) return {};\r\n\r\n\t\tthis.#ownerContentTypeUnique = repsonse.data.unique;\r\n\r\n\t\t// Add the new content type to the list of content types, this holds our draft state of this scaffold.\r\n\t\tthis.#contentTypes.appendOne(repsonse.data);\r\n\t\tthis.#initResolver?.(repsonse);\r\n\t\treturn repsonse;\r\n\t}\r\n\r\n\t/**\r\n\t * Save the owner content type. Notice this is for a Content Type that is already stored on the server.\r\n\t * @returns {Promise} - A promise that will be resolved when the content type is saved.\r\n\t */\r\n\tpublic async save() {\r\n\t\tawait this.#initRepository;\r\n\t\tconst contentType = this.getOwnerContentType();\r\n\t\tif (!contentType || !contentType.unique) throw new Error('Could not find the Content Type to save');\r\n\r\n\t\tconst { error, data } = await this.#repository!.save(contentType);\r\n\t\tif (error || !data) {\r\n\t\t\tthrow error?.message ?? 'Repository did not return data after save.';\r\n\t\t}\r\n\r\n\t\t// Update state with latest version:\r\n\t\tthis.#contentTypes.updateOne(contentType.unique, data);\r\n\r\n\t\treturn data;\r\n\t}\r\n\r\n\t/**\r\n\t * Create the owner content type. Notice this is for a Content Type that is NOT already stored on the server.\r\n\t * @param {string | null} parentUnique - The unique of the parent content type\r\n\t * @returns {Promise} - a promise that is resolved when the content type has been created.\r\n\t */\r\n\tpublic async create(parentUnique: string | null) {\r\n\t\tawait this.#initRepository;\r\n\t\tconst contentType = this.getOwnerContentType();\r\n\t\tif (!contentType || !contentType.unique) {\r\n\t\t\tthrow new Error('Could not find the Content Type to create');\r\n\t\t}\r\n\r\n\t\tconst { data } = await this.#repository!.create(contentType, parentUnique);\r\n\t\tif (!data) return Promise.reject();\r\n\r\n\t\t// Update state with latest version:\r\n\t\tthis.#contentTypes.updateOne(contentType.unique, data);\r\n\r\n\t\t// Start observe the new content type in the store, as we did not do that when it was a scaffold/local-version.\r\n\t\tthis.#observeContentType(data);\r\n\t}\r\n\r\n\tasync #loadContentTypeCompositions(ownerContentTypeCompositions: T['compositions'] | undefined) {\r\n\t\tif (!ownerContentTypeCompositions) {\r\n\t\t\t// Owner content type was undefined, so we cannot load compositions.\r\n\t\t\t// But to clean up existing compositions, we set the array to empty to still be able to execute the clean-up code.\r\n\t\t\townerContentTypeCompositions = [];\r\n\t\t}\r\n\r\n\t\tconst ownerUnique = this.getOwnerContentTypeUnique();\r\n\t\t// Remove content types that does not exist as compositions anymore:\r\n\t\tthis.#contentTypes.getValue().forEach((x) => {\r\n\t\t\tif (\r\n\t\t\t\tx.unique !== ownerUnique &&\r\n\t\t\t\t!ownerContentTypeCompositions.find((comp) => comp.contentType.unique === x.unique)\r\n\t\t\t) {\r\n\t\t\t\tthis.#contentTypeObservers.find((y) => y.controllerAlias === 'observeContentType_' + x.unique)?.destroy();\r\n\t\t\t\tthis.#contentTypes.removeOne(x.unique);\r\n\t\t\t}\r\n\t\t});\r\n\t\townerContentTypeCompositions.forEach((composition) => {\r\n\t\t\tthis.#ensureType(composition.contentType.unique);\r\n\t\t});\r\n\t}\r\n\r\n\tasync #ensureType(unique?: string) {\r\n\t\tif (!unique) return;\r\n\t\tif (this.#contentTypes.getValue().find((x) => x.unique === unique)) return;\r\n\t\tawait this.#loadType(unique);\r\n\t}\r\n\r\n\tasync #loadType(unique?: string) {\r\n\t\tif (!unique) return {};\r\n\t\tawait this.#initRepository;\r\n\r\n\t\t// Lets initiate the content type:\r\n\t\tconst { data, asObservable } = await this.#repository!.requestByUnique(unique);\r\n\t\tif (!data) return {};\r\n\r\n\t\tawait this.#observeContentType(data);\r\n\t\treturn { data, asObservable };\r\n\t}\r\n\r\n\tasync #observeContentType(data: T) {\r\n\t\tif (!data.unique) return;\r\n\t\tawait this.#initRepository;\r\n\r\n\t\t// Notice we do not store the content type in the store here, cause it will happen shortly after when the observations gets its first initial callback. [NL]\r\n\r\n\t\tconst ctrl = this.observe(\r\n\t\t\t// Then lets start observation of the content type:\r\n\t\t\tawait this.#repository!.byUnique(data.unique),\r\n\t\t\t(docType) => {\r\n\t\t\t\tif (docType) {\r\n\t\t\t\t\tthis.#contentTypes.appendOne(docType);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Remove the content type from the store, if it does not exist anymore.\r\n\t\t\t\t\tthis.#contentTypes.removeOne(data.unique);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'observeContentType_' + data.unique,\r\n\t\t\t// Controller Alias is used to stop observation when no longer needed. [NL]\r\n\t\t);\r\n\r\n\t\tthis.#contentTypeObservers.push(ctrl);\r\n\t}\r\n\r\n\t/** Public methods for consuming structure: */\r\n\r\n\townerContentTypeObservablePart<R>(mappingFunction: MappingFunction<T | undefined, R>) {\r\n\t\treturn createObservablePart(this.ownerContentType, mappingFunction);\r\n\t}\r\n\r\n\tgetOwnerContentType() {\r\n\t\treturn this.#contentTypes.getValue().find((y) => y.unique === this.#ownerContentTypeUnique);\r\n\t}\r\n\r\n\tgetOwnerContentTypeUnique() {\r\n\t\treturn this.#ownerContentTypeUnique;\r\n\t}\r\n\r\n\tgetVariesByCulture() {\r\n\t\tconst ownerContentType = this.getOwnerContentType();\r\n\t\treturn ownerContentType?.variesByCulture;\r\n\t}\r\n\tgetVariesBySegment() {\r\n\t\tconst ownerContentType = this.getOwnerContentType();\r\n\t\treturn ownerContentType?.variesBySegment;\r\n\t}\r\n\r\n\t/**\r\n\t * Figure out if any of the Content Types has a Property.\r\n\t * @returns {boolean} - true if any of the Content Type in this composition has a Property.\r\n\t */\r\n\tgetHasProperties() {\r\n\t\treturn this.#contentTypes.getValue().some((y) => y.properties.length > 0);\r\n\t}\r\n\r\n\tupdateOwnerContentType(entry: Partial<T>) {\r\n\t\tthis.#contentTypes.updateOne(this.#ownerContentTypeUnique, entry);\r\n\t}\r\n\r\n\tgetContentTypes() {\r\n\t\treturn this.#contentTypes.getValue();\r\n\t}\r\n\tgetContentTypeUniques() {\r\n\t\treturn this.#contentTypes.getValue().map((x) => x.unique);\r\n\t}\r\n\tgetContentTypeAliases() {\r\n\t\treturn this.#contentTypes.getValue().map((x) => x.alias);\r\n\t}\r\n\r\n\t// TODO: We could move the actions to another class?\r\n\r\n\t/**\r\n\t * Ensure a container exists for a specific Content Type. Otherwise clone it.\r\n\t * @param {string} containerId - The container to ensure exists on the given ContentType.\r\n\t * @param {string} contentTypeUnique - The content type to ensure the container for.\r\n\t * @returns {Promise<UmbPropertyTypeContainerModel | undefined>} - The container found or created for the owner ContentType.\r\n\t */\r\n\tasync ensureContainerOf(\r\n\t\tcontainerId: string,\r\n\t\tcontentTypeUnique: string,\r\n\t): Promise<UmbPropertyTypeContainerModel | undefined> {\r\n\t\tawait this.#init;\r\n\t\tconst contentType = this.#contentTypes.getValue().find((x) => x.unique === contentTypeUnique);\r\n\t\tif (!contentType) {\r\n\t\t\tthrow new Error('Could not find the Content Type to ensure containers for');\r\n\t\t}\r\n\t\tconst container = contentType?.containers?.find((x) => x.id === containerId);\r\n\t\tif (!container) {\r\n\t\t\treturn this.cloneContainerTo(containerId, contentTypeUnique);\r\n\t\t}\r\n\t\treturn container;\r\n\t}\r\n\r\n\t/**\r\n\t * Clone a container to a specific Content Type.\r\n\t * @param {string} containerId - The container to clone, assuming it does not already exist on the given Content Type.\r\n\t * @param {string} toContentTypeUnique - The content type to clone to.\r\n\t * @returns {Promise<UmbPropertyTypeContainerModel | undefined>} - The container cloned or found for the owner ContentType.\r\n\t */\r\n\tasync cloneContainerTo(\r\n\t\tcontainerId: string,\r\n\t\ttoContentTypeUnique?: string,\r\n\t): Promise<UmbPropertyTypeContainerModel | undefined> {\r\n\t\tawait this.#init;\r\n\t\ttoContentTypeUnique = toContentTypeUnique ?? this.#ownerContentTypeUnique!;\r\n\r\n\t\t// Find container.\r\n\t\tconst container = this.#containers.getValue().find((x) => x.id === containerId);\r\n\t\tif (!container) throw new Error('Container to clone was not found');\r\n\r\n\t\tconst clonedContainer: UmbPropertyTypeContainerModel = {\r\n\t\t\t...container,\r\n\t\t\tid: UmbId.new(),\r\n\t\t};\r\n\r\n\t\tif (container.parent) {\r\n\t\t\t// Investigate parent container. (See if we have one that matches if not, then clone it.)\r\n\t\t\tconst parentContainer = await this.ensureContainerOf(container.parent.id, toContentTypeUnique);\r\n\t\t\tif (!parentContainer) {\r\n\t\t\t\tthrow new Error('Parent container for cloning could not be found or created');\r\n\t\t\t}\r\n\t\t\t// Clone container.\r\n\t\t\tclonedContainer.parent = { id: parentContainer.id };\r\n\t\t}\r\n\t\t// Spread containers, so we can append to it, and then update the specific content-type with the new set of containers: [NL]\r\n\t\t// Correction the spread is removed now, cause we do a filter: [NL]\r\n\t\t// And then we remove the existing one, to have the more local one replacing it. [NL]\r\n\t\tconst containers = [\r\n\t\t\t...(this.#contentTypes.getValue().find((x) => x.unique === toContentTypeUnique)?.containers ?? []),\r\n\t\t];\r\n\r\n\t\tcontainers.push(clonedContainer);\r\n\r\n\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n\t\t// @ts-ignore\r\n\t\t// TODO: fix TS partial complaint [NL]\r\n\t\tthis.#contentTypes.updateOne(toContentTypeUnique, { containers });\r\n\r\n\t\treturn clonedContainer;\r\n\t}\r\n\r\n\tensureContainerNames(\r\n\t\tcontentTypeUnique: string | null,\r\n\t\ttype: UmbPropertyContainerTypes,\r\n\t\tparentId: string | null = null,\r\n\t) {\r\n\t\tcontentTypeUnique = contentTypeUnique ?? this.#ownerContentTypeUnique!;\r\n\t\tthis.getOwnerContainers(type, parentId)?.forEach((container) => {\r\n\t\t\tif (container.name === '') {\r\n\t\t\t\tconst newName = 'Unnamed';\r\n\t\t\t\tthis.updateContainer(null, container.id, {\r\n\t\t\t\t\tname: this.makeContainerNameUniqueForOwnerContentType(container.id, newName, type, parentId) ?? newName,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tasync createContainer(\r\n\t\tcontentTypeUnique: string | null,\r\n\t\tparentId: string | null = null,\r\n\t\ttype: UmbPropertyContainerTypes = 'Group',\r\n\t\tsortOrder?: number,\r\n\t): Promise<UmbPropertyTypeContainerModel> {\r\n\t\tawait this.#init;\r\n\t\tcontentTypeUnique = contentTypeUnique ?? this.#ownerContentTypeUnique!;\r\n\r\n\t\tif (parentId) {\r\n\t\t\tconst duplicatedParentContainer = await this.ensureContainerOf(parentId, contentTypeUnique);\r\n\t\t\tif (!duplicatedParentContainer) {\r\n\t\t\t\tthrow new Error('Parent container for creating a new container could not be found or created');\r\n\t\t\t}\r\n\t\t\tparentId = duplicatedParentContainer.id;\r\n\t\t}\r\n\r\n\t\tconst container: UmbPropertyTypeContainerModel = {\r\n\t\t\tid: UmbId.new(),\r\n\t\t\tparent: parentId ? { id: parentId } : null,\r\n\t\t\tname: '',\r\n\t\t\ttype: type,\r\n\t\t\tsortOrder: sortOrder ?? 0,\r\n\t\t};\r\n\r\n\t\t// Ensure\r\n\t\tthis.ensureContainerNames(contentTypeUnique, type, parentId);\r\n\r\n\t\tconst contentTypes = this.#contentTypes.getValue();\r\n\t\tconst containers = [...(contentTypes.find((x) => x.unique === contentTypeUnique)?.containers ?? [])];\r\n\t\tcontainers.push(container);\r\n\r\n\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n\t\t// @ts-ignore\r\n\t\t// TODO: fix TS partial complaint\r\n\t\tthis.#contentTypes.updateOne(contentTypeUnique, { containers });\r\n\r\n\t\treturn container;\r\n\t}\r\n\r\n\t/*async insertContainer(contentTypeUnique: string | null, container: UmbPropertyTypeContainerModel) {\r\n\t\tawait this.#init;\r\n\t\tcontentTypeUnique = contentTypeUnique ?? this.#ownerContentTypeUnique!;\r\n\r\n\t\t// If we have a parent, we need to ensure it exists, and then update the parent property with the new container id.\r\n\t\tif (container.parent) {\r\n\t\t\tconst parentContainer = await this.ensureContainerOf(container.parent.id, contentTypeUnique);\r\n\t\t\tif (!parentContainer) {\r\n\t\t\t\tthrow new Error('Container for inserting property could not be found or created');\r\n\t\t\t}\r\n\t\t\tcontainer.parent.id = parentContainer.id;\r\n\t\t}\r\n\r\n\t\tconst frozenContainers =\r\n\t\t\tthis.#contentTypes.getValue().find((x) => x.unique === contentTypeUnique)?.containers ?? [];\r\n\r\n\t\tconst containers = appendToFrozenArray(frozenContainers, container, (x) => x.id === container.id);\r\n\r\n\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n\t\t// @ts-ignore\r\n\t\t// TODO: fix TS partial complaint\r\n\t\tthis.#contentTypes.updateOne(contentTypeUnique, { containers });\r\n\t}*/\r\n\r\n\tmakeEmptyContainerName(\r\n\t\tcontainerId: string,\r\n\t\tcontainerType: UmbPropertyContainerTypes,\r\n\t\tparentId: string | null = null,\r\n\t): string {\r\n\t\treturn (\r\n\t\t\tthis.makeContainerNameUniqueForOwnerContentType(containerId, 'Unnamed', containerType, parentId) ?? 'Unnamed'\r\n\t\t);\r\n\t}\r\n\tmakeContainerNameUniqueForOwnerContentType(\r\n\t\tcontainerId: string,\r\n\t\tnewName: string,\r\n\t\tcontainerType: UmbPropertyContainerTypes,\r\n\t\tparentId: string | null = null,\r\n\t) {\r\n\t\tconst ownerRootContainers = this.getOwnerContainers(containerType, parentId); //getRootContainers() can't differentiates between compositions and locals\r\n\t\tif (!ownerRootContainers) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tlet changedName = newName;\r\n\t\twhile (ownerRootContainers.find((con) => con.name === changedName && con.id !== containerId)) {\r\n\t\t\tchangedName = incrementString(changedName);\r\n\t\t}\r\n\r\n\t\treturn changedName === newName ? null : changedName;\r\n\t}\r\n\r\n\tasync updateContainer(\r\n\t\tcontentTypeUnique: string | null,\r\n\t\tcontainerId: string,\r\n\t\tpartialUpdate: Partial<UmbPropertyTypeContainerModel>,\r\n\t) {\r\n\t\tawait this.#init;\r\n\t\tcontentTypeUnique = contentTypeUnique ?? this.#ownerContentTypeUnique!;\r\n\r\n\t\t/*\r\n\t\t// If we have a container, we need to ensure it exists, and then update the container with the new parent id.\r\n\t\tif (containerId) {\r\n\t\t\tconst container = await this.ensureContainerOf(containerId, contentTypeUnique);\r\n\t\t\tif (!container) {\r\n\t\t\t\tthrow new Error('Container for inserting property could not be found or created');\r\n\t\t\t}\r\n\t\t\t// Correct containerId to the local one: [NL]\r\n\t\t\tcontainerId = container.id;\r\n\t\t}\r\n\t\t*/\r\n\r\n\t\tconst frozenContainers =\r\n\t\t\tthis.#contentTypes.getValue().find((x) => x.unique === contentTypeUnique)?.containers ?? [];\r\n\r\n\t\tconst ownerContainer = frozenContainers.find((x) => x.id === containerId);\r\n\t\tif (!ownerContainer) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t'We do not have this container on the requested id, we should clone the container and append the change to it. [NL]',\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tconst containers = partialUpdateFrozenArray(frozenContainers, partialUpdate, (x) => x.id === containerId);\r\n\r\n\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n\t\t// @ts-ignore\r\n\t\t// TODO: fix TS partial complaint\r\n\t\tthis.#contentTypes.updateOne(contentTypeUnique, { containers });\r\n\t}\r\n\r\n\tasync removeContainer(contentTypeUnique: string | null, containerId: string | null = null) {\r\n\t\tawait this.#init;\r\n\t\tcontentTypeUnique = contentTypeUnique ?? this.#ownerContentTypeUnique!;\r\n\r\n\t\tconst contentType = this.#contentTypes.getValue().find((x) => x.unique === contentTypeUnique);\r\n\t\tif (!contentType) {\r\n\t\t\tthrow new Error('Could not find the Content Type to remove container from');\r\n\t\t}\r\n\t\tconst frozenContainers = contentType.containers ?? [];\r\n\t\tconst removedContainerIds = frozenContainers\r\n\t\t\t.filter((x) => x.id === containerId || x.parent?.id === containerId)\r\n\t\t\t.map((x) => x.id);\r\n\t\tconst containers = frozenContainers.filter((x) => x.id !== containerId && x.parent?.id !== containerId);\r\n\r\n\t\tconst frozenProperties = contentType.properties;\r\n\t\tconst properties = frozenProperties.filter((x) =>\r\n\t\t\tx.container ? !removedContainerIds.some((ids) => ids === x.container?.id) : true,\r\n\t\t);\r\n\r\n\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n\t\t// @ts-ignore\r\n\t\t// TODO: fix TS partial complaint\r\n\t\tthis.#contentTypes.updateOne(contentTypeUnique, { containers, properties });\r\n\t}\r\n\r\n\tasync insertProperty(contentTypeUnique: string | null, property: UmbPropertyTypeModel) {\r\n\t\tawait this.#init;\r\n\t\tcontentTypeUnique = contentTypeUnique ?? this.#ownerContentTypeUnique!;\r\n\r\n\t\t// If we have a container, we need to ensure it exists, and then update the container with the new parent id. [NL]\r\n\t\tif (property.container) {\r\n\t\t\tthis.#contentTypes.mute();\r\n\t\t\tconst container = await this.ensureContainerOf(property.container.id, contentTypeUnique);\r\n\t\t\tthis.#contentTypes.unmute();\r\n\t\t\tif (!container) {\r\n\t\t\t\tthrow new Error('Container for inserting property could not be found or created');\r\n\t\t\t}\r\n\t\t\t// Unfreeze object, while settings container.id\r\n\t\t\tproperty = { ...property, container: { id: container.id } };\r\n\t\t}\r\n\r\n\t\tif (property.sortOrder === undefined) {\r\n\t\t\tproperty.sortOrder = 0;\r\n\t\t}\r\n\r\n\t\tconst frozenProperties =\r\n\t\t\tthis.#contentTypes.getValue().find((x) => x.unique === contentTypeUnique)?.properties ?? [];\r\n\r\n\t\tconst properties = appendToFrozenArray(frozenProperties, property, (x) => x.id === property.id);\r\n\r\n\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n\t\t// @ts-ignore\r\n\t\t// TODO: fix TS partial complaint\r\n\t\tthis.#contentTypes.updateOne(contentTypeUnique, { properties });\r\n\t}\r\n\r\n\tasync removeProperty(contentTypeUnique: string | null, propertyId: string) {\r\n\t\tawait this.#init;\r\n\t\tcontentTypeUnique = contentTypeUnique ?? this.#ownerContentTypeUnique!;\r\n\r\n\t\tconst frozenProperties =\r\n\t\t\tthis.#contentTypes.getValue().find((x) => x.unique === contentTypeUnique)?.properties ?? [];\r\n\r\n\t\tconst properties = filterFrozenArray(frozenProperties, (x) => x.id !== propertyId);\r\n\r\n\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n\t\t// @ts-ignore\r\n\t\t// TODO: fix TS partial complaint\r\n\t\tthis.#contentTypes.updateOne(contentTypeUnique, { properties });\r\n\t}\r\n\r\n\tasync updateProperty(\r\n\t\tcontentTypeUnique: string | null,\r\n\t\tpropertyId: string,\r\n\t\tpartialUpdate: Partial<UmbPropertyTypeModel>,\r\n\t) {\r\n\t\tawait this.#init;\r\n\t\tcontentTypeUnique = contentTypeUnique ?? this.#ownerContentTypeUnique!;\r\n\r\n\t\tconst frozenProperties =\r\n\t\t\tthis.#contentTypes.getValue().find((x) => x.unique === contentTypeUnique)?.properties ?? [];\r\n\t\tconst properties = partialUpdateFrozenArray(frozenProperties, partialUpdate, (x) => x.id === propertyId);\r\n\r\n\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n\t\t// @ts-ignore\r\n\t\t// TODO: fix TS partial complaint\r\n\t\tthis.#contentTypes.updateOne(contentTypeUnique, { properties });\r\n\t}\r\n\r\n\t// TODO: Refactor: These property methods, should maybe be named without structure in their name.\r\n\tasync propertyStructureById(propertyId: string) {\r\n\t\tawait this.#init;\r\n\t\treturn this.#contentTypes.asObservablePart((docTypes) => {\r\n\t\t\tfor (const docType of docTypes) {\r\n\t\t\t\tconst foundProp = docType.properties?.find((property) => property.id === propertyId);\r\n\t\t\t\tif (foundProp) {\r\n\t\t\t\t\treturn foundProp;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn undefined;\r\n\t\t});\r\n\t}\r\n\tasync propertyStructureByAlias(propertyAlias: string) {\r\n\t\tawait this.#init;\r\n\t\treturn this.#contentTypes.asObservablePart((docTypes) => {\r\n\t\t\tfor (const docType of docTypes) {\r\n\t\t\t\tconst foundProp = docType.properties?.find((property) => property.alias === propertyAlias);\r\n\t\t\t\tif (foundProp) {\r\n\t\t\t\t\treturn foundProp;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn undefined;\r\n\t\t});\r\n\t}\r\n\r\n\tasync getPropertyStructureById(propertyId: string) {\r\n\t\tawait this.#init;\r\n\t\tfor (const docType of this.#contentTypes.getValue()) {\r\n\t\t\tconst foundProp = docType.properties?.find((property) => property.id === propertyId);\r\n\t\t\tif (foundProp) {\r\n\t\t\t\treturn foundProp;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\tasync getPropertyStructureByAlias(propertyAlias: string) {\r\n\t\tawait this.#init;\r\n\t\tfor (const docType of this.#contentTypes.getValue()) {\r\n\t\t\tconst foundProp = docType.properties?.find((property) => property.alias === propertyAlias);\r\n\t\t\tif (foundProp) {\r\n\t\t\t\treturn foundProp;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\thasPropertyStructuresOf(containerId: string | null) {\r\n\t\treturn this.#contentTypes.asObservablePart((docTypes) => {\r\n\t\t\treturn (\r\n\t\t\t\tdocTypes.find((docType) => {\r\n\t\t\t\t\treturn docType.properties?.find((property) => property.container?.id === containerId);\r\n\t\t\t\t}) !== undefined\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\trootPropertyStructures() {\r\n\t\treturn this.propertyStructuresOf(null);\r\n\t}\r\n\r\n\tpropertyStructuresOf(containerId: string | null) {\r\n\t\treturn this.#contentTypes.asObservablePart((docTypes) => {\r\n\t\t\tconst props: UmbPropertyTypeModel[] = [];\r\n\t\t\tdocTypes.forEach((docType) => {\r\n\t\t\t\tdocType.properties?.forEach((property) => {\r\n\t\t\t\t\tif (property.container?.id === containerId) {\r\n\t\t\t\t\t\tprops.push(property);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\treturn props;\r\n\t\t});\r\n\t}\r\n\r\n\trootContainers(containerType: UmbPropertyContainerTypes) {\r\n\t\treturn this.#containers.asObservablePart((data) => {\r\n\t\t\treturn data.filter((x) => x.parent === null && x.type === containerType);\r\n\t\t});\r\n\t}\r\n\r\n\tgetRootContainers(containerType: UmbPropertyContainerTypes) {\r\n\t\treturn this.#containers.getValue().filter((x) => x.parent === null && x.type === containerType);\r\n\t}\r\n\r\n\tasync hasRootContainers(containerType: UmbPropertyContainerTypes) {\r\n\t\treturn this.#containers.asObservablePart((data) => {\r\n\t\t\treturn data.filter((x) => x.parent === null && x.type === containerType).length > 0;\r\n\t\t});\r\n\t}\r\n\r\n\townerContainersOf(containerType: UmbPropertyContainerTypes, parentId: string | null) {\r\n\t\treturn this.ownerContentTypeObservablePart(\r\n\t\t\t(x) =>\r\n\t\t\t\tx?.containers?.filter(\r\n\t\t\t\t\t(x) => (parentId ? x.parent?.id === parentId : x.parent === null) && x.type === containerType,\r\n\t\t\t\t) ?? [],\r\n\t\t);\r\n\t}\r\n\r\n\tgetOwnerContainers(containerType: UmbPropertyContainerTypes, parentId: string | null) {\r\n\t\treturn this.getOwnerContentType()?.containers?.filter(\r\n\t\t\t(x) => (parentId ? x.parent?.id === parentId : x.parent === null) && x.type === containerType,\r\n\t\t);\r\n\t}\r\n\r\n\tisOwnerContainer(containerId: string) {\r\n\t\treturn this.getOwnerContentType()?.containers?.filter((x) => x.id === containerId);\r\n\t}\r\n\r\n\tcontainersOfParentId(parentId: string, containerType: UmbPropertyContainerTypes) {\r\n\t\treturn this.#containers.asObservablePart((data) => {\r\n\t\t\treturn data.filter((x) => x.parent?.id === parentId && x.type === containerType);\r\n\t\t});\r\n\t}\r\n\r\n\t// In future this might need to take parentName(parentId lookup) into account as well? otherwise containers that share same name and type will always be merged, but their position might be different and they should not be merged. [NL]\r\n\tcontainersByNameAndType(name: string, containerType: UmbPropertyContainerTypes) {\r\n\t\treturn this.#containers.asObservablePart((data) => {\r\n\t\t\treturn data.filter((x) => x.name === name && x.type === containerType);\r\n\t\t});\r\n\t}\r\n\r\n\tcontainersByNameAndTypeAndParent(\r\n\t\tname: string,\r\n\t\tcontainerType: UmbPropertyContainerTypes,\r\n\t\tparentName: string | null,\r\n\t\tparentType?: UmbPropertyContainerTypes,\r\n\t) {\r\n\t\treturn this.#containers.asObservablePart((data) => {\r\n\t\t\treturn data.filter(\r\n\t\t\t\t(x) =>\r\n\t\t\t\t\t// Match name and type:\r\n\t\t\t\t\tx.name === name &&\r\n\t\t\t\t\tx.type === containerType &&\r\n\t\t\t\t\t// If we look for a parent name, then we need to match that as well:\r\n\t\t\t\t\t(parentName !== null\r\n\t\t\t\t\t\t? // And we have a parent on this container, then we need to match the parent name and type as well\r\n\t\t\t\t\t\t\tx.parent\r\n\t\t\t\t\t\t\t? data.some((y) => x.parent!.id === y.id && y.name === parentName && y.type === parentType)\r\n\t\t\t\t\t\t\t: false\r\n\t\t\t\t\t\t: // if we do not have a parent then its not a match\r\n\t\t\t\t\t\t\tx.parent === null), // it parentName === null then we expect the container parent to be null.\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\tgetContentTypeOfContainer(containerId: string) {\r\n\t\treturn this.#contentTypes\r\n\t\t\t.getValue()\r\n\t\t\t.find((contentType) => contentType.containers.some((c) => c.id === containerId));\r\n\t}\r\n\r\n\tcontentTypeOfProperty(propertyId: UmbPropertyTypeId) {\r\n\t\treturn this.#contentTypes.asObservablePart((contentTypes) =>\r\n\t\t\tcontentTypes.find((contentType) => contentType.properties.some((p) => p.id === propertyId)),\r\n\t\t);\r\n\t}\r\n\r\n\t#observeRepository(repositoryAlias: string) {\r\n\t\tif (!repositoryAlias) throw new Error('Content Type structure manager must have a repository alias.');\r\n\r\n\t\tnew UmbExtensionApiInitializer<ManifestRepository<UmbDetailRepository<T>>>(\r\n\t\t\tthis,\r\n\t\t\tumbExtensionsRegistry,\r\n\t\t\trepositoryAlias,\r\n\t\t\t[this._host],\r\n\t\t\t(permitted, ctrl) => {\r\n\t\t\t\tthis.#repository = permitted ? ctrl.api : undefined;\r\n\t\t\t\tthis.#initRepositoryResolver?.();\r\n\t\t\t},\r\n\t\t);\r\n\t}\r\n\r\n\t#clear() {\r\n\t\tthis.#init = new Promise((resolve) => {\r\n\t\t\tthis.#initResolver = resolve;\r\n\t\t});\r\n\t\tthis.#contentTypes.setValue([]);\r\n\t\tthis.#contentTypeObservers.forEach((observer) => observer.destroy());\r\n\t\tthis.#contentTypeObservers = [];\r\n\t\tthis.#contentTypes.setValue([]);\r\n\t\tthis.#containers.setValue([]);\r\n\t}\r\n\r\n\tpublic override destroy() {\r\n\t\tthis.#contentTypes.destroy();\r\n\t\tthis.#containers.destroy();\r\n\t\tsuper.destroy();\r\n\t}\r\n}\r\n","import type { UmbContentTypeCompositionModel, UmbContentTypeDetailModel, UmbContentTypeSortModel } from '../types.js';\r\nimport { UmbContentTypeStructureManager } from '../structure/index.js';\r\nimport type { UmbContentTypeWorkspaceContext } from './content-type-workspace-context.interface.js';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport type { UmbDetailRepository } from '@umbraco-cms/backoffice/repository';\r\nimport {\r\n\tUmbEntityDetailWorkspaceContextBase,\r\n\ttype UmbEntityDetailWorkspaceContextArgs,\r\n\ttype UmbEntityDetailWorkspaceContextCreateArgs,\r\n\ttype UmbRoutableWorkspaceContext,\r\n} from '@umbraco-cms/backoffice/workspace';\r\nimport type { UmbReferenceByUnique } from '@umbraco-cms/backoffice/models';\r\nimport type { Observable } from '@umbraco-cms/backoffice/observable-api';\r\nimport { UMB_ACTION_EVENT_CONTEXT } from '@umbraco-cms/backoffice/action';\r\nimport {\r\n\tUmbRequestReloadChildrenOfEntityEvent,\r\n\tUmbRequestReloadStructureForEntityEvent,\r\n} from '@umbraco-cms/backoffice/entity-action';\r\nimport type { UmbEntityModel } from '@umbraco-cms/backoffice/entity';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\r\nexport interface UmbContentTypeWorkspaceContextArgs extends UmbEntityDetailWorkspaceContextArgs {}\r\n\r\nconst LOADING_STATE_UNIQUE = 'umbLoadingContentTypeDetail';\r\n\r\nexport abstract class UmbContentTypeWorkspaceContextBase<\r\n\t\tDetailModelType extends UmbContentTypeDetailModel = UmbContentTypeDetailModel,\r\n\t\tDetailRepositoryType extends UmbDetailRepository<DetailModelType> = UmbDetailRepository<DetailModelType>,\r\n\t>\r\n\textends UmbEntityDetailWorkspaceContextBase<DetailModelType, DetailRepositoryType>\r\n\timplements UmbContentTypeWorkspaceContext<DetailModelType>, UmbRoutableWorkspaceContext\r\n{\r\n\tpublic readonly IS_CONTENT_TYPE_WORKSPACE_CONTEXT = true;\r\n\r\n\tpublic readonly name: Observable<string | undefined>;\r\n\tpublic readonly alias: Observable<string | undefined>;\r\n\tpublic readonly description: Observable<string | undefined>;\r\n\tpublic readonly icon: Observable<string | undefined>;\r\n\r\n\tpublic readonly allowedAtRoot: Observable<boolean | undefined>;\r\n\tpublic readonly variesByCulture: Observable<boolean | undefined>;\r\n\tpublic readonly variesBySegment: Observable<boolean | undefined>;\r\n\tpublic readonly isElement: Observable<boolean | undefined>;\r\n\tpublic readonly allowedContentTypes: Observable<Array<UmbContentTypeSortModel> | undefined>;\r\n\tpublic readonly compositions: Observable<Array<UmbContentTypeCompositionModel> | undefined>;\r\n\tpublic readonly collection: Observable<UmbReferenceByUnique | null | undefined>;\r\n\r\n\tpublic readonly structure: UmbContentTypeStructureManager<DetailModelType>;\r\n\r\n\tconstructor(host: UmbControllerHost, args: UmbContentTypeWorkspaceContextArgs) {\r\n\t\tsuper(host, args);\r\n\r\n\t\tthis.structure = new UmbContentTypeStructureManager<DetailModelType>(this, args.detailRepositoryAlias);\r\n\r\n\t\tthis.name = this.structure.ownerContentTypeObservablePart((data) => data?.name);\r\n\t\tthis.alias = this.structure.ownerContentTypeObservablePart((data) => data?.alias);\r\n\t\tthis.description = this.structure.ownerContentTypeObservablePart((data) => data?.description);\r\n\t\tthis.icon = this.structure.ownerContentTypeObservablePart((data) => data?.icon);\r\n\t\tthis.allowedAtRoot = this.structure.ownerContentTypeObservablePart((data) => data?.allowedAtRoot);\r\n\t\tthis.variesByCulture = this.structure.ownerContentTypeObservablePart((data) => data?.variesByCulture);\r\n\t\tthis.variesBySegment = this.structure.ownerContentTypeObservablePart((data) => data?.variesBySegment);\r\n\t\tthis.isElement = this.structure.ownerContentTypeObservablePart((data) => data?.isElement);\r\n\t\tthis.allowedContentTypes = this.structure.ownerContentTypeObservablePart((data) => data?.allowedContentTypes);\r\n\t\tthis.compositions = this.structure.ownerContentTypeObservablePart((data) => data?.compositions);\r\n\t\tthis.collection = this.structure.ownerContentTypeObservablePart((data) => data?.collection);\r\n\r\n\t\t// Keep current data in sync with the owner content type - This is used for the discard changes feature\r\n\t\tthis.observe(this.structure.ownerContentType, (data) => this._data.setCurrent(data));\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new scaffold\r\n\t * @param { UmbEntityDetailWorkspaceContextCreateArgs<DetailModelType> } args The arguments for creating a new scaffold\r\n\t * @returns { Promise<DetailModelType | undefined> } The new scaffold\r\n\t */\r\n\tpublic override async createScaffold(\r\n\t\targs: UmbEntityDetailWorkspaceContextCreateArgs<DetailModelType>,\r\n\t): Promise<DetailModelType | undefined> {\r\n\t\tthis.resetState();\r\n\t\tthis.loading.addState({ unique: LOADING_STATE_UNIQUE, message: `Creating ${this.getEntityType()} scaffold` });\r\n\t\tthis.setParent(args.parent);\r\n\r\n\t\tconst request = this.structure.createScaffold(args.preset);\r\n\t\tthis._getDataPromise = request;\r\n\t\tlet { data } = await request;\r\n\r\n\t\tif (data) {\r\n\t\t\tdata = await this._scaffoldProcessData(data);\r\n\r\n\t\t\tif (this.modalContext) {\r\n\t\t\t\t// Notice if the preset comes with values, they will overwrite the scaffolded values... [NL]\r\n\t\t\t\tdata = { ...data, ...this.modalContext.data.preset };\r\n\t\t\t}\r\n\r\n\t\t\tthis.setUnique(data.unique);\r\n\t\t\tthis.setIsNew(true);\r\n\t\t\tthis._data.setPersisted(data);\r\n\t\t}\r\n\r\n\t\tthis.loading.removeState(LOADING_STATE_UNIQUE);\r\n\r\n\t\treturn data;\r\n\t}\r\n\r\n\t/**\r\n\t * Loads the data for the workspace\r\n\t * @param { string } unique The unique identifier of the data to load\r\n\t * @returns { Promise<DetailModelType> } The loaded data\r\n\t */\r\n\toverride async load(unique: string) {\r\n\t\tif (unique === this.getUnique() && this._getDataPromise) {\r\n\t\t\treturn (await this._getDataPromise) as any;\r\n\t\t}\r\n\r\n\t\tthis.resetState();\r\n\t\tthis.setUnique(unique);\r\n\t\tthis.loading.addState({ unique: LOADING_STATE_UNIQUE, message: `Loading ${this.getEntityType()} Details` });\r\n\t\tthis._getDataPromise = this.structure.loadType(unique);\r\n\t\tconst response = await this._getDataPromise;\r\n\t\tconst data = response.data;\r\n\r\n\t\tif (data) {\r\n\t\t\tthis._data.setPersisted(data);\r\n\t\t\tthis.setIsNew(false);\r\n\r\n\t\t\tthis.observe(\r\n\t\t\t\tresponse.asObservable(),\r\n\t\t\t\t(entity: any) => this.#onDetailStoreChange(entity),\r\n\t\t\t\t'umbContentTypeDetailStoreObserver',\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tthis.loading.removeState(LOADING_STATE_UNIQUE);\r\n\t\treturn response;\r\n\t}\r\n\r\n\t#onDetailStoreChange(entity: DetailModelType | undefined) {\r\n\t\tif (!entity) {\r\n\t\t\tthis._data.clear();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates the Content Type\r\n\t * @param { DetailModelType } currentData The current data\r\n\t * @param { UmbEntityModel } parent The parent entity\r\n\t * @memberof UmbContentTypeWorkspaceContextBase\r\n\t */\r\n\toverride async _create(currentData: DetailModelType, parent: UmbEntityModel) {\r\n\t\ttry {\r\n\t\t\tawait this.structure.create(parent?.unique);\r\n\r\n\t\t\tthis._data.setPersisted(this.structure.getOwnerContentType());\r\n\r\n\t\t\tconst eventContext = await this.getContext(UMB_ACTION_EVENT_CONTEXT);\r\n\t\t\tconst event = new UmbRequestReloadChildrenOfEntityEvent({\r\n\t\t\t\tentityType: parent.entityType,\r\n\t\t\t\tunique: parent.unique,\r\n\t\t\t});\r\n\t\t\teventContext.dispatchEvent(event);\r\n\r\n\t\t\tthis.setIsNew(false);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the content type for the workspace\r\n\t * @memberof UmbContentTypeWorkspaceContextBase\r\n\t */\r\n\toverride async _update() {\r\n\t\ttry {\r\n\t\t\tawait this.structure.save();\r\n\r\n\t\t\tthis._data.setPersisted(this.structure.getOwnerContentType());\r\n\r\n\t\t\tconst actionEventContext = await this.getContext(UMB_ACTION_EVENT_CONTEXT);\r\n\t\t\tconst event = new UmbRequestReloadStructureForEntityEvent({\r\n\t\t\t\tunique: this.getUnique()!,\r\n\t\t\t\tentityType: this.getEntityType(),\r\n\t\t\t});\r\n\r\n\t\t\tactionEventContext.dispatchEvent(event);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the name of the content type\r\n\t * @returns { string | undefined } The name of the content type\r\n\t */\r\n\tpublic getName(): string | undefined {\r\n\t\treturn this.structure.getOwnerContentType()?.name;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the name of the content type\r\n\t * @param { string } name The name of the content type\r\n\t */\r\n\tpublic setName(name: string) {\r\n\t\tthis.structure.updateOwnerContentType({ name } as Partial<DetailModelType>);\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the alias of the content type\r\n\t * @returns { string | undefined } The alias of the content type\r\n\t */\r\n\tpublic getAlias(): string | undefined {\r\n\t\treturn this.structure.getOwnerContentType()?.alias;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the alias of the content type\r\n\t * @param { string } alias The alias of the content type\r\n\t */\r\n\tpublic setAlias(alias: string) {\r\n\t\tthis.structure.updateOwnerContentType({ alias } as Partial<DetailModelType>);\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the description of the content type\r\n\t * @returns { string | undefined } The description of the content type\r\n\t */\r\n\tpublic getDescription(): string | undefined {\r\n\t\treturn this.structure.getOwnerContentType()?.description;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the description of the content type\r\n\t * @param { string } description The description of the content type\r\n\t */\r\n\tpublic setDescription(description: string) {\r\n\t\tthis.structure.updateOwnerContentType({ description } as Partial<DetailModelType>);\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the compositions of the content type\r\n\t * @returns { string | undefined } The icon of the content type\r\n\t */\r\n\tpublic getCompositions(): Array<UmbContentTypeCompositionModel> | undefined {\r\n\t\treturn this.structure.getOwnerContentType()?.compositions;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the compositions of the content type\r\n\t * @param { string } compositions The compositions of the content type\r\n\t * @returns { void }\r\n\t */\r\n\tpublic setCompositions(compositions: Array<UmbContentTypeCompositionModel>) {\r\n\t\tthis.structure.updateOwnerContentType({ compositions } as Partial<DetailModelType>);\r\n\t}\r\n\r\n\t// TODO: manage setting icon color alias?\r\n\tpublic setIcon(icon: string) {\r\n\t\tthis.structure.updateOwnerContentType({ icon } as Partial<DetailModelType>);\r\n\t}\r\n\r\n\tpublic override getData() {\r\n\t\treturn this.structure.getOwnerContentType();\r\n\t}\r\n\r\n\tpublic override destroy(): void {\r\n\t\tthis.structure.destroy();\r\n\t\tsuper.destroy();\r\n\t}\r\n}\r\n"],"names":["UmbContentTypeStructureRepositoryBase","UmbRepositoryBase","#structureSource","host","structureSource","unique","UmbContentTypeStructureServerDataSourceBase","#host","#getAllowedChildrenOf","#mapper","args","data","error","tryExecuteAndNotify","item","UmbFilterDuplicateStrings","value","index","array","UmbContentTypeStructureManager","UmbControllerBase","typeRepository","#init","resolve","#initResolver","#initRepository","#repository","#initRepositoryResolver","#contentTypeObservers","#contentTypes","UmbArrayState","x","y","#ownerContentTypeUnique","createObservablePart","#contentTypeContainers","contentTypes","p","properties","#containers","#observeRepository","ownerContentTypeCompositions","#loadContentTypeCompositions","contentTypeContainers","id","#clear","result","#loadType","preset","repsonse","contentType","parentUnique","#observeContentType","ownerUnique","comp","composition","#ensureType","asObservable","ctrl","docType","mappingFunction","entry","containerId","contentTypeUnique","container","toContentTypeUnique","clonedContainer","UmbId","parentContainer","containers","type","parentId","newName","sortOrder","duplicatedParentContainer","containerType","ownerRootContainers","changedName","con","incrementString","partialUpdate","frozenContainers","partialUpdateFrozenArray","removedContainerIds","ids","property","frozenProperties","appendToFrozenArray","propertyId","filterFrozenArray","docTypes","foundProp","propertyAlias","props","name","parentName","parentType","c","repositoryAlias","UmbExtensionApiInitializer","umbExtensionsRegistry","permitted","observer","LOADING_STATE_UNIQUE","UmbContentTypeWorkspaceContextBase","UmbEntityDetailWorkspaceContextBase","request","response","entity","#onDetailStoreChange","currentData","parent","eventContext","UMB_ACTION_EVENT_CONTEXT","event","UmbRequestReloadChildrenOfEntityEvent","actionEventContext","UmbRequestReloadStructureForEntityEvent","alias","description","compositions","icon"],"mappings":"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"}