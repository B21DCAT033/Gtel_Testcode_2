{"version":3,"file":"index.js","sources":["../../../../src/packages/core/localization/localize.element.ts","../../../../src/packages/core/localization/localize-date.element.ts","../../../../src/packages/core/localization/localize-number.element.ts","../../../../src/packages/core/localization/localize-relative-time.element.ts","../../../../src/packages/core/localization/registry/localization.registry.ts","../../../../src/packages/core/localization/components/ui-culture-input/ui-culture-input.element.ts"],"sourcesContent":["import { css, customElement, html, property, state, unsafeHTML } from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\n\r\n/**\r\n * This element allows you to localize a string with optional interpolation values.\r\n * @element umb-localize\r\n * @slot - The fallback value if the key is not found.\r\n */\r\n@customElement('umb-localize')\r\nexport class UmbLocalizeElement extends UmbLitElement {\r\n\t/**\r\n\t * The key to localize. The key is case sensitive.\r\n\t * @attr\r\n\t * @example key=\"general_ok\"\r\n\t */\r\n\t@property()\r\n\tkey!: string;\r\n\r\n\t/**\r\n\t * The values to forward to the localization function (must be JSON compatible).\r\n\t * @attr\r\n\t * @example args=\"[1,2,3]\"\r\n\t * @type {any[] | undefined}\r\n\t */\r\n\t@property({ type: Array })\r\n\targs?: unknown[];\r\n\r\n\t/**\r\n\t * If true, the key will be rendered instead of the localized value if the key is not found.\r\n\t * @attr\r\n\t */\r\n\t@property({ type: Boolean })\r\n\tdebug = false;\r\n\r\n\t@state()\r\n\tprotected get text(): string {\r\n\t\tconst localizedValue = this.localize.term(this.key, ...(this.args ?? []));\r\n\r\n\t\t// If the value is the same as the key, it means the key was not found.\r\n\t\tif (localizedValue === this.key) {\r\n\t\t\t(this.getHostElement() as HTMLElement).setAttribute('data-localize-missing', this.key);\r\n\t\t\treturn '';\r\n\t\t}\r\n\r\n\t\t(this.getHostElement() as HTMLElement).removeAttribute('data-localize-missing');\r\n\r\n\t\treturn localizedValue;\r\n\t}\r\n\r\n\toverride render() {\r\n\t\treturn this.text.trim()\r\n\t\t\t? html`${unsafeHTML(this.text)}`\r\n\t\t\t: this.debug\r\n\t\t\t\t? html`<span style=\"color:red\">${this.key}</span>`\r\n\t\t\t\t: html`<slot></slot>`;\r\n\t}\r\n\r\n\tstatic override styles = [\r\n\t\tcss`\r\n\t\t\t:host {\r\n\t\t\t\tdisplay: contents;\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-localize': UmbLocalizeElement;\r\n\t}\r\n}\r\n","import { css, customElement, nothing, property } from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\n\r\n/**\r\n * This element allows you to localize a date\r\n * @element umb-localize-date\r\n * @slot - The fallback value if the key is not found.\r\n */\r\n@customElement('umb-localize-date')\r\nexport class UmbLocalizeDateElement extends UmbLitElement {\r\n\t/**\r\n\t * The date to localize.\r\n\t * @attr\r\n\t * @example date=\"Sep 22 2023\"\r\n\t */\r\n\t@property({ type: String })\r\n\tdate?: string | Date;\r\n\r\n\t/**\r\n\t * Formatting options\r\n\t * @attr\r\n\t * @example options={ dateStyle: 'full', timeStyle: 'long', timeZone: 'Australia/Sydney' }\r\n\t */\r\n\t@property({ type: Object })\r\n\toptions?: Intl.DateTimeFormatOptions;\r\n\r\n\t/**\r\n\t * Do not show the duration in the title.\r\n\t */\r\n\t@property({ type: Boolean })\r\n\tskipDuration = false;\r\n\r\n\toverride updated() {\r\n\t\tthis.#setTitle();\r\n\t}\r\n\r\n\toverride render() {\r\n\t\treturn this.date ? this.localize.date(this.date, this.options) : nothing;\r\n\t}\r\n\r\n\t#setTitle() {\r\n\t\tif (this.skipDuration) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet title = '';\r\n\r\n\t\tif (this.date) {\r\n\t\t\tconst now = new Date();\r\n\t\t\tconst d = new Date(this.date);\r\n\t\t\tconst duration = this.localize.duration(d, now);\r\n\t\t\ttitle = this.localize.term('general_duration', duration, d, now);\r\n\t\t}\r\n\r\n\t\tthis.title = title;\r\n\t}\r\n\r\n\tstatic override styles = [\r\n\t\tcss`\r\n\t\t\t:host {\r\n\t\t\t\tdisplay: contents;\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-localize-date': UmbLocalizeDateElement;\r\n\t}\r\n}\r\n","import { css, customElement, html, property, state, unsafeHTML } from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\n\r\n/**\r\n * This element allows you to localize a number\r\n * @element umb-localize-number\r\n * @slot - The fallback value if the key is not found.\r\n */\r\n@customElement('umb-localize-number')\r\nexport class UmbLocalizeNumberElement extends UmbLitElement {\r\n\t/**\r\n\t * The number to localize.\r\n\t * @attr\r\n\t * @example number=1_000_000\r\n\t */\r\n\t@property()\r\n\tnumber!: number | string;\r\n\r\n\t/**\r\n\t * Formatting options\r\n\t * @attr\r\n\t * @example options={ style: 'currency', currency: 'EUR' }\r\n\t */\r\n\t@property()\r\n\toptions?: Intl.NumberFormatOptions;\r\n\r\n\t@state()\r\n\tprotected get text(): string {\r\n\t\treturn this.localize.number(this.number, this.options);\r\n\t}\r\n\r\n\toverride render() {\r\n\t\treturn this.number ? html`${unsafeHTML(this.text)}` : html`<slot></slot>`;\r\n\t}\r\n\r\n\tstatic override styles = [\r\n\t\tcss`\r\n\t\t\t:host {\r\n\t\t\t\tdisplay: contents;\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-localize-number': UmbLocalizeNumberElement;\r\n\t}\r\n}\r\n","import { css, customElement, html, property, state, unsafeHTML } from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\n\r\n/**\r\n * This element allows you to localize a relative time\r\n * @element umb-localize-relative-time\r\n * @slot - The fallback value if the key is not found.\r\n */\r\n@customElement('umb-localize-relative-time')\r\nexport class UmbLocalizeRelativeTimeElement extends UmbLitElement {\r\n\t/**\r\n\t * The date to localize.\r\n\t * @attr\r\n\t * @example time=10\r\n\t */\r\n\t@property({ type: Number })\r\n\ttime!: number;\r\n\r\n\t/**\r\n\t * Formatting options\r\n\t * @attr\r\n\t * @example options={ dateStyle: 'full', timeStyle: 'long', timeZone: 'Australia/Sydney' }\r\n\t */\r\n\t@property({ type: Object })\r\n\toptions?: Intl.RelativeTimeFormatOptions;\r\n\r\n\t/**\r\n\t * Unit\r\n\t * @attr\r\n\t * @example unit='seconds'\r\n\t */\r\n\t@property()\r\n\tunit: Intl.RelativeTimeFormatUnit = 'seconds';\r\n\r\n\t@state()\r\n\tprotected get text(): string {\r\n\t\treturn this.localize.relativeTime(this.time, this.unit, this.options);\r\n\t}\r\n\r\n\toverride render() {\r\n\t\treturn this.time ? html`${unsafeHTML(this.text)}` : html`<slot></slot>`;\r\n\t}\r\n\r\n\tstatic override styles = [\r\n\t\tcss`\r\n\t\t\t:host {\r\n\t\t\t\tdisplay: contents;\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-localize-relative-time': UmbLocalizeRelativeTimeElement;\r\n\t}\r\n}\r\n","import type { ManifestLocalization } from '../extensions/localization.extension.js';\r\nimport {\r\n\ttype UmbLocalizationSetBase,\r\n\ttype UmbLocalizationDictionary,\r\n\ttype UmbLocalizationFlatDictionary,\r\n\tUMB_DEFAULT_LOCALIZATION_CULTURE,\r\n} from '@umbraco-cms/backoffice/localization-api';\r\nimport { umbLocalizationManager } from '@umbraco-cms/backoffice/localization-api';\r\nimport type { UmbBackofficeExtensionRegistry } from '@umbraco-cms/backoffice/extension-registry';\r\nimport { umbExtensionsRegistry } from '@umbraco-cms/backoffice/extension-registry';\r\nimport { UmbStringState } from '@umbraco-cms/backoffice/observable-api';\r\nimport { combineLatest } from '@umbraco-cms/backoffice/external/rxjs';\r\nimport { hasDefaultExport, loadManifestPlainJs } from '@umbraco-cms/backoffice/extension-api';\r\n\r\n/**\r\n *\r\n * @param innerDictionary\r\n * @param dictionaryName\r\n * @param dictionary\r\n */\r\nfunction addOrUpdateDictionary(\r\n\tinnerDictionary: UmbLocalizationFlatDictionary,\r\n\tdictionaryName: string,\r\n\tdictionary: UmbLocalizationDictionary['value'],\r\n) {\r\n\tfor (const [key, value] of Object.entries(dictionary)) {\r\n\t\tinnerDictionary[`${dictionaryName}_${key}`] = value;\r\n\t}\r\n}\r\n\r\nexport class UmbLocalizationRegistry {\r\n\t#currentLanguage = new UmbStringState(\r\n\t\tdocument.documentElement.lang !== '' ? document.documentElement.lang : UMB_DEFAULT_LOCALIZATION_CULTURE,\r\n\t);\r\n\treadonly currentLanguage = this.#currentLanguage.asObservable();\r\n\r\n\t#loadedExtAliases: Array<string> = [];\r\n\r\n\t/**\r\n\t * Get the current registered translations.\r\n\t * @returns {Map<string, UmbLocalizationSetBase>} Returns the registered translations\r\n\t */\r\n\tget localizations() {\r\n\t\treturn umbLocalizationManager.localizations;\r\n\t}\r\n\r\n\tconstructor(extensionRegistry: UmbBackofficeExtensionRegistry) {\r\n\t\tcombineLatest([this.currentLanguage, extensionRegistry.byType('localization')]).subscribe(\r\n\t\t\tasync ([currentLanguage, extensions]) => {\r\n\t\t\t\tconst locale = new Intl.Locale(currentLanguage);\r\n\t\t\t\tconst currentLanguageExtensions = extensions.filter(\r\n\t\t\t\t\t(ext) =>\r\n\t\t\t\t\t\text.meta.culture.toLowerCase() === locale.baseName.toLowerCase() ||\r\n\t\t\t\t\t\text.meta.culture.toLowerCase() === locale.language.toLowerCase(),\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// If there are no extensions for the current language, return early\r\n\t\t\t\tif (!currentLanguageExtensions.length) return;\r\n\r\n\t\t\t\t// Register the new translations only if they have not been registered before\r\n\t\t\t\tconst diff = currentLanguageExtensions.filter((ext) => !this.#loadedExtAliases.includes(ext.alias));\r\n\r\n\t\t\t\t// Load all localizations\r\n\t\t\t\tconst translations = await Promise.all(currentLanguageExtensions.map(this.#loadExtension));\r\n\r\n\t\t\t\t// If there are no translations, return early\r\n\t\t\t\tif (!translations.length) return;\r\n\r\n\t\t\t\tif (diff.length) {\r\n\t\t\t\t\tconst filteredTranslations = translations.filter((t) =>\r\n\t\t\t\t\t\tdiff.some((ext) => ext.meta.culture.toLowerCase() === t.$code),\r\n\t\t\t\t\t);\r\n\t\t\t\t\tumbLocalizationManager.registerManyLocalizations(filteredTranslations);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Set the document language\r\n\t\t\t\tconst newLang = locale.baseName.toLowerCase();\r\n\t\t\t\tif (document.documentElement.lang.toLowerCase() !== newLang) {\r\n\t\t\t\t\tdocument.documentElement.lang = newLang;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Set the document direction to the direction of the primary language\r\n\t\t\t\tconst newDir = translations[0].$dir ?? 'ltr';\r\n\t\t\t\tif (document.documentElement.dir !== newDir) {\r\n\t\t\t\t\tdocument.documentElement.dir = newDir;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t);\r\n\t}\r\n\r\n\t#loadExtension = async (extension: ManifestLocalization) => {\r\n\t\tthis.#loadedExtAliases.push(extension.alias);\r\n\r\n\t\tconst innerDictionary: UmbLocalizationFlatDictionary = {};\r\n\r\n\t\t// If extension contains a dictionary, add it to the inner dictionary.\r\n\t\tif (extension.meta.localizations) {\r\n\t\t\tfor (const [dictionaryName, dictionary] of Object.entries(extension.meta.localizations)) {\r\n\t\t\t\taddOrUpdateDictionary(innerDictionary, dictionaryName, dictionary);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If extension contains a js file, load it and add the default dictionary to the inner dictionary.\r\n\t\tif (extension.js) {\r\n\t\t\tconst loadedExtension = await loadManifestPlainJs(extension.js);\r\n\r\n\t\t\tif (loadedExtension && hasDefaultExport<UmbLocalizationDictionary>(loadedExtension)) {\r\n\t\t\t\tfor (const [dictionaryName, dictionary] of Object.entries(loadedExtension.default)) {\r\n\t\t\t\t\taddOrUpdateDictionary(innerDictionary, dictionaryName, dictionary);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Notify subscribers that the inner dictionary has changed.\r\n\t\treturn {\r\n\t\t\t$code: extension.meta.culture.toLowerCase(),\r\n\t\t\t$dir: extension.meta.direction ?? 'ltr',\r\n\t\t\t...innerDictionary,\r\n\t\t} satisfies UmbLocalizationSetBase;\r\n\t};\r\n\r\n\t/**\r\n\t * Load a language from the extension registry.\r\n\t * @param {string} locale The locale to load.\r\n\t */\r\n\tloadLanguage(locale: string) {\r\n\t\tthis.#currentLanguage.setValue(locale.toLowerCase());\r\n\t}\r\n}\r\n\r\nexport const umbLocalizationRegistry = new UmbLocalizationRegistry(umbExtensionsRegistry);\r\n","import type { ManifestLocalization } from '../../extensions/localization.extension.js';\r\nimport { UmbChangeEvent } from '@umbraco-cms/backoffice/event';\r\nimport { css, html, customElement, query, state, property } from '@umbraco-cms/backoffice/external/lit';\r\nimport type { UUISelectEvent } from '@umbraco-cms/backoffice/external/uui';\r\nimport { UUIFormControlMixin } from '@umbraco-cms/backoffice/external/uui';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\nimport { umbExtensionsRegistry } from '@umbraco-cms/backoffice/extension-registry';\r\n\r\ninterface UmbCultureInputOption {\r\n\tname: string;\r\n\tvalue: string;\r\n}\r\n\r\n@customElement('umb-ui-culture-input')\r\nexport class UmbUiCultureInputElement extends UUIFormControlMixin(UmbLitElement, '') {\r\n\t@state()\r\n\tprivate _options: Array<UmbCultureInputOption> = [];\r\n\r\n\t@query('uui-combobox')\r\n\tprivate _selectElement!: HTMLInputElement;\r\n\r\n\t@property({ type: String })\r\n\toverride get value() {\r\n\t\treturn super.value;\r\n\t}\r\n\toverride set value(value: FormDataEntryValue | FormData) {\r\n\t\tif (typeof value === 'string') {\r\n\t\t\tconst oldValue = super.value;\r\n\t\t\tsuper.value = value.toLowerCase();\r\n\t\t\tthis.requestUpdate('value', oldValue);\r\n\t\t}\r\n\t}\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.#observeTranslations();\r\n\t}\r\n\r\n\t#observeTranslations() {\r\n\t\tthis.observe(\r\n\t\t\tumbExtensionsRegistry.byType('localization'),\r\n\t\t\t(localizationManifests) => {\r\n\t\t\t\tthis.#mapToOptions(localizationManifests);\r\n\t\t\t},\r\n\t\t\t'umbObserveLocalizationManifests',\r\n\t\t);\r\n\t}\r\n\r\n\t#mapToOptions(manifests: Array<ManifestLocalization>) {\r\n\t\tthis._options = manifests\r\n\t\t\t.filter((isoCode) => isoCode !== undefined)\r\n\t\t\t.map((manifest) => ({\r\n\t\t\t\tname: manifest.name,\r\n\t\t\t\tvalue: manifest.meta.culture.toLowerCase(),\r\n\t\t\t}));\r\n\t}\r\n\r\n\tprotected override getFormElement() {\r\n\t\treturn this._selectElement;\r\n\t}\r\n\r\n\t#onCustomValidationChange(event: UUISelectEvent) {\r\n\t\tthis.value = event.target.value.toString();\r\n\t\tthis.dispatchEvent(new UmbChangeEvent());\r\n\t}\r\n\r\n\toverride render() {\r\n\t\treturn html`\r\n\t\t\t<uui-select\r\n\t\t\t\tstyle=\"margin-top: var(--uui-size-space-1)\"\r\n\t\t\t\t@change=${this.#onCustomValidationChange}\r\n\t\t\t\t.options=${this._options.map((e) => ({\r\n\t\t\t\t\tname: e.name,\r\n\t\t\t\t\tvalue: e.value,\r\n\t\t\t\t\tselected: e.value == this.value,\r\n\t\t\t\t}))}></uui-select>\r\n\t\t`;\r\n\t}\r\n\r\n\tstatic override styles = [\r\n\t\tcss`\r\n\t\t\t:host {\r\n\t\t\t\tdisplay: block;\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\nexport default UmbUiCultureInputElement;\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-ui-culture-input': UmbUiCultureInputElement;\r\n\t}\r\n}\r\n"],"names":["UmbLocalizeElement","UmbLitElement","localizedValue","html","unsafeHTML","css","__decorateClass","property","state","customElement","_UmbLocalizeDateElement_instances","setTitle_fn","UmbLocalizeDateElement","__privateAdd","__privateMethod","nothing","title","now","d","duration","UmbLocalizeNumberElement","UmbLocalizeRelativeTimeElement","addOrUpdateDictionary","innerDictionary","dictionaryName","dictionary","key","value","UmbLocalizationRegistry","extensionRegistry","#currentLanguage","UmbStringState","UMB_DEFAULT_LOCALIZATION_CULTURE","#loadedExtAliases","#loadExtension","extension","loadedExtension","loadManifestPlainJs","hasDefaultExport","combineLatest","currentLanguage","extensions","locale","currentLanguageExtensions","ext","diff","translations","filteredTranslations","t","umbLocalizationManager","newLang","newDir","umbLocalizationRegistry","umbExtensionsRegistry","_UmbUiCultureInputElement_instances","observeTranslations_fn","mapToOptions_fn","onCustomValidationChange_fn","UmbUiCultureInputElement","UUIFormControlMixin","oldValue","localizationManifests","manifests","isoCode","manifest","event","UmbChangeEvent","query"],"mappings":"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"}