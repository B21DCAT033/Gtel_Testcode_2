{"version":3,"file":"index.js","sources":["../../../../src/packages/core/menu/menu-tree-structure-workspace-context-base.ts","../../../../src/packages/core/menu/menu-variant-tree-structure-workspace-context-base.ts"],"sourcesContent":["import type { UmbStructureItemModel } from './types.js';\r\nimport type { UmbTreeRepository, UmbTreeItemModel, UmbTreeRootModel } from '@umbraco-cms/backoffice/tree';\r\nimport { createExtensionApiByAlias } from '@umbraco-cms/backoffice/extension-registry';\r\nimport { UmbContextBase } from '@umbraco-cms/backoffice/class-api';\r\nimport { UMB_WORKSPACE_CONTEXT } from '@umbraco-cms/backoffice/workspace';\r\nimport { UmbArrayState, UmbObjectState } from '@umbraco-cms/backoffice/observable-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\n\r\ninterface UmbMenuTreeStructureWorkspaceContextBaseArgs {\r\n\ttreeRepositoryAlias: string;\r\n}\r\n\r\nexport abstract class UmbMenuTreeStructureWorkspaceContextBase extends UmbContextBase<unknown> {\r\n\t#workspaceContext?: any;\r\n\t#args: UmbMenuTreeStructureWorkspaceContextBaseArgs;\r\n\r\n\t#structure = new UmbArrayState<UmbStructureItemModel>([], (x) => x.unique);\r\n\tpublic readonly structure = this.#structure.asObservable();\r\n\r\n\t#parent = new UmbObjectState<UmbStructureItemModel | undefined>(undefined);\r\n\tpublic readonly parent = this.#parent.asObservable();\r\n\r\n\tconstructor(host: UmbControllerHost, args: UmbMenuTreeStructureWorkspaceContextBaseArgs) {\r\n\t\t// TODO: set up context token\r\n\t\tsuper(host, 'UmbMenuStructureWorkspaceContext');\r\n\t\tthis.#args = args;\r\n\r\n\t\tthis.consumeContext(UMB_WORKSPACE_CONTEXT, (instance) => {\r\n\t\t\tthis.#workspaceContext = instance;\r\n\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n\t\t\t// @ts-ignore\r\n\t\t\tthis.#workspaceContext.observe(this.#workspaceContext.unique, (value) => {\r\n\t\t\t\tif (!value) return;\r\n\t\t\t\tthis.#requestStructure();\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tasync #requestStructure() {\r\n\t\tlet structureItems: Array<UmbStructureItemModel> = [];\r\n\r\n\t\tconst treeRepository = await createExtensionApiByAlias<UmbTreeRepository<UmbTreeItemModel, UmbTreeRootModel>>(\r\n\t\t\tthis,\r\n\t\t\tthis.#args.treeRepositoryAlias,\r\n\t\t);\r\n\r\n\t\tconst { data: root } = await treeRepository.requestTreeRoot();\r\n\r\n\t\tif (root) {\r\n\t\t\tstructureItems = [\r\n\t\t\t\t{\r\n\t\t\t\t\tunique: root.unique,\r\n\t\t\t\t\tentityType: root.entityType,\r\n\t\t\t\t\tname: root.name,\r\n\t\t\t\t\tisFolder: root.isFolder,\r\n\t\t\t\t},\r\n\t\t\t];\r\n\t\t}\r\n\r\n\t\tconst isNew = this.#workspaceContext?.getIsNew();\r\n\r\n\t\tconst entityTypeObservable = isNew ? this.#workspaceContext?.parentEntityType : this.#workspaceContext?.entityType;\r\n\t\tconst entityType = (await this.observe(entityTypeObservable, () => {})?.asPromise()) as string;\r\n\t\tif (!entityType) throw new Error('Entity type is not available');\r\n\r\n\t\t// If the entity type is different from the root entity type, then we can request the ancestors.\r\n\t\tif (entityType !== root?.entityType) {\r\n\t\t\tconst uniqueObservable = isNew ? this.#workspaceContext?.parentUnique : this.#workspaceContext?.unique;\r\n\t\t\tconst unique = (await this.observe(uniqueObservable, () => {})?.asPromise()) as string;\r\n\t\t\tif (!unique) throw new Error('Unique is not available');\r\n\r\n\t\t\tconst { data } = await treeRepository.requestTreeItemAncestors({ treeItem: { unique, entityType } });\r\n\r\n\t\t\tif (data) {\r\n\t\t\t\tconst ancestorItems = data.map((treeItem) => {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tunique: treeItem.unique,\r\n\t\t\t\t\t\tentityType: treeItem.entityType,\r\n\t\t\t\t\t\tname: treeItem.name,\r\n\t\t\t\t\t\tisFolder: treeItem.isFolder,\r\n\t\t\t\t\t};\r\n\t\t\t\t});\r\n\r\n\t\t\t\tstructureItems.push(...ancestorItems);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst parent = structureItems[structureItems.length - 2];\r\n\t\tthis.#parent.setValue(parent);\r\n\t\tthis.#structure.setValue(structureItems);\r\n\t}\r\n}\r\n","import type { UmbVariantStructureItemModel } from './types.js';\r\nimport type { UmbTreeRepository, UmbTreeRootModel } from '@umbraco-cms/backoffice/tree';\r\nimport { createExtensionApiByAlias } from '@umbraco-cms/backoffice/extension-registry';\r\nimport { UmbContextBase } from '@umbraco-cms/backoffice/class-api';\r\nimport { UMB_VARIANT_WORKSPACE_CONTEXT } from '@umbraco-cms/backoffice/workspace';\r\nimport { UmbArrayState, UmbObjectState } from '@umbraco-cms/backoffice/observable-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\n\r\ninterface UmbMenuVariantTreeStructureWorkspaceContextBaseArgs {\r\n\ttreeRepositoryAlias: string;\r\n}\r\n\r\nexport abstract class UmbMenuVariantTreeStructureWorkspaceContextBase extends UmbContextBase<unknown> {\r\n\t// TODO: add correct interface\r\n\t#workspaceContext?: any;\r\n\t#args: UmbMenuVariantTreeStructureWorkspaceContextBaseArgs;\r\n\r\n\t#structure = new UmbArrayState<UmbVariantStructureItemModel>([], (x) => x.unique);\r\n\tpublic readonly structure = this.#structure.asObservable();\r\n\r\n\t#parent = new UmbObjectState<UmbVariantStructureItemModel | undefined>(undefined);\r\n\tpublic readonly parent = this.#parent.asObservable();\r\n\r\n\tconstructor(host: UmbControllerHost, args: UmbMenuVariantTreeStructureWorkspaceContextBaseArgs) {\r\n\t\t// TODO: set up context token\r\n\t\tsuper(host, 'UmbMenuStructureWorkspaceContext');\r\n\t\tthis.#args = args;\r\n\r\n\t\tthis.consumeContext(UMB_VARIANT_WORKSPACE_CONTEXT, (instance) => {\r\n\t\t\tthis.#workspaceContext = instance;\r\n\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n\t\t\t// @ts-ignore\r\n\t\t\tthis.#workspaceContext.observe(this.#workspaceContext.unique, (value) => {\r\n\t\t\t\tif (!value) return;\r\n\t\t\t\tthis.#requestStructure();\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tasync #requestStructure() {\r\n\t\tconst isNew = this.#workspaceContext?.getIsNew();\r\n\t\tconst uniqueObservable = isNew ? this.#workspaceContext?.parentUnique : this.#workspaceContext?.unique;\r\n\t\tconst entityTypeObservable = isNew ? this.#workspaceContext?.parentEntityType : this.#workspaceContext?.entityType;\r\n\r\n\t\tlet structureItems: Array<UmbVariantStructureItemModel> = [];\r\n\r\n\t\tconst unique = (await this.observe(uniqueObservable, () => {})?.asPromise()) as string;\r\n\t\tif (unique === undefined) throw new Error('Unique is not available');\r\n\r\n\t\tconst entityType = (await this.observe(entityTypeObservable, () => {})?.asPromise()) as string;\r\n\t\tif (!entityType) throw new Error('Entity type is not available');\r\n\r\n\t\t// TODO: add correct tree variant item model\r\n\t\tconst treeRepository = await createExtensionApiByAlias<UmbTreeRepository<any, UmbTreeRootModel>>(\r\n\t\t\tthis,\r\n\t\t\tthis.#args.treeRepositoryAlias,\r\n\t\t);\r\n\r\n\t\tconst { data: root } = await treeRepository.requestTreeRoot();\r\n\r\n\t\tif (root) {\r\n\t\t\tstructureItems = [\r\n\t\t\t\t{\r\n\t\t\t\t\tunique: root.unique,\r\n\t\t\t\t\tentityType: root.entityType,\r\n\t\t\t\t\tvariants: [{ name: root.name, culture: null, segment: null }],\r\n\t\t\t\t},\r\n\t\t\t];\r\n\t\t}\r\n\r\n\t\tconst { data } = await treeRepository.requestTreeItemAncestors({ treeItem: { unique, entityType } });\r\n\r\n\t\tif (data) {\r\n\t\t\tconst ancestorItems = data.map((treeItem) => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tunique: treeItem.unique,\r\n\t\t\t\t\tentityType: treeItem.entityType,\r\n\t\t\t\t\tvariants: treeItem.variants.map((variant: any) => {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tname: variant.name,\r\n\t\t\t\t\t\t\tculture: variant.culture,\r\n\t\t\t\t\t\t\tsegment: variant.segment,\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}),\r\n\t\t\t\t};\r\n\t\t\t});\r\n\r\n\t\t\tstructureItems.push(...ancestorItems);\r\n\r\n\t\t\tconst parent = structureItems[structureItems.length - 2];\r\n\t\t\tthis.#parent.setValue(parent);\r\n\t\t\tthis.#structure.setValue(structureItems);\r\n\t\t}\r\n\t}\r\n}\r\n"],"names":["UmbMenuTreeStructureWorkspaceContextBase","UmbContextBase","host","args","#structure","UmbArrayState","x","#parent","UmbObjectState","#args","UMB_WORKSPACE_CONTEXT","instance","#workspaceContext","value","#requestStructure","structureItems","treeRepository","createExtensionApiByAlias","root","isNew","entityTypeObservable","entityType","uniqueObservable","unique","data","ancestorItems","treeItem","parent","UmbMenuVariantTreeStructureWorkspaceContextBase","UMB_VARIANT_WORKSPACE_CONTEXT","variant"],"mappings":";;;;;;AAYO,MAAeA,UAAiDC,EAAwB;AAAA,EAU9F,YAAYC,GAAyBC,GAAoD;AAExF,UAAMD,GAAM,kCAAkC,GAR/C,KAAAE,KAAa,IAAIC,EAAqC,IAAI,CAACC,MAAMA,EAAE,MAAM,GACzD,KAAA,YAAY,KAAKF,GAAW,aAAa,GAE/C,KAAAG,KAAA,IAAIC,EAAkD,MAAS,GACzD,KAAA,SAAS,KAAKD,GAAQ,aAAa,GAKlD,KAAKE,KAAQN,GAER,KAAA,eAAeO,GAAuB,CAACC,MAAa;AACxD,WAAKC,KAAoBD,GAGzB,KAAKC,GAAkB,QAAQ,KAAKA,GAAkB,QAAQ,CAACC,MAAU;AACxE,QAAKA,KACL,KAAKC,GAAkB;AAAA,MAAA,CACvB;AAAA,IAAA,CACD;AAAA,EAAA;AAAA,EAtBFF;AAAA,EACAH;AAAA,EAEAL;AAAA,EAGAG;AAAA,EAmBA,MAAMO,KAAoB;AACzB,QAAIC,IAA+C,CAAC;AAEpD,UAAMC,IAAiB,MAAMC;AAAA,MAC5B;AAAA,MACA,KAAKR,GAAM;AAAA,IACZ,GAEM,EAAE,MAAMS,EAAS,IAAA,MAAMF,EAAe,gBAAgB;AAE5D,IAAIE,MACcH,IAAA;AAAA,MAChB;AAAA,QACC,QAAQG,EAAK;AAAA,QACb,YAAYA,EAAK;AAAA,QACjB,MAAMA,EAAK;AAAA,QACX,UAAUA,EAAK;AAAA,MAAA;AAAA,IAEjB;AAGK,UAAAC,IAAQ,KAAKP,IAAmB,SAAS,GAEzCQ,IAAuBD,IAAQ,KAAKP,IAAmB,mBAAmB,KAAKA,IAAmB,YAClGS,IAAc,MAAM,KAAK,QAAQD,GAAsB,MAAM;AAAA,IAAE,CAAA,GAAG,UAAU;AAClF,QAAI,CAACC,EAAkB,OAAA,IAAI,MAAM,8BAA8B;AAG3D,QAAAA,MAAeH,GAAM,YAAY;AACpC,YAAMI,IAAmBH,IAAQ,KAAKP,IAAmB,eAAe,KAAKA,IAAmB,QAC1FW,IAAU,MAAM,KAAK,QAAQD,GAAkB,MAAM;AAAA,MAAE,CAAA,GAAG,UAAU;AAC1E,UAAI,CAACC,EAAc,OAAA,IAAI,MAAM,yBAAyB;AAEtD,YAAM,EAAE,MAAAC,MAAS,MAAMR,EAAe,yBAAyB,EAAE,UAAU,EAAE,QAAAO,GAAQ,YAAAF,EAAW,GAAG;AAEnG,UAAIG,GAAM;AACT,cAAMC,IAAgBD,EAAK,IAAI,CAACE,OACxB;AAAA,UACN,QAAQA,EAAS;AAAA,UACjB,YAAYA,EAAS;AAAA,UACrB,MAAMA,EAAS;AAAA,UACf,UAAUA,EAAS;AAAA,QACpB,EACA;AAEc,QAAAX,EAAA,KAAK,GAAGU,CAAa;AAAA,MAAA;AAAA,IACrC;AAGD,UAAME,IAASZ,EAAeA,EAAe,SAAS,CAAC;AAClD,SAAAR,GAAQ,SAASoB,CAAM,GACvB,KAAAvB,GAAW,SAASW,CAAc;AAAA,EAAA;AAEzC;AC/EO,MAAea,UAAwD3B,EAAwB;AAAA,EAWrG,YAAYC,GAAyBC,GAA2D;AAE/F,UAAMD,GAAM,kCAAkC,GAR/C,KAAAE,KAAa,IAAIC,EAA4C,IAAI,CAACC,MAAMA,EAAE,MAAM,GAChE,KAAA,YAAY,KAAKF,GAAW,aAAa,GAE/C,KAAAG,KAAA,IAAIC,EAAyD,MAAS,GAChE,KAAA,SAAS,KAAKD,GAAQ,aAAa,GAKlD,KAAKE,KAAQN,GAER,KAAA,eAAe0B,GAA+B,CAAClB,MAAa;AAChE,WAAKC,KAAoBD,GAGzB,KAAKC,GAAkB,QAAQ,KAAKA,GAAkB,QAAQ,CAACC,MAAU;AACxE,QAAKA,KACL,KAAKC,GAAkB;AAAA,MAAA,CACvB;AAAA,IAAA,CACD;AAAA,EAAA;AAAA;AAAA,EAtBFF;AAAA,EACAH;AAAA,EAEAL;AAAA,EAGAG;AAAA,EAmBA,MAAMO,KAAoB;AACnB,UAAAK,IAAQ,KAAKP,IAAmB,SAAS,GACzCU,IAAmBH,IAAQ,KAAKP,IAAmB,eAAe,KAAKA,IAAmB,QAC1FQ,IAAuBD,IAAQ,KAAKP,IAAmB,mBAAmB,KAAKA,IAAmB;AAExG,QAAIG,IAAsD,CAAC;AAE3D,UAAMQ,IAAU,MAAM,KAAK,QAAQD,GAAkB,MAAM;AAAA,IAAE,CAAA,GAAG,UAAU;AAC1E,QAAIC,MAAW,OAAiB,OAAA,IAAI,MAAM,yBAAyB;AAEnE,UAAMF,IAAc,MAAM,KAAK,QAAQD,GAAsB,MAAM;AAAA,IAAE,CAAA,GAAG,UAAU;AAClF,QAAI,CAACC,EAAkB,OAAA,IAAI,MAAM,8BAA8B;AAG/D,UAAML,IAAiB,MAAMC;AAAA,MAC5B;AAAA,MACA,KAAKR,GAAM;AAAA,IACZ,GAEM,EAAE,MAAMS,EAAS,IAAA,MAAMF,EAAe,gBAAgB;AAE5D,IAAIE,MACcH,IAAA;AAAA,MAChB;AAAA,QACC,QAAQG,EAAK;AAAA,QACb,YAAYA,EAAK;AAAA,QACjB,UAAU,CAAC,EAAE,MAAMA,EAAK,MAAM,SAAS,MAAM,SAAS,KAAM,CAAA;AAAA,MAAA;AAAA,IAE9D;AAGD,UAAM,EAAE,MAAAM,MAAS,MAAMR,EAAe,yBAAyB,EAAE,UAAU,EAAE,QAAAO,GAAQ,YAAAF,EAAW,GAAG;AAEnG,QAAIG,GAAM;AACT,YAAMC,IAAgBD,EAAK,IAAI,CAACE,OACxB;AAAA,QACN,QAAQA,EAAS;AAAA,QACjB,YAAYA,EAAS;AAAA,QACrB,UAAUA,EAAS,SAAS,IAAI,CAACI,OACzB;AAAA,UACN,MAAMA,EAAQ;AAAA,UACd,SAASA,EAAQ;AAAA,UACjB,SAASA,EAAQ;AAAA,QAClB,EACA;AAAA,MACF,EACA;AAEc,MAAAf,EAAA,KAAK,GAAGU,CAAa;AAEpC,YAAME,IAASZ,EAAeA,EAAe,SAAS,CAAC;AAClD,WAAAR,GAAQ,SAASoB,CAAM,GACvB,KAAAvB,GAAW,SAASW,CAAc;AAAA,IAAA;AAAA,EACxC;AAEF;"}