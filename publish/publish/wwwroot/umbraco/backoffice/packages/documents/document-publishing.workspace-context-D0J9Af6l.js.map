{"version":3,"file":"document-publishing.workspace-context-D0J9Af6l.js","sources":["../../../src/packages/documents/documents/publishing/pending-changes/document-published-pending-changes.manager.ts","../../../src/packages/documents/documents/publishing/workspace-context/document-publishing.workspace-context.ts"],"sourcesContent":["import type { UmbDocumentVariantModel } from '../../types.js';\r\nimport type {\r\n\tUmbDocumentPublishedPendingChangesManagerProcessArgs,\r\n\tUmbPublishedVariantWithPendingChanges,\r\n} from './types.js';\r\nimport { UmbVariantId } from '@umbraco-cms/backoffice/variant';\r\nimport { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\nimport { UmbMergeContentVariantDataController } from '@umbraco-cms/backoffice/content';\r\nimport { jsonStringComparison, UmbArrayState } from '@umbraco-cms/backoffice/observable-api';\r\n\r\n/**\r\n * Manages the pending changes for a published document.\r\n * @exports\r\n * @class UmbDocumentPublishedPendingChangesManager\r\n * @augments {UmbControllerBase}\r\n */\r\nexport class UmbDocumentPublishedPendingChangesManager extends UmbControllerBase {\r\n\t#variantsWithChanges = new UmbArrayState<UmbPublishedVariantWithPendingChanges>([], (x) => x.variantId.toString());\r\n\tpublic readonly variantsWithChanges = this.#variantsWithChanges.asObservable();\r\n\r\n\t/**\r\n\t * Checks each variant if there are any pending changes to publish.\r\n\t * @param {UmbDocumentPublishedPendingChangesManagerProcessArgs} args - The arguments for the process.\r\n\t * @param {UmbDocumentDetailModel} args.persistedData - The persisted document data.\r\n\t * @param {UmbDocumentDetailModel} args.publishedData - The published document data.\r\n\t * @returns {Promise<void>}\r\n\t * @memberof UmbDocumentPublishedPendingChangesManager\r\n\t */\r\n\tasync process(args: UmbDocumentPublishedPendingChangesManagerProcessArgs): Promise<void> {\r\n\t\tif (!args.persistedData) throw new Error('Persisted data is missing');\r\n\t\tif (!args.publishedData) throw new Error('Published data is missing');\r\n\t\tif (args.persistedData.unique !== args.publishedData.unique)\r\n\t\t\tthrow new Error('Persisted and published data does not have the same unique');\r\n\r\n\t\tconst variantIds = args.persistedData.variants?.map((x) => UmbVariantId.Create(x)) ?? [];\r\n\r\n\t\tconst pendingChangesPromises = variantIds.map(async (variantId) => {\r\n\t\t\tconst mergedData = await new UmbMergeContentVariantDataController(this).process(\r\n\t\t\t\targs.publishedData,\r\n\t\t\t\targs.persistedData,\r\n\t\t\t\t[variantId],\r\n\t\t\t\t[variantId],\r\n\t\t\t);\r\n\r\n\t\t\tconst mergedDataClone = structuredClone(mergedData);\r\n\t\t\tconst publishedDataClone = structuredClone(args.publishedData);\r\n\r\n\t\t\t// remove dates from the comparison\r\n\t\t\tmergedDataClone.variants.forEach((variant) => this.#cleanVariantForComparison(variant));\r\n\t\t\tpublishedDataClone.variants.forEach((variant) => this.#cleanVariantForComparison(variant));\r\n\r\n\t\t\t// remove template from the comparison (doesn't affect publishable changes, and the published version is coming through as null)\r\n\t\t\tmergedDataClone.template = null;\r\n\t\t\tpublishedDataClone.template = null;\r\n\t\t\tconst hasChanges = jsonStringComparison(mergedDataClone, publishedDataClone) === false;\r\n\r\n\t\t\tif (hasChanges) {\r\n\t\t\t\treturn { variantId };\r\n\t\t\t} else {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tconst variantsWithPendingChanges = (await Promise.all(pendingChangesPromises)).filter((x) => x !== null);\r\n\r\n\t\tthis.#variantsWithChanges.setValue(variantsWithPendingChanges);\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the variants with changes.\r\n\t * @returns {Array<UmbPublishedVariantWithPendingChanges>}  {Array<UmbVariantWithChanges>}\r\n\t * @memberof UmbDocumentPublishedPendingChangesManager\r\n\t */\r\n\tgetVariantsWithChanges(): Array<UmbPublishedVariantWithPendingChanges> {\r\n\t\treturn this.#variantsWithChanges.getValue();\r\n\t}\r\n\r\n\t#cleanVariantForComparison = (variant: UmbDocumentVariantModel) => {\r\n\t\t// The server seems to have some date mismatches when quickly\r\n\t\t// fetching a document after a save and comparing it to the published version.\r\n\t\t// This is a temporary workaround to not include these dates in the comparison.\r\n\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n\t\t// @ts-expect-error\r\n\t\tdelete variant.updateDate;\r\n\t};\r\n\r\n\t/**\r\n\t * Clear all states/values,\r\n\t */\r\n\tclear() {\r\n\t\tthis.#variantsWithChanges.setValue([]);\r\n\t}\r\n}\r\n","import { UMB_DOCUMENT_WORKSPACE_CONTEXT } from '../../workspace/document-workspace.context-token.js';\r\nimport type {\r\n\tUmbDocumentDetailModel,\r\n\tUmbDocumentVariantOptionModel,\r\n\tUmbDocumentVariantPublishModel,\r\n} from '../../types.js';\r\nimport { UmbDocumentPublishingRepository } from '../repository/index.js';\r\nimport { UmbDocumentPublishedPendingChangesManager } from '../pending-changes/index.js';\r\nimport { UMB_DOCUMENT_SCHEDULE_MODAL } from '../schedule-publish/constants.js';\r\nimport { UMB_DOCUMENT_PUBLISH_WITH_DESCENDANTS_MODAL } from '../publish-with-descendants/constants.js';\r\nimport { UMB_DOCUMENT_PUBLISH_MODAL } from '../publish/constants.js';\r\nimport { UmbUnpublishDocumentEntityAction } from '../unpublish/index.js';\r\nimport { UMB_DOCUMENT_PUBLISHING_WORKSPACE_CONTEXT } from './document-publishing.workspace-context.token.js';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbContextBase } from '@umbraco-cms/backoffice/class-api';\r\nimport { UMB_MODAL_MANAGER_CONTEXT } from '@umbraco-cms/backoffice/modal';\r\nimport {\r\n\tUmbRequestReloadChildrenOfEntityEvent,\r\n\tUmbRequestReloadStructureForEntityEvent,\r\n} from '@umbraco-cms/backoffice/entity-action';\r\nimport { UMB_ACTION_EVENT_CONTEXT } from '@umbraco-cms/backoffice/action';\r\nimport { UmbVariantId } from '@umbraco-cms/backoffice/variant';\r\nimport { UMB_NOTIFICATION_CONTEXT } from '@umbraco-cms/backoffice/notification';\r\nimport { firstValueFrom } from '@umbraco-cms/backoffice/external/rxjs';\r\nimport { observeMultiple } from '@umbraco-cms/backoffice/observable-api';\r\nimport { DocumentVariantStateModel } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport type { UmbEntityUnique } from '@umbraco-cms/backoffice/entity';\r\nimport { UmbLocalizationController } from '@umbraco-cms/backoffice/localization-api';\r\n\r\nexport class UmbDocumentPublishingWorkspaceContext extends UmbContextBase<UmbDocumentPublishingWorkspaceContext> {\r\n\t/**\r\n\t * Manages the pending changes for the published document.\r\n\t * @memberof UmbDocumentPublishingWorkspaceContext\r\n\t */\r\n\tpublic readonly publishedPendingChanges = new UmbDocumentPublishedPendingChangesManager(this);\r\n\r\n\t#init: Promise<unknown>;\r\n\t#documentWorkspaceContext?: typeof UMB_DOCUMENT_WORKSPACE_CONTEXT.TYPE;\r\n\t#eventContext?: typeof UMB_ACTION_EVENT_CONTEXT.TYPE;\r\n\t#publishingRepository = new UmbDocumentPublishingRepository(this);\r\n\t#publishedDocumentData?: UmbDocumentDetailModel;\r\n\t#currentUnique?: UmbEntityUnique;\r\n\t#notificationContext?: typeof UMB_NOTIFICATION_CONTEXT.TYPE;\r\n\treadonly #localize = new UmbLocalizationController(this);\r\n\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host, UMB_DOCUMENT_PUBLISHING_WORKSPACE_CONTEXT);\r\n\r\n\t\tthis.#init = Promise.all([\r\n\t\t\tthis.consumeContext(UMB_DOCUMENT_WORKSPACE_CONTEXT, async (context) => {\r\n\t\t\t\tthis.#documentWorkspaceContext = context;\r\n\t\t\t\tthis.#initPendingChanges();\r\n\t\t\t}).asPromise(),\r\n\r\n\t\t\tthis.consumeContext(UMB_ACTION_EVENT_CONTEXT, async (context) => {\r\n\t\t\t\tthis.#eventContext = context;\r\n\t\t\t}).asPromise(),\r\n\t\t]);\r\n\r\n\t\tthis.consumeContext(UMB_NOTIFICATION_CONTEXT, (context) => {\r\n\t\t\tthis.#notificationContext = context;\r\n\t\t});\r\n\t}\r\n\r\n\tpublic async publish() {\r\n\t\tthrow new Error('Method not implemented.');\r\n\t}\r\n\r\n\t/**\r\n\t * Save and publish the document\r\n\t * @returns {Promise<void>}\r\n\t * @memberof UmbDocumentPublishingWorkspaceContext\r\n\t */\r\n\tpublic async saveAndPublish(): Promise<void> {\r\n\t\treturn this.#handleSaveAndPublish();\r\n\t}\r\n\r\n\t/**\r\n\t * Schedule the document for publishing\r\n\t * @returns {Promise<void>}\r\n\t * @memberof UmbDocumentPublishingWorkspaceContext\r\n\t */\r\n\tpublic async schedule(): Promise<void> {\r\n\t\tawait this.#init;\r\n\t\tif (!this.#documentWorkspaceContext) throw new Error('Document workspace context is missing');\r\n\r\n\t\tconst unique = this.#documentWorkspaceContext.getUnique();\r\n\t\tif (!unique) throw new Error('Unique is missing');\r\n\r\n\t\tconst entityType = this.#documentWorkspaceContext.getEntityType();\r\n\t\tif (!entityType) throw new Error('Entity type is missing');\r\n\r\n\t\tconst { options, selected } = await this.#determineVariantOptions();\r\n\r\n\t\tconst modalManagerContext = await this.getContext(UMB_MODAL_MANAGER_CONTEXT);\r\n\t\tconst result = await modalManagerContext\r\n\t\t\t.open(this, UMB_DOCUMENT_SCHEDULE_MODAL, {\r\n\t\t\t\tdata: {\r\n\t\t\t\t\toptions,\r\n\t\t\t\t\tactiveVariants: selected,\r\n\t\t\t\t\tpickableFilter: this.#publishableVariantsFilter,\r\n\t\t\t\t\tprevalues: options.map((option) => ({\r\n\t\t\t\t\t\tunique: option.unique,\r\n\t\t\t\t\t\tschedule: {\r\n\t\t\t\t\t\t\tpublishTime: option.variant?.scheduledPublishDate,\r\n\t\t\t\t\t\t\tunpublishTime: option.variant?.scheduledUnpublishDate,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t})),\r\n\t\t\t\t},\r\n\t\t\t})\r\n\t\t\t.onSubmit()\r\n\t\t\t.catch(() => undefined);\r\n\r\n\t\tif (!result?.selection.length) return;\r\n\r\n\t\t// Map to the correct format for the API (UmbDocumentVariantPublishModel)\r\n\t\tconst variants =\r\n\t\t\tresult?.selection.map<UmbDocumentVariantPublishModel>((x) => ({\r\n\t\t\t\tvariantId: UmbVariantId.FromString(x.unique),\r\n\t\t\t\tschedule: {\r\n\t\t\t\t\tpublishTime: this.#convertToDateTimeOffset(x.schedule?.publishTime),\r\n\t\t\t\t\tunpublishTime: this.#convertToDateTimeOffset(x.schedule?.unpublishTime),\r\n\t\t\t\t},\r\n\t\t\t})) ?? [];\r\n\r\n\t\tif (!variants.length) return;\r\n\r\n\t\tconst variantIds = variants.map((x) => x.variantId);\r\n\t\tconst saveData = await this.#documentWorkspaceContext.constructSaveData(variantIds);\r\n\t\tawait this.#documentWorkspaceContext.runMandatoryValidationForSaveData(saveData);\r\n\t\tawait this.#documentWorkspaceContext.askServerToValidate(saveData, variantIds);\r\n\r\n\t\t// TODO: Only validate the specified selection.. [NL]\r\n\t\treturn this.#documentWorkspaceContext.validateAndSubmit(\r\n\t\t\tasync () => {\r\n\t\t\t\tif (!this.#documentWorkspaceContext) {\r\n\t\t\t\t\tthrow new Error('Document workspace context is missing');\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Save the document before scheduling\r\n\t\t\t\tawait this.#documentWorkspaceContext.performCreateOrUpdate(variantIds, saveData);\r\n\r\n\t\t\t\t// Schedule the document\r\n\t\t\t\tconst { error } = await this.#publishingRepository.publish(unique, variants);\r\n\t\t\t\tif (error) {\r\n\t\t\t\t\treturn Promise.reject(error);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst notification = { data: { message: this.#localize.term('speechBubbles_editContentScheduledSavedText') } };\r\n\t\t\t\tthis.#notificationContext?.peek('positive', notification);\r\n\r\n\t\t\t\t// reload the document so all states are updated after the publish operation\r\n\t\t\t\tawait this.#documentWorkspaceContext.reload();\r\n\t\t\t\tthis.#loadAndProcessLastPublished();\r\n\r\n\t\t\t\t// request reload of this entity\r\n\t\t\t\tconst structureEvent = new UmbRequestReloadStructureForEntityEvent({ entityType, unique });\r\n\t\t\t\tthis.#eventContext?.dispatchEvent(structureEvent);\r\n\t\t\t},\r\n\t\t\tasync () => {\r\n\t\t\t\tconst notificationContext = await this.getContext(UMB_NOTIFICATION_CONTEXT);\r\n\t\t\t\tnotificationContext.peek('danger', {\r\n\t\t\t\t\tdata: { message: this.#localize.term('speechBubbles_editContentScheduledNotSavedText') },\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn Promise.reject();\r\n\t\t\t},\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Convert a date string to a server time string in ISO format, example: 2021-01-01T12:00:00.000+00:00.\r\n\t * The input must be a valid date string, otherwise it will return null.\r\n\t * The output matches the DateTimeOffset format in C#.\r\n\t */\r\n\t#convertToDateTimeOffset(dateString: string | null | undefined) {\r\n\t\tif (!dateString || dateString.length === 0) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tconst date = new Date(dateString);\r\n\r\n\t\tif (isNaN(date.getTime())) {\r\n\t\t\tconsole.warn(`[Schedule]: Invalid date: ${dateString}`);\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\t// Convert the date to UTC time in ISO format before sending it to the server\r\n\t\treturn date.toISOString();\r\n\t}\r\n\r\n\t/**\r\n\t * Publish the document with descendants\r\n\t * @returns {Promise<void>}\r\n\t * @memberof UmbDocumentPublishingWorkspaceContext\r\n\t */\r\n\tpublic async publishWithDescendants(): Promise<void> {\r\n\t\tawait this.#init;\r\n\t\tif (!this.#documentWorkspaceContext) throw new Error('Document workspace context is missing');\r\n\r\n\t\tconst unique = this.#documentWorkspaceContext.getUnique();\r\n\t\tif (!unique) throw new Error('Unique is missing');\r\n\r\n\t\tconst entityType = this.#documentWorkspaceContext.getEntityType();\r\n\t\tif (!entityType) throw new Error('Entity type is missing');\r\n\r\n\t\tconst { options, selected } = await this.#determineVariantOptions();\r\n\r\n\t\tconst modalManagerContext = await this.getContext(UMB_MODAL_MANAGER_CONTEXT);\r\n\t\tconst result = await modalManagerContext\r\n\t\t\t.open(this, UMB_DOCUMENT_PUBLISH_WITH_DESCENDANTS_MODAL, {\r\n\t\t\t\tdata: {\r\n\t\t\t\t\toptions,\r\n\t\t\t\t\tpickableFilter: this.#publishableVariantsFilter,\r\n\t\t\t\t},\r\n\t\t\t\tvalue: { selection: selected },\r\n\t\t\t})\r\n\t\t\t.onSubmit()\r\n\t\t\t.catch(() => undefined);\r\n\r\n\t\tif (!result?.selection.length) return;\r\n\r\n\t\t// Map to variantIds\r\n\t\tconst variantIds = result?.selection.map((x) => UmbVariantId.FromString(x)) ?? [];\r\n\r\n\t\tif (!variantIds.length) return;\r\n\r\n\t\tconst { error } = await this.#publishingRepository.publishWithDescendants(\r\n\t\t\tunique,\r\n\t\t\tvariantIds,\r\n\t\t\tresult.includeUnpublishedDescendants ?? false,\r\n\t\t);\r\n\r\n\t\tif (!error) {\r\n\t\t\t// reload the document so all states are updated after the publish operation\r\n\t\t\tawait this.#documentWorkspaceContext.reload();\r\n\t\t\tthis.#loadAndProcessLastPublished();\r\n\r\n\t\t\t// request reload of this entity\r\n\t\t\tconst structureEvent = new UmbRequestReloadStructureForEntityEvent({ entityType, unique });\r\n\t\t\tthis.#eventContext?.dispatchEvent(structureEvent);\r\n\r\n\t\t\t// request reload of the children\r\n\t\t\tconst childrenEvent = new UmbRequestReloadChildrenOfEntityEvent({ entityType, unique });\r\n\t\t\tthis.#eventContext?.dispatchEvent(childrenEvent);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Unpublish the document\r\n\t * @returns {Promise<void>}\r\n\t * @memberof UmbDocumentPublishingWorkspaceContext\r\n\t */\r\n\tpublic async unpublish(): Promise<void> {\r\n\t\tawait this.#init;\r\n\t\tif (!this.#documentWorkspaceContext) throw new Error('Document workspace context is missing');\r\n\r\n\t\tconst unique = this.#documentWorkspaceContext.getUnique();\r\n\t\tif (!unique) throw new Error('Unique is missing');\r\n\r\n\t\tconst entityType = this.#documentWorkspaceContext.getEntityType();\r\n\t\tif (!entityType) throw new Error('Entity type is missing');\r\n\r\n\t\t// TODO: remove meta\r\n\t\tnew UmbUnpublishDocumentEntityAction(this, { unique, entityType, meta: {} as never }).execute();\r\n\t}\r\n\r\n\tasync #handleSaveAndPublish() {\r\n\t\tawait this.#init;\r\n\t\tif (!this.#documentWorkspaceContext) throw new Error('Document workspace context is missing');\r\n\r\n\t\tconst unique = this.#documentWorkspaceContext.getUnique();\r\n\t\tif (!unique) throw new Error('Unique is missing');\r\n\r\n\t\tlet variantIds: Array<UmbVariantId> = [];\r\n\r\n\t\tconst { options, selected } = await this.#determineVariantOptions();\r\n\r\n\t\t// If there is only one variant, we don't need to open the modal.\r\n\t\tif (options.length === 0) {\r\n\t\t\tthrow new Error('No variants are available');\r\n\t\t} else if (options.length === 1) {\r\n\t\t\t// If only one option we will skip ahead and save the document with the only variant available:\r\n\t\t\tvariantIds.push(UmbVariantId.Create(options[0]));\r\n\t\t} else {\r\n\t\t\t// If there are multiple variants, we will open the modal to let the user pick which variants to publish.\r\n\t\t\tconst modalManagerContext = await this.getContext(UMB_MODAL_MANAGER_CONTEXT);\r\n\t\t\tconst result = await modalManagerContext\r\n\t\t\t\t.open(this, UMB_DOCUMENT_PUBLISH_MODAL, {\r\n\t\t\t\t\tdata: {\r\n\t\t\t\t\t\toptions,\r\n\t\t\t\t\t\tpickableFilter: this.#publishableVariantsFilter,\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: { selection: selected },\r\n\t\t\t\t})\r\n\t\t\t\t.onSubmit()\r\n\t\t\t\t.catch(() => undefined);\r\n\r\n\t\t\tif (!result?.selection.length || !unique) return;\r\n\r\n\t\t\tvariantIds = result?.selection.map((x) => UmbVariantId.FromString(x)) ?? [];\r\n\t\t}\r\n\r\n\t\tconst saveData = await this.#documentWorkspaceContext.constructSaveData(variantIds);\r\n\t\tawait this.#documentWorkspaceContext.runMandatoryValidationForSaveData(saveData, variantIds);\r\n\t\tawait this.#documentWorkspaceContext.askServerToValidate(saveData, variantIds);\r\n\r\n\t\t// TODO: Only validate the specified selection.. [NL]\r\n\t\treturn this.#documentWorkspaceContext.validateAndSubmit(\r\n\t\t\tasync () => {\r\n\t\t\t\treturn this.#performSaveAndPublish(variantIds, saveData);\r\n\t\t\t},\r\n\t\t\tasync () => {\r\n\t\t\t\t// If data of the selection is not valid Then just save:\r\n\t\t\t\tawait this.#documentWorkspaceContext!.performCreateOrUpdate(variantIds, saveData);\r\n\t\t\t\t// Notifying that the save was successful, but we did not publish, which is what we want to symbolize here. [NL]\r\n\t\t\t\tconst notificationContext = await this.getContext(UMB_NOTIFICATION_CONTEXT);\r\n\t\t\t\t// TODO: Get rid of the save notification.\r\n\t\t\t\tnotificationContext.peek('danger', {\r\n\t\t\t\t\tdata: { message: this.#localize.term('speechBubbles_editContentPublishedFailedByValidation') },\r\n\t\t\t\t});\r\n\t\t\t\t// Reject even thought the save was successful, but we did not publish, which is what we want to symbolize here. [NL]\r\n\t\t\t\treturn await Promise.reject();\r\n\t\t\t},\r\n\t\t);\r\n\t}\r\n\r\n\tasync #performSaveAndPublish(variantIds: Array<UmbVariantId>, saveData: UmbDocumentDetailModel): Promise<void> {\r\n\t\tawait this.#init;\r\n\t\tif (!this.#documentWorkspaceContext) throw new Error('Document workspace context is missing');\r\n\r\n\t\tconst unique = this.#documentWorkspaceContext.getUnique();\r\n\t\tif (!unique) throw new Error('Unique is missing');\r\n\r\n\t\tconst entityType = this.#documentWorkspaceContext.getEntityType();\r\n\t\tif (!entityType) throw new Error('Entity type is missing');\r\n\r\n\t\tawait this.#documentWorkspaceContext.performCreateOrUpdate(variantIds, saveData);\r\n\r\n\t\tconst { error } = await this.#publishingRepository.publish(\r\n\t\t\tunique,\r\n\t\t\tvariantIds.map((variantId) => ({ variantId })),\r\n\t\t);\r\n\r\n\t\tif (!error) {\r\n\t\t\tconst variants = saveData.variants.filter((v) => variantIds.some((id) => id.culture === v.culture));\r\n\t\t\tthis.#notificationContext?.peek('positive', {\r\n\t\t\t\tdata: {\r\n\t\t\t\t\theadline: this.#localize.term('speechBubbles_editContentPublishedHeader'),\r\n\t\t\t\t\tmessage: this.#localize.term(\r\n\t\t\t\t\t\t'speechBubbles_editVariantPublishedText',\r\n\t\t\t\t\t\tthis.#localize.list(variants.map((v) => v.culture ?? v.name)),\r\n\t\t\t\t\t),\r\n\t\t\t\t},\r\n\t\t\t});\r\n\r\n\t\t\t// reload the document so all states are updated after the publish operation\r\n\t\t\tawait this.#documentWorkspaceContext.reload();\r\n\t\t\tthis.#loadAndProcessLastPublished();\r\n\r\n\t\t\tconst event = new UmbRequestReloadStructureForEntityEvent({ unique, entityType });\r\n\t\t\tthis.#eventContext?.dispatchEvent(event);\r\n\t\t}\r\n\t}\r\n\r\n\t#publishableVariantsFilter = (option: UmbDocumentVariantOptionModel) => {\r\n\t\tconst readOnlyCultures =\r\n\t\t\tthis.#documentWorkspaceContext?.readOnlyState.getStates().map((s) => s.variantId.culture) ?? [];\r\n\t\treturn readOnlyCultures.includes(option.culture) === false;\r\n\t};\r\n\r\n\tasync #determineVariantOptions(): Promise<{\r\n\t\toptions: UmbDocumentVariantOptionModel[];\r\n\t\tselected: string[];\r\n\t}> {\r\n\t\tawait this.#init;\r\n\t\tif (!this.#documentWorkspaceContext) throw new Error('Document workspace context is missing');\r\n\r\n\t\tconst options = await firstValueFrom(this.#documentWorkspaceContext.variantOptions);\r\n\r\n\t\t// TODO: this is a temporary copy of the content-detail workspace context method.\r\n\t\t// we need to implement custom selection that makes sense for each the publishing modal.\r\n\t\tlet selected = this.#getChangedVariantsSelection();\r\n\r\n\t\t// Selected can contain entries that are not part of the options, therefor the modal filters selection based on options.\r\n\t\tselected = selected.filter((x) => options.some((o) => o.unique === x));\r\n\r\n\t\t// Filter out read-only variants\r\n\t\t// TODO: This would not work with segments, as the 'selected'-array is an array of strings, not UmbVariantId's. [NL]\r\n\t\t// Please have a look at the implementation in the content-detail workspace context, as that one compares variantIds. [NL]\r\n\t\tconst readOnlyCultures = this.#documentWorkspaceContext.readOnlyState.getStates().map((s) => s.variantId.culture);\r\n\t\tselected = selected.filter((x) => readOnlyCultures.includes(x) === false);\r\n\r\n\t\treturn {\r\n\t\t\toptions,\r\n\t\t\tselected,\r\n\t\t};\r\n\t}\r\n\r\n\t#getChangedVariantsSelection() {\r\n\t\tif (!this.#documentWorkspaceContext) throw new Error('Document workspace context is missing');\r\n\t\tconst activeVariants = this.#documentWorkspaceContext.splitView\r\n\t\t\t.getActiveVariants()\r\n\t\t\t.map((activeVariant) => UmbVariantId.Create(activeVariant).toString());\r\n\t\tconst changedVariants = this.#documentWorkspaceContext.getChangedVariants().map((x) => x.toString());\r\n\t\tconst selection = [...activeVariants, ...changedVariants];\r\n\t\treturn [...new Set(selection)];\r\n\t}\r\n\r\n\tasync #initPendingChanges() {\r\n\t\tif (!this.#documentWorkspaceContext) throw new Error('Document workspace context is missing');\r\n\t\tthis.observe(\r\n\t\t\tobserveMultiple([this.#documentWorkspaceContext.unique, this.#documentWorkspaceContext.isNew]),\r\n\t\t\t([unique, isNew]) => {\r\n\t\t\t\t// We have loaded in a new document, so we need to clear the states\r\n\t\t\t\tif (unique !== this.#currentUnique) {\r\n\t\t\t\t\tthis.#clear();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.#currentUnique = unique;\r\n\r\n\t\t\t\tif (isNew === false && unique) {\r\n\t\t\t\t\tthis.#loadAndProcessLastPublished();\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'uniqueObserver',\r\n\t\t);\r\n\r\n\t\tthis.observe(\r\n\t\t\tthis.#documentWorkspaceContext.persistedData,\r\n\t\t\t() => this.#processPendingChanges(),\r\n\t\t\t'umbPersistedDataObserver',\r\n\t\t);\r\n\t}\r\n\r\n\t#hasPublishedVariant() {\r\n\t\tconst variants = this.#documentWorkspaceContext?.getVariants();\r\n\t\treturn (\r\n\t\t\tvariants?.some(\r\n\t\t\t\t(variant) =>\r\n\t\t\t\t\tvariant.state === DocumentVariantStateModel.PUBLISHED ||\r\n\t\t\t\t\tvariant.state === DocumentVariantStateModel.PUBLISHED_PENDING_CHANGES,\r\n\t\t\t) ?? false\r\n\t\t);\r\n\t}\r\n\r\n\tasync #loadAndProcessLastPublished() {\r\n\t\tif (!this.#documentWorkspaceContext) throw new Error('Document workspace context is missing');\r\n\r\n\t\t// No need to check pending changes for new documents\r\n\t\tif (this.#documentWorkspaceContext.getIsNew()) return;\r\n\r\n\t\tconst unique = this.#documentWorkspaceContext.getUnique();\r\n\t\tif (!unique) throw new Error('Unique is missing');\r\n\r\n\t\t// Only load the published data if the document is already published or has been published before\r\n\t\tconst hasPublishedVariant = this.#hasPublishedVariant();\r\n\t\tif (!hasPublishedVariant) return;\r\n\r\n\t\tconst { data } = await this.#publishingRepository.published(unique);\r\n\t\tthis.#publishedDocumentData = data;\r\n\t\tthis.#processPendingChanges();\r\n\t}\r\n\r\n\t#processPendingChanges() {\r\n\t\tif (!this.#documentWorkspaceContext) throw new Error('Document workspace context is missing');\r\n\r\n\t\tconst persistedData = this.#documentWorkspaceContext.getPersistedData();\r\n\t\tconst publishedData = this.#publishedDocumentData;\r\n\t\tif (!persistedData || !publishedData) return;\r\n\r\n\t\tthis.publishedPendingChanges.process({ persistedData, publishedData });\r\n\t}\r\n\r\n\t#clear() {\r\n\t\tthis.#publishedDocumentData = undefined;\r\n\t\tthis.publishedPendingChanges.clear();\r\n\t}\r\n}\r\n\r\nexport { UmbDocumentPublishingWorkspaceContext as api };\r\n"],"names":["UmbDocumentPublishedPendingChangesManager","UmbControllerBase","#variantsWithChanges","UmbArrayState","x","#cleanVariantForComparison","variant","args","pendingChangesPromises","UmbVariantId","variantId","mergedData","UmbMergeContentVariantDataController","mergedDataClone","publishedDataClone","jsonStringComparison","variantsWithPendingChanges","UmbDocumentPublishingWorkspaceContext","UmbContextBase","host","UMB_DOCUMENT_PUBLISHING_WORKSPACE_CONTEXT","#publishingRepository","UmbDocumentPublishingRepository","#localize","UmbLocalizationController","#publishableVariantsFilter","option","#documentWorkspaceContext","#init","UMB_DOCUMENT_WORKSPACE_CONTEXT","context","#initPendingChanges","UMB_ACTION_EVENT_CONTEXT","#eventContext","UMB_NOTIFICATION_CONTEXT","#notificationContext","#publishedDocumentData","#currentUnique","#handleSaveAndPublish","unique","entityType","options","selected","#determineVariantOptions","result","UMB_MODAL_MANAGER_CONTEXT","UMB_DOCUMENT_SCHEDULE_MODAL","variants","#convertToDateTimeOffset","variantIds","saveData","error","notification","#loadAndProcessLastPublished","structureEvent","UmbRequestReloadStructureForEntityEvent","dateString","date","UMB_DOCUMENT_PUBLISH_WITH_DESCENDANTS_MODAL","childrenEvent","UmbRequestReloadChildrenOfEntityEvent","UmbUnpublishDocumentEntityAction","UMB_DOCUMENT_PUBLISH_MODAL","#performSaveAndPublish","v","id","event","firstValueFrom","#getChangedVariantsSelection","o","readOnlyCultures","activeVariants","activeVariant","changedVariants","selection","observeMultiple","isNew","#clear","#processPendingChanges","#hasPublishedVariant","DocumentVariantStateModel","data","persistedData","publishedData"],"mappings":"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"}