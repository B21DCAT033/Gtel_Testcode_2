{"version":3,"file":"duplicate-to.repository-BVuLjDxm.js","sources":["../../../src/packages/documents/documents/entity-bulk-actions/duplicate-to/repository/duplicate-to.repository.ts"],"sourcesContent":["import { UmbDuplicateDocumentServerDataSource } from '../../../entity-actions/duplicate/repository/document-duplicate.server.data-source.js';\r\nimport type { UmbBulkDuplicateToDocumentRequestArgs } from './types.js';\r\nimport { UmbRepositoryBase } from '@umbraco-cms/backoffice/repository';\r\nimport { UMB_NOTIFICATION_CONTEXT } from '@umbraco-cms/backoffice/notification';\r\nimport type { UmbBulkDuplicateToRepository } from '@umbraco-cms/backoffice/entity-bulk-action';\r\nimport type { UmbRepositoryErrorResponse } from '@umbraco-cms/backoffice/repository';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\n\r\nexport class UmbBulkDuplicateToDocumentRepository extends UmbRepositoryBase implements UmbBulkDuplicateToRepository {\r\n\t#duplicateSource = new UmbDuplicateDocumentServerDataSource(this);\r\n\t#notificationContext?: typeof UMB_NOTIFICATION_CONTEXT.TYPE;\r\n\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host);\r\n\r\n\t\tthis.consumeContext(UMB_NOTIFICATION_CONTEXT, (notificationContext) => {\r\n\t\t\tthis.#notificationContext = notificationContext;\r\n\t\t});\r\n\t}\r\n\r\n\tasync requestBulkDuplicateTo(args: UmbBulkDuplicateToDocumentRequestArgs): Promise<UmbRepositoryErrorResponse> {\r\n\t\tlet count = 0;\r\n\r\n\t\tfor (const unique of args.uniques) {\r\n\t\t\tconst { error } = await this.#duplicateSource.duplicate({\r\n\t\t\t\tunique,\r\n\t\t\t\tdestination: args.destination,\r\n\t\t\t\trelateToOriginal: args.relateToOriginal,\r\n\t\t\t\tincludeDescendants: args.includeDescendants,\r\n\t\t\t});\r\n\r\n\t\t\tif (error) {\r\n\t\t\t\tconst notification = { data: { message: error.message } };\r\n\t\t\t\tthis.#notificationContext?.peek('danger', notification);\r\n\t\t\t} else {\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (count > 0) {\r\n\t\t\tconst notification = { data: { message: `Duplicated ${count} ${count === 1 ? 'document' : 'documents'}` } };\r\n\t\t\tthis.#notificationContext?.peek('positive', notification);\r\n\t\t}\r\n\r\n\t\treturn {};\r\n\t}\r\n}\r\n\r\nexport { UmbBulkDuplicateToDocumentRepository as api };\r\n"],"names":["UmbBulkDuplicateToDocumentRepository","UmbRepositoryBase","#duplicateSource","UmbDuplicateDocumentServerDataSource","#notificationContext","host","UMB_NOTIFICATION_CONTEXT","notificationContext","args","count","unique","error","notification"],"mappings":";;;AAQO,MAAMA,UAA6CC,EAA0D;AAAA,EACnHC,KAAmB,IAAIC,EAAqC,IAAI;AAAA,EAChEC;AAAA,EAEA,YAAYC,GAAyB;AACpC,UAAMA,CAAI,GAEL,KAAA,eAAeC,GAA0B,CAACC,MAAwB;AACtE,WAAKH,KAAuBG;AAAA,IAAA,CAC5B;AAAA,EAAA;AAAA,EAGF,MAAM,uBAAuBC,GAAkF;AAC9G,QAAIC,IAAQ;AAED,eAAAC,KAAUF,EAAK,SAAS;AAClC,YAAM,EAAE,OAAAG,EAAM,IAAI,MAAM,KAAKT,GAAiB,UAAU;AAAA,QACvD,QAAAQ;AAAA,QACA,aAAaF,EAAK;AAAA,QAClB,kBAAkBA,EAAK;AAAA,QACvB,oBAAoBA,EAAK;AAAA,MAAA,CACzB;AAED,UAAIG,GAAO;AACV,cAAMC,IAAe,EAAE,MAAM,EAAE,SAASD,EAAM,UAAU;AACnD,aAAAP,IAAsB,KAAK,UAAUQ,CAAY;AAAA,MAAA;AAEtD,QAAAH;AAAA,IACD;AAGD,QAAIA,IAAQ,GAAG;AACd,YAAMG,IAAe,EAAE,MAAM,EAAE,SAAS,cAAcH,CAAK,IAAIA,MAAU,IAAI,aAAa,WAAW,KAAK;AACrG,WAAAL,IAAsB,KAAK,YAAYQ,CAAY;AAAA,IAAA;AAGzD,WAAO,CAAC;AAAA,EAAA;AAEV;"}