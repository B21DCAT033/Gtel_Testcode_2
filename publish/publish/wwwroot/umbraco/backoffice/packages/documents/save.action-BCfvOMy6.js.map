{"version":3,"file":"save.action-BCfvOMy6.js","sources":["../../../src/packages/documents/documents/workspace/actions/save.action.ts"],"sourcesContent":["import type { UmbDocumentVariantModel } from '../../types.js';\r\nimport { UMB_DOCUMENT_WORKSPACE_CONTEXT } from '../document-workspace.context-token.js';\r\nimport type UmbDocumentWorkspaceContext from '../document-workspace.context.js';\r\nimport type { UmbVariantState } from '@umbraco-cms/backoffice/utils';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbVariantId } from '@umbraco-cms/backoffice/variant';\r\nimport {\r\n\tUmbSubmitWorkspaceAction,\r\n\ttype MetaWorkspaceAction,\r\n\ttype UmbSubmitWorkspaceActionArgs,\r\n\ttype UmbWorkspaceActionDefaultKind,\r\n} from '@umbraco-cms/backoffice/workspace';\r\n\r\nexport class UmbDocumentSaveWorkspaceAction\r\n\textends UmbSubmitWorkspaceAction<MetaWorkspaceAction, UmbDocumentWorkspaceContext>\r\n\timplements UmbWorkspaceActionDefaultKind<MetaWorkspaceAction>\r\n{\r\n\t#variants: Array<UmbDocumentVariantModel> = [];\r\n\t#readOnlyStates: Array<UmbVariantState> = [];\r\n\r\n\tconstructor(host: UmbControllerHost, args: UmbSubmitWorkspaceActionArgs<MetaWorkspaceAction>) {\r\n\t\tsuper(host, { workspaceContextToken: UMB_DOCUMENT_WORKSPACE_CONTEXT, ...args });\r\n\t}\r\n\r\n\tasync hasAdditionalOptions() {\r\n\t\tawait this._retrieveWorkspaceContext;\r\n\t\tconst variantOptions = await this.observe(this._workspaceContext!.variantOptions).asPromise();\r\n\t\treturn variantOptions?.length > 1;\r\n\t}\r\n\r\n\toverride _gotWorkspaceContext() {\r\n\t\tsuper._gotWorkspaceContext();\r\n\t\tthis.#observeVariants();\r\n\t\tthis.#observeReadOnlyStates();\r\n\t}\r\n\r\n\t#observeVariants() {\r\n\t\tthis.observe(\r\n\t\t\tthis._workspaceContext?.variants,\r\n\t\t\t(variants) => {\r\n\t\t\t\tthis.#variants = variants ?? [];\r\n\t\t\t\tthis.#check();\r\n\t\t\t},\r\n\t\t\t'saveWorkspaceActionVariantsObserver',\r\n\t\t);\r\n\t}\r\n\r\n\t#observeReadOnlyStates() {\r\n\t\tthis.observe(\r\n\t\t\tthis._workspaceContext?.readOnlyState.states,\r\n\t\t\t(readOnlyStates) => {\r\n\t\t\t\tthis.#readOnlyStates = readOnlyStates ?? [];\r\n\t\t\t\tthis.#check();\r\n\t\t\t},\r\n\t\t\t'saveWorkspaceActionReadOnlyStatesObserver',\r\n\t\t);\r\n\t}\r\n\r\n\t#check() {\r\n\t\tconst allVariantsAreReadOnly = this.#variants.every((variant) => {\r\n\t\t\tconst variantId = new UmbVariantId(variant.culture, variant.segment);\r\n\t\t\treturn this.#readOnlyStates.some((state) => state.variantId.equal(variantId));\r\n\t\t});\r\n\r\n\t\treturn allVariantsAreReadOnly ? this.disable() : this.enable();\r\n\t}\r\n}\r\n\r\nexport { UmbDocumentSaveWorkspaceAction as api };\r\n"],"names":["UmbDocumentSaveWorkspaceAction","UmbSubmitWorkspaceAction","#variants","#readOnlyStates","host","args","UMB_DOCUMENT_WORKSPACE_CONTEXT","#observeVariants","#observeReadOnlyStates","variants","#check","readOnlyStates","variant","variantId","UmbVariantId","state"],"mappings":";;;AAaO,MAAMA,UACJC,EAET;AAAA,EACCC,KAA4C,CAAC;AAAA,EAC7CC,KAA0C,CAAC;AAAA,EAE3C,YAAYC,GAAyBC,GAAyD;AAC7F,UAAMD,GAAM,EAAE,uBAAuBE,GAAgC,GAAGD,GAAM;AAAA,EAAA;AAAA,EAG/E,MAAM,uBAAuB;AAC5B,iBAAM,KAAK,4BACY,MAAM,KAAK,QAAQ,KAAK,kBAAmB,cAAc,EAAE,UAAU,IACrE,SAAS;AAAA,EAAA;AAAA,EAGxB,uBAAuB;AAC/B,UAAM,qBAAqB,GAC3B,KAAKE,GAAiB,GACtB,KAAKC,GAAuB;AAAA,EAAA;AAAA,EAG7BD,KAAmB;AACb,SAAA;AAAA,MACJ,KAAK,mBAAmB;AAAA,MACxB,CAACE,MAAa;AACR,aAAAP,KAAYO,KAAY,CAAC,GAC9B,KAAKC,GAAO;AAAA,MACb;AAAA,MACA;AAAA,IACD;AAAA,EAAA;AAAA,EAGDF,KAAyB;AACnB,SAAA;AAAA,MACJ,KAAK,mBAAmB,cAAc;AAAA,MACtC,CAACG,MAAmB;AACd,aAAAR,KAAkBQ,KAAkB,CAAC,GAC1C,KAAKD,GAAO;AAAA,MACb;AAAA,MACA;AAAA,IACD;AAAA,EAAA;AAAA,EAGDA,KAAS;AAMR,WAL+B,KAAKR,GAAU,MAAM,CAACU,MAAY;AAChE,YAAMC,IAAY,IAAIC,EAAaF,EAAQ,SAASA,EAAQ,OAAO;AAC5D,aAAA,KAAKT,GAAgB,KAAK,CAACY,MAAUA,EAAM,UAAU,MAAMF,CAAS,CAAC;AAAA,IAAA,CAC5E,IAE+B,KAAK,QAAQ,IAAI,KAAK,OAAO;AAAA,EAAA;AAE/D;"}