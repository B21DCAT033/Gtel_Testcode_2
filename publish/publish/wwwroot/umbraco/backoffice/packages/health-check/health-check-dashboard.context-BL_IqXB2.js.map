{"version":3,"file":"health-check-dashboard.context-BL_IqXB2.js","sources":["../../../src/packages/health-check/health-check.context.ts","../../../src/packages/health-check/health-check-dashboard.context.ts"],"sourcesContent":["import type {\r\n\tHealthCheckGroupPresentationModel,\r\n\tHealthCheckGroupWithResultResponseModel,\r\n} from '@umbraco-cms/backoffice/external/backend-api';\r\nimport { HealthCheckService } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport { tryExecuteAndNotify } from '@umbraco-cms/backoffice/resources';\r\nimport type { UmbApi } from '@umbraco-cms/backoffice/extension-api';\r\nimport { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\nimport { UmbBasicState } from '@umbraco-cms/backoffice/observable-api';\r\n\r\n// TODO: Check whats up with this code, this is not a context, this is a controller... [NL]\r\nexport class UmbHealthCheckContext extends UmbControllerBase implements UmbApi {\r\n\t#checks = new UmbBasicState<HealthCheckGroupPresentationModel | undefined>(undefined);\r\n\tpublic readonly checks = this.#checks.asObservable();\r\n\r\n\t#results = new UmbBasicState<HealthCheckGroupWithResultResponseModel | undefined>(undefined);\r\n\tpublic readonly results = this.#results.asObservable();\r\n\r\n\tasync getGroupChecks(name: string) {\r\n\t\tconst { data } = await tryExecuteAndNotify(this, HealthCheckService.getHealthCheckGroupByName({ name }));\r\n\r\n\t\tif (data) {\r\n\t\t\tthis.#checks.setValue(data);\r\n\t\t} else {\r\n\t\t\tthis.#checks.setValue(undefined);\r\n\t\t}\r\n\t}\r\n\r\n\tasync checkGroup(name: string) {\r\n\t\tconst { data } = await tryExecuteAndNotify(this, HealthCheckService.postHealthCheckGroupByNameCheck({ name }));\r\n\r\n\t\tif (data) {\r\n\t\t\tthis.#results.setValue(data);\r\n\t\t} else {\r\n\t\t\tthis.#results.setValue(undefined);\r\n\t\t}\r\n\t}\r\n\r\n\tstatic isInstanceLike(instance: unknown): instance is UmbHealthCheckContext {\r\n\t\treturn typeof instance === 'object' && (instance as UmbHealthCheckContext).results !== undefined;\r\n\t}\r\n}\r\n\r\nexport default UmbHealthCheckContext;\r\n","import { UmbHealthCheckContext } from './health-check.context.js';\r\nimport type { ManifestHealthCheck } from './health-check.extension.js';\r\nimport { UmbContextToken } from '@umbraco-cms/backoffice/context-api';\r\nimport { loadManifestApi } from '@umbraco-cms/backoffice/extension-api';\r\n\r\nexport class UmbHealthCheckDashboardContext {\r\n\t#manifests: ManifestHealthCheck[] = [];\r\n\tset manifests(value: ManifestHealthCheck[]) {\r\n\t\tthis.#manifests = value;\r\n\t\tthis.#registerApis();\r\n\t}\r\n\tget manifests() {\r\n\t\treturn this.#manifests;\r\n\t}\r\n\r\n\tpublic apis = new Map<string, UmbHealthCheckContext>();\r\n\tpublic host: HTMLElement;\r\n\r\n\tconstructor(host: HTMLElement) {\r\n\t\tthis.host = host;\r\n\t}\r\n\r\n\tasync checkAll() {\r\n\t\tfor (const [label, api] of this.apis.entries()) {\r\n\t\t\tawait api?.checkGroup?.(label);\r\n\t\t}\r\n\t}\r\n\r\n\t#registerApis() {\r\n\t\tthis.apis.clear();\r\n\t\tthis.#manifests.forEach(async (manifest) => {\r\n\t\t\tif (!manifest.api) return;\r\n\t\t\tconst api = await loadManifestApi(manifest.api);\r\n\t\t\tif (!api) return;\r\n\t\t\tconst apiInstance = new api(this.host);\r\n\t\t\tif (api && UmbHealthCheckContext.isInstanceLike(apiInstance)) this.apis.set(manifest.meta.label, apiInstance);\r\n\t\t});\r\n\t}\r\n}\r\n\r\nexport const UMB_HEALTHCHECK_DASHBOARD_CONTEXT = new UmbContextToken<UmbHealthCheckDashboardContext>(\r\n\t'UmbHealthCheckDashboardContext',\r\n);\r\n"],"names":["UmbHealthCheckContext","UmbControllerBase","#checks","UmbBasicState","#results","name","data","tryExecuteAndNotify","HealthCheckService","instance","UmbHealthCheckDashboardContext","host","#manifests","value","#registerApis","label","api","manifest","loadManifestApi","apiInstance","UMB_HEALTHCHECK_DASHBOARD_CONTEXT","UmbContextToken"],"mappings":";;;;;;AAWO,MAAMA,UAA8BC,EAAoC;AAAA,EAAxE,cAAA;AAAA,UAAA,GAAA,SAAA,GACI,KAAAC,KAAA,IAAIC,EAA6D,MAAS,GACpE,KAAA,SAAS,KAAKD,GAAQ,aAAa,GAExC,KAAAE,KAAA,IAAID,EAAmE,MAAS,GAC3E,KAAA,UAAU,KAAKC,GAAS,aAAa;AAAA,EAAA;AAAA,EAJrDF;AAAA,EAGAE;AAAA,EAGA,MAAM,eAAeC,GAAc;AAC5B,UAAA,EAAE,MAAAC,MAAS,MAAMC,EAAoB,MAAMC,EAAmB,0BAA0B,EAAE,MAAAH,EAAK,CAAC,CAAC;AAEvG,IAAIC,IACE,KAAAJ,GAAQ,SAASI,CAAI,IAErB,KAAAJ,GAAQ,SAAS,MAAS;AAAA,EAChC;AAAA,EAGD,MAAM,WAAWG,GAAc;AACxB,UAAA,EAAE,MAAAC,MAAS,MAAMC,EAAoB,MAAMC,EAAmB,gCAAgC,EAAE,MAAAH,EAAK,CAAC,CAAC;AAE7G,IAAIC,IACE,KAAAF,GAAS,SAASE,CAAI,IAEtB,KAAAF,GAAS,SAAS,MAAS;AAAA,EACjC;AAAA,EAGD,OAAO,eAAeK,GAAsD;AAC3E,WAAO,OAAOA,KAAa,YAAaA,EAAmC,YAAY;AAAA,EAAA;AAEzF;;;;;;ACpCO,MAAMC,EAA+B;AAAA,EAa3C,YAAYC,GAAmB;AAZ/B,SAAAC,KAAoC,CAAC,GAS9B,KAAA,2BAAW,IAAmC,GAIpD,KAAK,OAAOD;AAAA,EAAA;AAAA,EAbbC;AAAA,EACA,IAAI,UAAUC,GAA8B;AAC3C,SAAKD,KAAaC,GAClB,KAAKC,GAAc;AAAA,EAAA;AAAA,EAEpB,IAAI,YAAY;AACf,WAAO,KAAKF;AAAA,EAAA;AAAA,EAUb,MAAM,WAAW;AAChB,eAAW,CAACG,GAAOC,CAAG,KAAK,KAAK,KAAK;AAC9B,YAAAA,GAAK,aAAaD,CAAK;AAAA,EAC9B;AAAA,EAGDD,KAAgB;AACf,SAAK,KAAK,MAAM,GACX,KAAAF,GAAW,QAAQ,OAAOK,MAAa;AACvC,UAAA,CAACA,EAAS,IAAK;AACnB,YAAMD,IAAM,MAAME,EAAgBD,EAAS,GAAG;AAC9C,UAAI,CAACD,EAAK;AACV,YAAMG,IAAc,IAAIH,EAAI,KAAK,IAAI;AACjC,MAAAA,KAAOhB,EAAsB,eAAemB,CAAW,KAAQ,KAAA,KAAK,IAAIF,EAAS,KAAK,OAAOE,CAAW;AAAA,IAAA,CAC5G;AAAA,EAAA;AAEH;AAEO,MAAMC,IAAoC,IAAIC;AAAA,EACpD;AACD;"}