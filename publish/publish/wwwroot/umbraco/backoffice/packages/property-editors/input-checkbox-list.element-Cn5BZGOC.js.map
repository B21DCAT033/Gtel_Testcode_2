{"version":3,"file":"input-checkbox-list.element-Cn5BZGOC.js","sources":["../../../src/packages/property-editors/checkbox-list/components/input-checkbox-list/input-checkbox-list.element.ts"],"sourcesContent":["import { css, html, nothing, repeat, customElement, property, classMap } from '@umbraco-cms/backoffice/external/lit';\r\nimport { UUIFormControlMixin } from '@umbraco-cms/backoffice/external/uui';\r\nimport { UmbChangeEvent } from '@umbraco-cms/backoffice/event';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\nimport type { UUIBooleanInputEvent } from '@umbraco-cms/backoffice/external/uui';\r\n\r\nexport type UmbCheckboxListItem = { label: string; value: string; checked: boolean; invalid?: boolean };\r\n\r\n@customElement('umb-input-checkbox-list')\r\nexport class UmbInputCheckboxListElement extends UUIFormControlMixin(UmbLitElement, '') {\r\n\t@property({ attribute: false })\r\n\tpublic list: Array<UmbCheckboxListItem> = [];\r\n\r\n\t#selection: Array<string> = [];\r\n\t@property({ type: Array })\r\n\tpublic set selection(values: Array<string>) {\r\n\t\tthis.#selection = values;\r\n\t\tsuper.value = values.join(',');\r\n\t}\r\n\tpublic get selection(): Array<string> {\r\n\t\treturn this.#selection;\r\n\t}\r\n\r\n\t@property()\r\n\tpublic override set value(value: string) {\r\n\t\tthis.selection = value.split(',');\r\n\t}\r\n\tpublic override get value(): string {\r\n\t\treturn this.selection.join(',');\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the input to readonly mode, meaning value cannot be changed but still able to read and select its content.\r\n\t * @type {boolean}\r\n\t * @attr\r\n\t * @default false\r\n\t */\r\n\t@property({ type: Boolean, reflect: true })\r\n\treadonly = false;\r\n\r\n\tprotected override getFormElement() {\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\t#onChange(event: UUIBooleanInputEvent) {\r\n\t\tevent.stopPropagation();\r\n\t\tif (event.target.checked) this.selection = [...this.selection, event.target.value];\r\n\t\telse this.#removeFromSelection(this.selection.findIndex((value) => event.target.value === value));\r\n\r\n\t\tthis.dispatchEvent(new UmbChangeEvent());\r\n\t}\r\n\r\n\t#removeFromSelection(index: number) {\r\n\t\tif (index == -1) return;\r\n\t\tconst values = [...this.selection];\r\n\t\tvalues.splice(index, 1);\r\n\t\tthis.selection = values;\r\n\t}\r\n\r\n\toverride render() {\r\n\t\tif (!this.list) return nothing;\r\n\t\treturn html`\r\n\t\t\t<form>\r\n\t\t\t\t<uui-form @change=${this.#onChange}>\r\n\t\t\t\t\t${repeat(\r\n\t\t\t\t\t\tthis.list,\r\n\t\t\t\t\t\t(item) => item.value,\r\n\t\t\t\t\t\t(item) => this.#renderCheckbox(item),\r\n\t\t\t\t\t)}\r\n\t\t\t\t</uui-form>\r\n\t\t\t</form>\r\n\t\t`;\r\n\t}\r\n\r\n\t#renderCheckbox(item: (typeof this.list)[0]) {\r\n\t\treturn html`<uui-checkbox\r\n\t\t\tclass=${classMap({ invalid: !!item.invalid })}\r\n\t\t\t?checked=${item.checked}\r\n\t\t\tlabel=${item.label + (item.invalid ? ` (${this.localize.term('validation_legacyOption')})` : '')}\r\n\t\t\ttitle=${item.invalid ? this.localize.term('validation_legacyOptionDescription') : ''}\r\n\t\t\tvalue=${item.value}\r\n\t\t\t?readonly=${this.readonly}></uui-checkbox>`;\r\n\t}\r\n\r\n\tstatic override readonly styles = [\r\n\t\tcss`\r\n\t\t\tuui-checkbox {\r\n\t\t\t\twidth: 100%;\r\n\r\n\t\t\t\t&.invalid {\r\n\t\t\t\t\ttext-decoration: line-through;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\nexport default UmbInputCheckboxListElement;\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-input-checkbox-list': UmbInputCheckboxListElement;\r\n\t}\r\n}\r\n"],"names":["_selection","_UmbInputCheckboxListElement_instances","onChange_fn","removeFromSelection_fn","renderCheckbox_fn","UmbInputCheckboxListElement","UUIFormControlMixin","UmbLitElement","__privateAdd","values","__privateSet","__privateGet","value","html","__privateMethod","repeat","item","nothing","event","UmbChangeEvent","index","classMap","css","__decorateClass","property","customElement"],"mappings":";;;;;;;;;;wYAAAA,GAAAC,GAAAC,GAAAC,GAAAC;AASO,IAAMC,IAAN,cAA0CC,EAAoBC,GAAe,EAAE,EAAE;AAAA,EAAjF,cAAA;AAAA,UAAA,GAAA,SAAA,GAAAC,EAAA,MAAAP,CAAA,GAEN,KAAO,OAAmC,CAAC,GAE3CO,EAAA,MAAAR,GAA4B,EAAC,GAyBlB,KAAA,WAAA;AAAA,EAAA;AAAA,EAvBX,IAAW,UAAUS,GAAuB;AAC3C,IAAAC,EAAA,MAAKV,GAAaS,CAAA,GACZ,MAAA,QAAQA,EAAO,KAAK,GAAG;AAAA,EAAA;AAAA,EAE9B,IAAW,YAA2B;AACrC,WAAOE,EAAK,MAAAX,CAAA;AAAA,EAAA;AAAA,EAIb,IAAoB,MAAMY,GAAe;AACnC,SAAA,YAAYA,EAAM,MAAM,GAAG;AAAA,EAAA;AAAA,EAEjC,IAAoB,QAAgB;AAC5B,WAAA,KAAK,UAAU,KAAK,GAAG;AAAA,EAAA;AAAA,EAYZ,iBAAiB;AAAA,EAC5B;AAAA,EAkBC,SAAS;AACb,WAAC,KAAK,OACHC;AAAA;AAAA,wBAEeC,QAAKb,GAASC,CAAA,CAAA;AAAA,OAC/Ba;AAAA,MACD,KAAK;AAAA,MACL,CAACC,MAASA,EAAK;AAAA,MACf,CAACA,MAASF,EAAK,MAAAb,GAAAG,CAAA,EAAL,KAAqB,MAAAY,CAAA;AAAA,IAC/B,CAAA;AAAA;AAAA;AAAA,MARmBC;AAAA,EAQnB;AA2BN;AAlFCjB,IAAA,oBAAA,QAAA;AAJMC,IAAA,oBAAA,QAAA;AAmCNC,IAAS,SAACgB,GAA6B;AACtC,EAAAA,EAAM,gBAAgB,GAClBA,EAAM,OAAO,UAAc,KAAA,YAAY,CAAC,GAAG,KAAK,WAAWA,EAAM,OAAO,KAAK,IAC5EJ,EAAA,MAAKb,GAALE,CAAA,EAAA,KAAA,MAA0B,KAAK,UAAU,UAAU,CAACS,MAAUM,EAAM,OAAO,UAAUN,CAAK,CAAA,GAE1F,KAAA,cAAc,IAAIO,GAAgB;AACxC;AAEAhB,IAAoB,SAACiB,GAAe;AACnC,MAAIA,KAAS,GAAI;AACjB,QAAMX,IAAS,CAAC,GAAG,KAAK,SAAS;AAC1B,EAAAA,EAAA,OAAOW,GAAO,CAAC,GACtB,KAAK,YAAYX;AAClB;AAiBAL,IAAe,SAACY,GAA6B;AACrC,SAAAH;AAAA,WACEQ,EAAS,EAAE,SAAS,CAAC,CAACL,EAAK,QAAA,CAAS,CAAC;AAAA,cAClCA,EAAK,OAAO;AAAA,WACfA,EAAK,SAASA,EAAK,UAAU,KAAK,KAAK,SAAS,KAAK,yBAAyB,CAAC,MAAM,GAAG;AAAA,WACxFA,EAAK,UAAU,KAAK,SAAS,KAAK,oCAAoC,IAAI,EAAE;AAAA,WAC5EA,EAAK,KAAK;AAAA,eACN,KAAK,QAAQ;AAC3B;AAzEYX,EA2Ea,SAAS;AAAA,EACjCiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASD;AAnFOC,EAAA;AAAA,EADNC,EAAS,EAAE,WAAW,GAAO,CAAA;AAAA,GADlBnB,EAEL,WAAA,QAAA,CAAA;AAIIkB,EAAA;AAAA,EADVC,EAAS,EAAE,MAAM,MAAO,CAAA;AAAA,GALbnB,EAMD,WAAA,aAAA,CAAA;AASSkB,EAAA;AAAA,EADnBC,EAAS;AAAA,GAdEnB,EAeQ,WAAA,SAAA,CAAA;AAcpBkB,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,SAAS,SAAS,GAAM,CAAA;AAAA,GA5B9BnB,EA6BZ,WAAA,YAAA,CAAA;AA7BYA,IAANkB,EAAA;AAAA,EADNE,EAAc,yBAAyB;AAAA,GAC3BpB,CAAA;"}