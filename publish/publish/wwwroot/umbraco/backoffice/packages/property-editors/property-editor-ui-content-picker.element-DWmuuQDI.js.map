{"version":3,"file":"property-editor-ui-content-picker.element-DWmuuQDI.js","sources":["../../../src/packages/property-editors/content-picker/dynamic-root/repository/dynamic-root.server.data.ts","../../../src/packages/property-editors/content-picker/dynamic-root/repository/dynamic-root.repository.ts","../../../src/packages/property-editors/content-picker/property-editor-ui-content-picker.element.ts"],"sourcesContent":["import { DynamicRootService } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport { tryExecuteAndNotify } from '@umbraco-cms/backoffice/resources';\r\nimport type { DynamicRootRequestModel, DynamicRootResponseModel } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\n\r\n/**\r\n * UmbContentPickerDynamicRootServerDataSource\r\n * @class UmbContentPickerDynamicRootServerDataSource\r\n */\r\nexport class UmbContentPickerDynamicRootServerDataSource {\r\n\t#host: UmbControllerHost;\r\n\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tthis.#host = host;\r\n\t}\r\n\r\n\t/**\r\n\t * Get dynamic root\r\n\t * @param {DynamicRootRequestModel} args\r\n\t * @returns {*}  {(Promise<DynamicRootResponseModel | undefined>)}\r\n\t * @memberof UmbContentPickerDynamicRootServerDataSource\r\n\t */\r\n\tasync getRoot(args: DynamicRootRequestModel): Promise<DynamicRootResponseModel | undefined> {\r\n\t\tif (!args.context) throw new Error('Dynamic Root context is missing');\r\n\t\tif (!args.query) throw new Error('Dynamic Root query is missing');\r\n\r\n\t\tconst requestBody: DynamicRootRequestModel = {\r\n\t\t\tcontext: args.context,\r\n\t\t\tquery: args.query,\r\n\t\t};\r\n\r\n\t\tconst { data } = await tryExecuteAndNotify(this.#host, DynamicRootService.postDynamicRootQuery({ requestBody }));\r\n\r\n\t\treturn data;\r\n\t}\r\n}\r\n","import type { UmbContentPickerDynamicRoot } from '../../types.js';\r\nimport { UmbContentPickerDynamicRootServerDataSource } from './dynamic-root.server.data.js';\r\nimport { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport type { DynamicRootRequestModel } from '@umbraco-cms/backoffice/external/backend-api';\r\n\r\nconst GUID_EMPTY: string = '00000000-0000-0000-0000-000000000000';\r\n\r\n/**\r\n * UmbContentPickerDynamicRootRepository\r\n * @class UmbContentPickerDynamicRootRepository\r\n * @augments {UmbControllerBase}\r\n */\r\nexport class UmbContentPickerDynamicRootRepository extends UmbControllerBase {\r\n\t#dataSource: UmbContentPickerDynamicRootServerDataSource;\r\n\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host);\r\n\r\n\t\tthis.#dataSource = new UmbContentPickerDynamicRootServerDataSource(host);\r\n\t}\r\n\r\n\t/**\r\n\t * Request dynamic root\r\n\t * @param {UmbContentPickerDynamicRoot} query\r\n\t * @param {string} entityUnique\r\n\t * @param {string} [parentUnique]\r\n\t * @returns {*}\r\n\t * @memberof UmbContentPickerDynamicRootRepository\r\n\t */\r\n\tasync requestRoot(query: UmbContentPickerDynamicRoot, entityUnique: string, parentUnique?: string) {\r\n\t\tconst model: DynamicRootRequestModel = {\r\n\t\t\tcontext: {\r\n\t\t\t\tid: entityUnique,\r\n\t\t\t\tparent: { id: parentUnique ?? GUID_EMPTY },\r\n\t\t\t},\r\n\t\t\tquery: {\r\n\t\t\t\torigin: {\r\n\t\t\t\t\talias: query.originAlias,\r\n\t\t\t\t\tid: query.originKey,\r\n\t\t\t\t},\r\n\t\t\t\tsteps:\r\n\t\t\t\t\tquery.querySteps?.map((step) => {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talias: step.alias!,\r\n\t\t\t\t\t\t\tdocumentTypeIds: step.anyOfDocTypeKeys!,\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}) || [],\r\n\t\t\t},\r\n\t\t};\r\n\r\n\t\tconst result = await this.#dataSource.getRoot(model);\r\n\r\n\t\treturn result?.roots;\r\n\t}\r\n}\r\n","import { UmbContentPickerDynamicRootRepository } from './dynamic-root/repository/index.js';\r\nimport type { UmbInputContentElement } from './components/input-content/index.js';\r\nimport type { UmbContentPickerSource, UmbContentPickerSourceType } from './types.js';\r\nimport { html, customElement, property, state } from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\nimport { UmbFormControlMixin } from '@umbraco-cms/backoffice/validation';\r\nimport { UmbPropertyValueChangeEvent } from '@umbraco-cms/backoffice/property-editor';\r\nimport { UMB_DOCUMENT_ENTITY_TYPE } from '@umbraco-cms/backoffice/document';\r\nimport { UMB_MEDIA_ENTITY_TYPE } from '@umbraco-cms/backoffice/media';\r\nimport { UMB_MEMBER_ENTITY_TYPE } from '@umbraco-cms/backoffice/member';\r\nimport type {\r\n\tUmbPropertyEditorConfigCollection,\r\n\tUmbPropertyEditorUiElement,\r\n} from '@umbraco-cms/backoffice/property-editor';\r\nimport type { UmbTreeStartNode } from '@umbraco-cms/backoffice/tree';\r\n\r\n// import of local component\r\nimport './components/input-content/index.js';\r\n\r\ntype UmbContentPickerValueType = UmbInputContentElement['selection'];\r\n\r\nconst elementName = 'umb-property-editor-ui-content-picker';\r\n\r\n/**\r\n * @element umb-property-editor-ui-content-picker\r\n */\r\n@customElement(elementName)\r\nexport class UmbPropertyEditorUIContentPickerElement\r\n\textends UmbFormControlMixin<UmbContentPickerValueType | undefined, typeof UmbLitElement>(UmbLitElement, undefined)\r\n\timplements UmbPropertyEditorUiElement\r\n{\r\n\t@property({ type: Array })\r\n\tpublic override set value(value: UmbContentPickerValueType | undefined) {\r\n\t\tthis.#value = value;\r\n\t}\r\n\tpublic override get value(): UmbContentPickerValueType | undefined {\r\n\t\treturn this.#value;\r\n\t}\r\n\t#value?: UmbContentPickerValueType = [];\r\n\r\n\t/**\r\n\t * Sets the input to readonly mode, meaning value cannot be changed but still able to read and select its content.\r\n\t * @type {boolean}\r\n\t * @attr\r\n\t * @default false\r\n\t */\r\n\t@property({ type: Boolean, reflect: true })\r\n\treadonly = false;\r\n\r\n\t@state()\r\n\t_type: UmbContentPickerSource['type'] = 'content';\r\n\r\n\t@state()\r\n\t_min = 0;\r\n\r\n\t@state()\r\n\t_minMessage = '';\r\n\r\n\t@state()\r\n\t_max = Infinity;\r\n\r\n\t@state()\r\n\t_maxMessage = '';\r\n\r\n\t@state()\r\n\t_allowedContentTypeUniques?: string | null;\r\n\r\n\t@state()\r\n\t_showOpenButton?: boolean;\r\n\r\n\t@state()\r\n\t_rootUnique?: string | null;\r\n\r\n\t@state()\r\n\t_rootEntityType?: string;\r\n\r\n\t#dynamicRoot?: UmbContentPickerSource['dynamicRoot'];\r\n\t#dynamicRootRepository = new UmbContentPickerDynamicRootRepository(this);\r\n\r\n\t#entityTypeDictionary: { [type in UmbContentPickerSourceType]: string } = {\r\n\t\tcontent: UMB_DOCUMENT_ENTITY_TYPE,\r\n\t\tmedia: UMB_MEDIA_ENTITY_TYPE,\r\n\t\tmember: UMB_MEMBER_ENTITY_TYPE,\r\n\t};\r\n\r\n\tpublic set config(config: UmbPropertyEditorConfigCollection | undefined) {\r\n\t\tif (!config) return;\r\n\r\n\t\tconst startNode = config.getValueByAlias<UmbContentPickerSource>('startNode');\r\n\t\tif (startNode) {\r\n\t\t\tthis._type = startNode.type;\r\n\t\t\tthis._rootUnique = startNode.id;\r\n\t\t\tthis._rootEntityType = this.#entityTypeDictionary[startNode.type];\r\n\t\t\tthis.#dynamicRoot = startNode.dynamicRoot;\r\n\t\t}\r\n\r\n\t\tthis._min = this.#parseInt(config.getValueByAlias('minNumber'), 0);\r\n\t\tthis._max = this.#parseInt(config.getValueByAlias('maxNumber'), Infinity);\r\n\r\n\t\tthis._allowedContentTypeUniques = config.getValueByAlias('filter');\r\n\t\tthis._showOpenButton = config.getValueByAlias('showOpenButton');\r\n\r\n\t\tthis._minMessage = `${this.localize.term('validation_minCount')} ${this._min} ${this.localize.term('validation_items')}`;\r\n\t\tthis._maxMessage = `${this.localize.term('validation_maxCount')} ${this._max} ${this.localize.term('validation_itemsSelected')}`;\r\n\r\n\t\t// NOTE: Run validation immediately, to notify if the value is outside of min/max range. [LK]\r\n\t\tif (this._min > 0 || this._max < Infinity) {\r\n\t\t\tthis.checkValidity();\r\n\t\t}\r\n\t}\r\n\r\n\t#parseInt(value: unknown, fallback: number): number {\r\n\t\tconst num = Number(value);\r\n\t\treturn !isNaN(num) && num > 0 ? num : fallback;\r\n\t}\r\n\r\n\toverride firstUpdated() {\r\n\t\tthis.addFormControlElement(this.shadowRoot!.querySelector('umb-input-content')!);\r\n\t\tthis.#setPickerRootUnique();\r\n\r\n\t\tif (this._min && this._max && this._min > this._max) {\r\n\t\t\tconsole.warn(\r\n\t\t\t\t`Property (Content Picker) has been misconfigured, 'minNumber' is greater than 'maxNumber'. Please correct your data type configuration.`,\r\n\t\t\t\tthis,\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\toverride focus() {\r\n\t\treturn this.shadowRoot?.querySelector<UmbInputContentElement>('umb-input-content')?.focus();\r\n\t}\r\n\r\n\tasync #setPickerRootUnique() {\r\n\t\t// If we have a root unique value, we don't need to fetch it from the dynamic root\r\n\t\tif (this._rootUnique) return;\r\n\t\tif (!this.#dynamicRoot) return;\r\n\r\n\t\tconst menuStructureWorkspaceContext = (await this.getContext('UmbMenuStructureWorkspaceContext')) as any;\r\n\t\tconst structure = (await this.observe(menuStructureWorkspaceContext.structure, () => {})?.asPromise()) as any[];\r\n\t\tconst [parentUnique, unique] = structure?.slice(-2).map((x) => x.unique) ?? [];\r\n\r\n\t\tif (!unique) return;\r\n\r\n\t\tconst result = await this.#dynamicRootRepository.requestRoot(this.#dynamicRoot, unique, parentUnique);\r\n\t\tif (result && result.length > 0) {\r\n\t\t\tthis._rootUnique = result[0];\r\n\t\t}\r\n\t}\r\n\r\n\t#onChange(event: CustomEvent & { target: UmbInputContentElement }) {\r\n\t\tthis.value = event.target.selection;\r\n\t\tthis.dispatchEvent(new UmbPropertyValueChangeEvent());\r\n\t}\r\n\r\n\toverride render() {\r\n\t\tconst startNode: UmbTreeStartNode | undefined =\r\n\t\t\tthis._rootUnique && this._rootEntityType\r\n\t\t\t\t? { unique: this._rootUnique, entityType: this._rootEntityType }\r\n\t\t\t\t: undefined;\r\n\r\n\t\treturn html`\r\n\t\t\t<umb-input-content\r\n\t\t\t\t.selection=${this.value ?? []}\r\n\t\t\t\t.type=${this._type}\r\n\t\t\t\t.min=${this._min}\r\n\t\t\t\t.minMessage=${this._minMessage}\r\n\t\t\t\t.max=${this._max}\r\n\t\t\t\t.maxMessage=${this._maxMessage}\r\n\t\t\t\t.startNode=${startNode}\r\n\t\t\t\t.allowedContentTypeIds=${this._allowedContentTypeUniques ?? ''}\r\n\t\t\t\t?showOpenButton=${this._showOpenButton}\r\n\t\t\t\t?readonly=${this.readonly}\r\n\t\t\t\t@change=${this.#onChange}></umb-input-content>\r\n\t\t`;\r\n\t}\r\n}\r\n\r\nexport { UmbPropertyEditorUIContentPickerElement as element };\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t[elementName]: UmbPropertyEditorUIContentPickerElement;\r\n\t}\r\n}\r\n"],"names":["UmbContentPickerDynamicRootServerDataSource","#host","host","args","requestBody","data","tryExecuteAndNotify","DynamicRootService","GUID_EMPTY","UmbContentPickerDynamicRootRepository","UmbControllerBase","#dataSource","query","entityUnique","parentUnique","model","step","_value","_dynamicRoot","_dynamicRootRepository","_entityTypeDictionary","_UmbPropertyEditorUIContentPickerElement_instances","parseInt_fn","setPickerRootUnique_fn","onChange_fn","elementName","UmbPropertyEditorUIContentPickerElement","UmbFormControlMixin","UmbLitElement","__privateAdd","UMB_DOCUMENT_ENTITY_TYPE","UMB_MEDIA_ENTITY_TYPE","UMB_MEMBER_ENTITY_TYPE","value","__privateSet","__privateGet","config","startNode","__privateMethod","html","fallback","num","menuStructureWorkspaceContext","structure","unique","x","result","event","UmbPropertyValueChangeEvent","__decorateClass","property","state","customElement"],"mappings":";;;;;;;;;;;AASO,MAAMA,EAA4C;AAAA,EACxDC;AAAA,EAEA,YAAYC,GAAyB;AACpC,SAAKD,KAAQC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASd,MAAM,QAAQC,GAA8E;AAC3F,QAAI,CAACA,EAAK,QAAe,OAAA,IAAI,MAAM,iCAAiC;AACpE,QAAI,CAACA,EAAK,MAAa,OAAA,IAAI,MAAM,+BAA+B;AAEhE,UAAMC,IAAuC;AAAA,MAC5C,SAASD,EAAK;AAAA,MACd,OAAOA,EAAK;AAAA,IACb,GAEM,EAAE,MAAAE,EAAA,IAAS,MAAMC,EAAoB,KAAKL,IAAOM,EAAmB,qBAAqB,EAAE,aAAAH,EAAY,CAAC,CAAC;AAExG,WAAAC;AAAA,EAAA;AAET;AC7BA,MAAMG,IAAqB;AAOpB,MAAMC,UAA8CC,EAAkB;AAAA,EAC5EC;AAAA,EAEA,YAAYT,GAAyB;AACpC,UAAMA,CAAI,GAEL,KAAAS,KAAc,IAAIX,EAA4CE,CAAI;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWxE,MAAM,YAAYU,GAAoCC,GAAsBC,GAAuB;AAClG,UAAMC,IAAiC;AAAA,MACtC,SAAS;AAAA,QACR,IAAIF;AAAA,QACJ,QAAQ,EAAE,IAAIC,KAAgBN,EAAW;AAAA,MAC1C;AAAA,MACA,OAAO;AAAA,QACN,QAAQ;AAAA,UACP,OAAOI,EAAM;AAAA,UACb,IAAIA,EAAM;AAAA,QACX;AAAA,QACA,OACCA,EAAM,YAAY,IAAI,CAACI,OACf;AAAA,UACN,OAAOA,EAAK;AAAA,UACZ,iBAAiBA,EAAK;AAAA,QACvB,EACA,KAAK,CAAA;AAAA,MAAC;AAAA,IAEV;AAIA,YAFe,MAAM,KAAKL,GAAY,QAAQI,CAAK,IAEpC;AAAA,EAAA;AAEjB;;;;;;;wYCvDAE,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC;AAqBA,MAAMC,IAAc;AAMb,IAAMC,IAAN,cACEC,EAAiFC,GAAe,MAAS,EAElH;AAAA,EAHO,cAAA;AAAA,UAAA,GAAA,SAAA,GAAAC,EAAA,MAAAR,CAAA,GAWNQ,EAAA,MAAAZ,GAAqC,EAAC,GAS3B,KAAA,WAAA,IAG6B,KAAA,QAAA,WAGjC,KAAA,OAAA,GAGO,KAAA,cAAA,IAGP,KAAA,OAAA,OAGO,KAAA,cAAA,IAcdY,EAAA,MAAAX,CAAA,GACyBW,EAAA,MAAAV,GAAA,IAAIV,EAAsC,IAAI,CAAA,GAEGoB,EAAA,MAAAT,GAAA;AAAA,MACzE,SAASU;AAAA,MACT,OAAOC;AAAA,MACP,QAAQC;AAAA,IAAA,CACT;AAAA,EAAA;AAAA,EAnDA,IAAoB,MAAMC,GAA8C;AACvE,IAAAC,EAAA,MAAKjB,GAASgB,CAAA;AAAA,EAAA;AAAA,EAEf,IAAoB,QAA+C;AAClE,WAAOE,EAAK,MAAAlB,CAAA;AAAA,EAAA;AAAA,EAiDb,IAAW,OAAOmB,GAAuD;AACxE,QAAI,CAACA,EAAQ;AAEP,UAAAC,IAAYD,EAAO,gBAAwC,WAAW;AAC5E,IAAIC,MACH,KAAK,QAAQA,EAAU,MACvB,KAAK,cAAcA,EAAU,IAC7B,KAAK,kBAAkBF,EAAA,MAAKf,CAAsB,EAAAiB,EAAU,IAAI,GAChEH,EAAA,MAAKhB,GAAemB,EAAU,WAAA,IAG/B,KAAK,OAAOC,EAAK,MAAAjB,GAAAC,CAAA,EAAL,WAAec,EAAO,gBAAgB,WAAW,GAAG,CAAA,GAChE,KAAK,OAAOE,EAAK,MAAAjB,GAAAC,CAAA,EAAL,WAAec,EAAO,gBAAgB,WAAW,GAAG,KAAA,GAE3D,KAAA,6BAA6BA,EAAO,gBAAgB,QAAQ,GAC5D,KAAA,kBAAkBA,EAAO,gBAAgB,gBAAgB,GAE9D,KAAK,cAAc,GAAG,KAAK,SAAS,KAAK,qBAAqB,CAAC,IAAI,KAAK,IAAI,IAAI,KAAK,SAAS,KAAK,kBAAkB,CAAC,IACtH,KAAK,cAAc,GAAG,KAAK,SAAS,KAAK,qBAAqB,CAAC,IAAI,KAAK,IAAI,IAAI,KAAK,SAAS,KAAK,0BAA0B,CAAC,KAG1H,KAAK,OAAO,KAAK,KAAK,OAAO,UAChC,KAAK,cAAc;AAAA,EACpB;AAAA,EAQQ,eAAe;AACvB,SAAK,sBAAsB,KAAK,WAAY,cAAc,mBAAmB,CAAE,GAC/EE,EAAA,MAAKjB,GAALE,CAAA,EAAA,KAAA,IAAA,GAEI,KAAK,QAAQ,KAAK,QAAQ,KAAK,OAAO,KAAK,QACtC,QAAA;AAAA,MACP;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAAA,EAGQ,QAAQ;AAChB,WAAO,KAAK,YAAY,cAAsC,mBAAmB,GAAG,MAAM;AAAA,EAAA;AAAA,EAyBlF,SAAS;AACjB,UAAMc,IACL,KAAK,eAAe,KAAK,kBACtB,EAAE,QAAQ,KAAK,aAAa,YAAY,KAAK,gBAC7C,IAAA;AAEG,WAAAE;AAAA;AAAA,iBAEQ,KAAK,SAAS,CAAE,CAAA;AAAA,YACrB,KAAK,KAAK;AAAA,WACX,KAAK,IAAI;AAAA,kBACF,KAAK,WAAW;AAAA,WACvB,KAAK,IAAI;AAAA,kBACF,KAAK,WAAW;AAAA,iBACjBF,CAAS;AAAA,6BACG,KAAK,8BAA8B,EAAE;AAAA,sBAC5C,KAAK,eAAe;AAAA,gBAC1B,KAAK,QAAQ;AAAA,cACfC,QAAKjB,GAASG,CAAA,CAAA;AAAA;AAAA,EAAA;AAG5B;AAzICP,IAAA,oBAAA,QAAA;AAsCAC,IAAA,oBAAA,QAAA;AACAC,IAAA,oBAAA,QAAA;AAEAC,IAAA,oBAAA,QAAA;AApDMC,IAAA,oBAAA,QAAA;AAoFNC,IAAS,SAACW,GAAgBO,GAA0B;AAC7C,QAAAC,IAAM,OAAOR,CAAK;AACxB,SAAO,CAAC,MAAMQ,CAAG,KAAKA,IAAM,IAAIA,IAAMD;AACvC;AAkBMjB,IAAoB,iBAAG;AAGxB,MADA,KAAK,eACL,CAACY,QAAKjB,CAAc,EAAA;AAExB,QAAMwB,IAAiC,MAAM,KAAK,WAAW,kCAAkC,GACzFC,IAAa,MAAM,KAAK,QAAQD,EAA8B,WAAW,MAAM;AAAA,EAAE,CAAA,GAAG,UAAU,GAC9F,CAAC5B,GAAc8B,CAAM,IAAID,GAAW,MAAM,EAAE,EAAE,IAAI,CAACE,MAAMA,EAAE,MAAM,KAAK,CAAC;AAE7E,MAAI,CAACD,EAAQ;AAEP,QAAAE,IAAS,MAAMX,EAAK,MAAAhB,CAAA,EAAuB,YAAYgB,EAAK,MAAAjB,CAAA,GAAc0B,GAAQ9B,CAAY;AAChG,EAAAgC,KAAUA,EAAO,SAAS,MACxB,KAAA,cAAcA,EAAO,CAAC;AAE7B;AAEAtB,IAAS,SAACuB,GAAyD;AAC7D,OAAA,QAAQA,EAAM,OAAO,WACrB,KAAA,cAAc,IAAIC,GAA6B;AACrD;AAxHoBC,EAAA;AAAA,EADnBC,EAAS,EAAE,MAAM,MAAO,CAAA;AAAA,GAJbxB,EAKQ,WAAA,SAAA,CAAA;AAepBuB,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,SAAS,SAAS,GAAM,CAAA;AAAA,GAnB9BxB,EAoBZ,WAAA,YAAA,CAAA;AAGAuB,EAAA;AAAA,EADCE,EAAM;AAAA,GAtBKzB,EAuBZ,WAAA,SAAA,CAAA;AAGAuB,EAAA;AAAA,EADCE,EAAM;AAAA,GAzBKzB,EA0BZ,WAAA,QAAA,CAAA;AAGAuB,EAAA;AAAA,EADCE,EAAM;AAAA,GA5BKzB,EA6BZ,WAAA,eAAA,CAAA;AAGAuB,EAAA;AAAA,EADCE,EAAM;AAAA,GA/BKzB,EAgCZ,WAAA,QAAA,CAAA;AAGAuB,EAAA;AAAA,EADCE,EAAM;AAAA,GAlCKzB,EAmCZ,WAAA,eAAA,CAAA;AAGAuB,EAAA;AAAA,EADCE,EAAM;AAAA,GArCKzB,EAsCZ,WAAA,8BAAA,CAAA;AAGAuB,EAAA;AAAA,EADCE,EAAM;AAAA,GAxCKzB,EAyCZ,WAAA,mBAAA,CAAA;AAGAuB,EAAA;AAAA,EADCE,EAAM;AAAA,GA3CKzB,EA4CZ,WAAA,eAAA,CAAA;AAGAuB,EAAA;AAAA,EADCE,EAAM;AAAA,GA9CKzB,EA+CZ,WAAA,mBAAA,CAAA;AA/CYA,IAANuB,EAAA;AAAA,EADNG,EAAc3B,CAAW;AAAA,GACbC,CAAA;"}