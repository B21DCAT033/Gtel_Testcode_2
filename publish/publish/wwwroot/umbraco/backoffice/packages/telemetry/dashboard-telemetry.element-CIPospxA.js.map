{"version":3,"file":"dashboard-telemetry.element-CIPospxA.js","sources":["../../../src/packages/telemetry/dashboard-telemetry.element.ts"],"sourcesContent":["import { css, html, customElement, state, unsafeHTML } from '@umbraco-cms/backoffice/external/lit';\r\nimport type { UUIButtonState } from '@umbraco-cms/backoffice/external/uui';\r\nimport type { TelemetryResponseModel } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport { TelemetryLevelModel, TelemetryService, ApiError } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\nimport { tryExecuteAndNotify } from '@umbraco-cms/backoffice/resources';\r\nimport { UmbTextStyles } from '@umbraco-cms/backoffice/style';\r\n\r\n@customElement('umb-dashboard-telemetry')\r\nexport class UmbDashboardTelemetryElement extends UmbLitElement {\r\n\t@state()\r\n\tprivate _telemetryFormData = TelemetryLevelModel.BASIC;\r\n\r\n\t@state()\r\n\tprivate _telemetryLevels: TelemetryResponseModel[] = [];\r\n\r\n\t@state()\r\n\tprivate _errorMessage = '';\r\n\r\n\t@state()\r\n\tprivate _buttonState: UUIButtonState | undefined = undefined;\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis._setup();\r\n\t}\r\n\r\n\tprivate async _setup() {\r\n\t\tconst telemetryLevels = await tryExecuteAndNotify(this, TelemetryService.getTelemetry({ skip: 0, take: 3 }));\r\n\t\tthis._telemetryLevels = telemetryLevels.data?.items ?? [];\r\n\r\n\t\tconst telemetryLevel = await tryExecuteAndNotify(this, TelemetryService.getTelemetryLevel());\r\n\t\tthis._telemetryFormData = telemetryLevel.data?.telemetryLevel ?? TelemetryLevelModel.BASIC;\r\n\t}\r\n\r\n\tprivate _handleSubmit = async (e: CustomEvent<SubmitEvent>) => {\r\n\t\te.stopPropagation();\r\n\r\n\t\tthis._buttonState = 'waiting';\r\n\r\n\t\tconst { error } = await tryExecuteAndNotify(\r\n\t\t\tthis,\r\n\t\t\tTelemetryService.postTelemetryLevel({\r\n\t\t\t\trequestBody: { telemetryLevel: this._telemetryFormData },\r\n\t\t\t}),\r\n\t\t);\r\n\r\n\t\tif (error) {\r\n\t\t\tthis._buttonState = 'failed';\r\n\t\t\tthis._errorMessage = error instanceof ApiError ? (error.body as any).detail : error.message;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._buttonState = 'success';\r\n\t};\r\n\r\n\tprivate _handleChange(e: InputEvent) {\r\n\t\tconst target = e.target as HTMLInputElement;\r\n\t\tthis._telemetryFormData =\r\n\t\t\tthis._telemetryLevels[parseInt(target.value) - 1].telemetryLevel ?? TelemetryLevelModel.BASIC;\r\n\t}\r\n\r\n\tprivate get _selectedTelemetryIndex() {\r\n\t\treturn this._telemetryLevels.findIndex((x) => x.telemetryLevel === this._telemetryFormData) ?? 0;\r\n\t}\r\n\r\n\tprivate get _selectedTelemetry() {\r\n\t\treturn this._telemetryLevels.find((x) => x.telemetryLevel === this._telemetryFormData) ?? this._telemetryLevels[1];\r\n\t}\r\n\r\n\tprivate get _selectedTelemetryDescription() {\r\n\t\tswitch (this._selectedTelemetry.telemetryLevel) {\r\n\t\t\tcase TelemetryLevelModel.MINIMAL:\r\n\t\t\t\treturn this.localize.term('analytics_minimalLevelDescription');\r\n\t\t\tcase TelemetryLevelModel.BASIC:\r\n\t\t\t\treturn this.localize.term('analytics_basicLevelDescription');\r\n\t\t\tcase TelemetryLevelModel.DETAILED:\r\n\t\t\t\treturn this.localize.term('analytics_detailedLevelDescription');\r\n\t\t\tdefault:\r\n\t\t\t\treturn 'Could not find description for this setting';\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _renderSettingSlider() {\r\n\t\tif (!this._telemetryLevels || this._telemetryLevels.length < 1) return;\r\n\r\n\t\treturn html`\r\n\t\t\t<uui-slider\r\n\t\t\t\t@input=${this._handleChange}\r\n\t\t\t\tname=\"telemetryLevel\"\r\n\t\t\t\tlabel=${this.localize.term('analytics_consentForAnalytics')}\r\n\t\t\t\tvalue=${this._selectedTelemetryIndex + 1}\r\n\t\t\t\tmin=\"1\"\r\n\t\t\t\tmax=${this._telemetryLevels.length}\r\n\t\t\t\thide-step-values></uui-slider>\r\n\t\t\t<h2 class=\"uui-h3\">${this._selectedTelemetry.telemetryLevel}</h2>\r\n\t\t\t<p>${unsafeHTML(this._selectedTelemetryDescription)}</p>\r\n\t\t`;\r\n\t}\r\n\r\n\toverride render() {\r\n\t\treturn html`\r\n\t\t\t<uui-box class=\"uui-text\">\r\n\t\t\t\t<h1 class=\"uui-h2\">\r\n\t\t\t\t\t<umb-localize key=\"analytics_consentForAnalytics\">Consent for telemetry data</umb-localize>\r\n\t\t\t\t</h1>\r\n\t\t\t\t<div style=\"max-width:75ch\">\r\n\t\t\t\t\t<umb-localize key=\"analytics_analyticsDescription\"></umb-localize>\r\n\t\t\t\t\t${this._renderSettingSlider()}\r\n\t\t\t\t\t<uui-button\r\n\t\t\t\t\t\tlook=\"primary\"\r\n\t\t\t\t\t\tcolor=\"positive\"\r\n\t\t\t\t\t\tlabel=${this.localize.term('buttons_save')}\r\n\t\t\t\t\t\t@click=\"${this._handleSubmit}\"\r\n\t\t\t\t\t\t.state=${this._buttonState}></uui-button>\r\n\t\t\t\t</div>\r\n\t\t\t\t${this._errorMessage ? html`<p class=\"error\">${this._errorMessage}</p>` : ''}\r\n\t\t\t</uui-box>\r\n\t\t`;\r\n\t}\r\n\r\n\tstatic override styles = [\r\n\t\tUmbTextStyles,\r\n\t\tcss`\r\n\t\t\t:host {\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\tpadding: var(--uui-size-layout-1);\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\nexport default UmbDashboardTelemetryElement;\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-dashboard-telemetry': UmbDashboardTelemetryElement;\r\n\t}\r\n}\r\n"],"names":["UmbDashboardTelemetryElement","UmbLitElement","TelemetryLevelModel","e","error","tryExecuteAndNotify","TelemetryService","ApiError","telemetryLevels","telemetryLevel","target","x","html","unsafeHTML","UmbTextStyles","css","__decorateClass","state","customElement","UmbDashboardTelemetryElement$1"],"mappings":"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"}