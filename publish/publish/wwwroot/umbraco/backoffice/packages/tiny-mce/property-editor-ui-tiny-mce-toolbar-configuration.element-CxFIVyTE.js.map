{"version":3,"file":"property-editor-ui-tiny-mce-toolbar-configuration.element-CxFIVyTE.js","sources":["../../../src/packages/tiny-mce/property-editors/toolbar/property-editor-ui-tiny-mce-toolbar-configuration.element.ts"],"sourcesContent":["import { css, customElement, html, property, state, repeat } from '@umbraco-cms/backoffice/external/lit';\r\nimport { firstValueFrom } from '@umbraco-cms/backoffice/external/rxjs';\r\nimport { tinymce } from '@umbraco-cms/backoffice/external/tinymce';\r\nimport { umbExtensionsRegistry } from '@umbraco-cms/backoffice/extension-registry';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\nimport { UmbPropertyValueChangeEvent } from '@umbraco-cms/backoffice/property-editor';\r\nimport { UmbTextStyles } from '@umbraco-cms/backoffice/style';\r\nimport type { PropertyValueMap } from '@umbraco-cms/backoffice/external/lit';\r\nimport type {\r\n\tUmbPropertyEditorUiElement,\r\n\tUmbPropertyEditorConfigCollection,\r\n} from '@umbraco-cms/backoffice/property-editor';\r\n\r\nconst tinyIconSet = tinymce.IconManager.get('default');\r\n\r\ntype ToolbarConfig = {\r\n\talias: string;\r\n\tlabel: string;\r\n\ticon?: string;\r\n\tselected: boolean;\r\n};\r\n\r\n/**\r\n * @element umb-property-editor-ui-tiny-mce-toolbar-configuration\r\n */\r\n@customElement('umb-property-editor-ui-tiny-mce-toolbar-configuration')\r\nexport class UmbPropertyEditorUITinyMceToolbarConfigurationElement\r\n\textends UmbLitElement\r\n\timplements UmbPropertyEditorUiElement\r\n{\r\n\t@property({ attribute: false })\r\n\tset value(value: string | string[] | null) {\r\n\t\tif (!value) return;\r\n\r\n\t\tif (typeof value === 'string') {\r\n\t\t\tthis.#selectedValues = value.split(',').filter((x) => x.length > 0);\r\n\t\t} else if (Array.isArray(value)) {\r\n\t\t\tthis.#selectedValues = value;\r\n\t\t} else {\r\n\t\t\tthis.#selectedValues = [];\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Migrations\r\n\t\tif (this.#selectedValues.includes('ace')) {\r\n\t\t\tthis.#selectedValues = this.#selectedValues.filter((v) => v !== 'ace');\r\n\t\t\tthis.#selectedValues.push('sourcecode');\r\n\t\t}\r\n\r\n\t\tthis._toolbarConfig.forEach((v) => {\r\n\t\t\tv.selected = this.#selectedValues.includes(v.alias);\r\n\t\t});\r\n\t}\r\n\tget value(): string[] {\r\n\t\treturn this.#selectedValues;\r\n\t}\r\n\r\n\t@property({ attribute: false })\r\n\tconfig?: UmbPropertyEditorConfigCollection;\r\n\r\n\t@state()\r\n\tprivate readonly _toolbarConfig: ToolbarConfig[] = [];\r\n\r\n\t#selectedValues: string[] = [];\r\n\r\n\tprotected override async firstUpdated(_changedProperties: PropertyValueMap<unknown>) {\r\n\t\tsuper.firstUpdated(_changedProperties);\r\n\r\n\t\tthis.config?.getValueByAlias<ToolbarConfig[]>('toolbar')?.forEach((v) => {\r\n\t\t\tthis._toolbarConfig.push({\r\n\t\t\t\t...v,\r\n\t\t\t\tselected: this.value.includes(v.alias),\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tawait this.getToolbarPlugins();\r\n\r\n\t\tthis.requestUpdate('_toolbarConfig');\r\n\t}\r\n\r\n\tprivate async getToolbarPlugins(): Promise<void> {\r\n\t\t// Get all the toolbar plugins\r\n\t\tconst plugin$ = umbExtensionsRegistry.byType('tinyMcePlugin');\r\n\r\n\t\tconst plugins = await firstValueFrom(plugin$);\r\n\r\n\t\tplugins.forEach((p) => {\r\n\t\t\t// If the plugin has a toolbar, add it to the config\r\n\t\t\tif (p.meta?.toolbar) {\r\n\t\t\t\tp.meta.toolbar.forEach((t: any) => {\r\n\t\t\t\t\tthis._toolbarConfig.push({\r\n\t\t\t\t\t\talias: t.alias,\r\n\t\t\t\t\t\tlabel: this.localize.string(t.label),\r\n\t\t\t\t\t\ticon: t.icon ?? 'icon-autofill',\r\n\t\t\t\t\t\tselected: this.value.includes(t.alias),\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tprivate onChange(event: CustomEvent) {\r\n\t\tconst checkbox = event.target as HTMLInputElement;\r\n\t\tconst alias = checkbox.value;\r\n\r\n\t\tconst value = this._toolbarConfig\r\n\t\t\t.filter((t) => (t.alias !== alias && t.selected) || (t.alias === alias && checkbox.checked))\r\n\t\t\t.map((v) => v.alias);\r\n\r\n\t\tthis.value = value;\r\n\r\n\t\tthis.dispatchEvent(new UmbPropertyValueChangeEvent());\r\n\t}\r\n\r\n\toverride render() {\r\n\t\treturn html`<ul>\r\n\t\t\t${repeat(\r\n\t\t\t\tthis._toolbarConfig,\r\n\t\t\t\t(v) => v.alias,\r\n\t\t\t\t(v) =>\r\n\t\t\t\t\thtml`<li>\r\n\t\t\t\t\t\t<uui-checkbox label=${v.label} value=${v.alias} ?checked=${v.selected} @change=${this.onChange}>\r\n\t\t\t\t\t\t\t<uui-icon .svg=${tinyIconSet?.icons[v.icon ?? 'alignjustify']}></uui-icon>\r\n\t\t\t\t\t\t\t${v.label}\r\n\t\t\t\t\t\t</uui-checkbox>\r\n\t\t\t\t\t</li>`,\r\n\t\t\t)}\r\n\t\t</ul>`;\r\n\t}\r\n\r\n\tstatic override readonly styles = [\r\n\t\tUmbTextStyles,\r\n\t\tcss`\r\n\t\t\tul {\r\n\t\t\t\tlist-style: none;\r\n\t\t\t\tpadding: 0;\r\n\t\t\t\tmargin: 0;\r\n\r\n\t\t\t\tuui-icon {\r\n\t\t\t\t\twidth: 1.5em;\r\n\t\t\t\t\theight: 1.5em;\r\n\t\t\t\t\tmargin-right: 5px;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\nexport default UmbPropertyEditorUITinyMceToolbarConfigurationElement;\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-property-editor-ui-tiny-mce-toolbar-configuration': UmbPropertyEditorUITinyMceToolbarConfigurationElement;\r\n\t}\r\n}\r\n"],"names":["_selectedValues","tinyIconSet","tinymce","UmbPropertyEditorUITinyMceToolbarConfigurationElement","UmbLitElement","__privateAdd","value","__privateSet","x","__privateGet","v","_changedProperties","plugin$","umbExtensionsRegistry","firstValueFrom","p","t","event","checkbox","alias","UmbPropertyValueChangeEvent","html","repeat","UmbTextStyles","css","__decorateClass","property","state","customElement","UmbPropertyEditorUITinyMceToolbarConfigurationElement$1"],"mappings":";;;;;;;;;;;;;gVAAAA;AAaA,MAAMC,IAAcC,EAAQ,YAAY,IAAI,SAAS;AAaxC,IAAAC,IAAN,cACEC,EAET;AAAA,EAHO,cAAA;AAAA,UAAA,GAAA,SAAA,GAmCN,KAAiB,iBAAkC,CAAC,GAEpDC,EAAA,MAAAL,GAA4B,EAAC;AAAA,EAAA;AAAA,EAhC7B,IAAI,MAAMM,GAAiC;AAC1C,QAAKA,GAED;AAAA,UAAA,OAAOA,KAAU;AACf,QAAAC,EAAA,MAAAP,GAAkBM,EAAM,MAAM,GAAG,EAAE,OAAO,CAACE,MAAMA,EAAE,SAAS,CAAC,CAAA;AAAA,eACxD,MAAM,QAAQF,CAAK;AAC7B,QAAAC,EAAA,MAAKP,GAAkBM,CAAA;AAAA,WACjB;AACN,QAAAC,EAAA,MAAKP,GAAkB,EAAC;AACxB;AAAA,MAAA;AAID,MAAIS,EAAK,MAAAT,CAAA,EAAgB,SAAS,KAAK,MACtCO,EAAA,MAAKP,GAAkBS,EAAK,MAAAT,CAAA,EAAgB,OAAO,CAACU,MAAMA,MAAM,KAAK,CAAA,GAChED,EAAA,MAAAT,CAAA,EAAgB,KAAK,YAAY,IAGlC,KAAA,eAAe,QAAQ,CAACU,MAAM;AAClC,QAAAA,EAAE,WAAWD,EAAA,MAAKT,CAAgB,EAAA,SAASU,EAAE,KAAK;AAAA,MAAA,CAClD;AAAA;AAAA,EAAA;AAAA,EAEF,IAAI,QAAkB;AACrB,WAAOD,EAAK,MAAAT,CAAA;AAAA,EAAA;AAAA,EAWb,MAAyB,aAAaW,GAA+C;AACpF,UAAM,aAAaA,CAAkB,GAErC,KAAK,QAAQ,gBAAiC,SAAS,GAAG,QAAQ,CAACD,MAAM;AACxE,WAAK,eAAe,KAAK;AAAA,QACxB,GAAGA;AAAA,QACH,UAAU,KAAK,MAAM,SAASA,EAAE,KAAK;AAAA,MAAA,CACrC;AAAA,IAAA,CACD,GAED,MAAM,KAAK,kBAAkB,GAE7B,KAAK,cAAc,gBAAgB;AAAA,EAAA;AAAA,EAGpC,MAAc,oBAAmC;AAE1C,UAAAE,IAAUC,EAAsB,OAAO,eAAe;AAIpD,KAFQ,MAAMC,EAAeF,CAAO,GAEpC,QAAQ,CAACG,MAAM;AAElB,MAAAA,EAAE,MAAM,WACXA,EAAE,KAAK,QAAQ,QAAQ,CAACC,MAAW;AAClC,aAAK,eAAe,KAAK;AAAA,UACxB,OAAOA,EAAE;AAAA,UACT,OAAO,KAAK,SAAS,OAAOA,EAAE,KAAK;AAAA,UACnC,MAAMA,EAAE,QAAQ;AAAA,UAChB,UAAU,KAAK,MAAM,SAASA,EAAE,KAAK;AAAA,QAAA,CACrC;AAAA,MAAA,CACD;AAAA,IACF,CACA;AAAA,EAAA;AAAA,EAGM,SAASC,GAAoB;AACpC,UAAMC,IAAWD,EAAM,QACjBE,IAAQD,EAAS,OAEjBZ,IAAQ,KAAK,eACjB,OAAO,CAACU,MAAOA,EAAE,UAAUG,KAASH,EAAE,YAAcA,EAAE,UAAUG,KAASD,EAAS,OAAQ,EAC1F,IAAI,CAACR,MAAMA,EAAE,KAAK;AAEpB,SAAK,QAAQJ,GAER,KAAA,cAAc,IAAIc,GAA6B;AAAA,EAAA;AAAA,EAG5C,SAAS;AACV,WAAAC;AAAA,KACJC;AAAA,MACD,KAAK;AAAA,MACL,CAACZ,MAAMA,EAAE;AAAA,MACT,CAACA,MACAW;AAAA,4BACuBX,EAAE,KAAK,UAAUA,EAAE,KAAK,aAAaA,EAAE,QAAQ,YAAY,KAAK,QAAQ;AAAA,wBAC5ET,GAAa,MAAMS,EAAE,QAAQ,cAAc,CAAC;AAAA,SAC3DA,EAAE,KAAK;AAAA;AAAA;AAAA,IAGZ,CAAA;AAAA;AAAA,EAAA;AAoBJ;AAnFCV,IAAA,oBAAA,QAAA;AArCYG,EAwGa,SAAS;AAAA,EACjCoB;AAAA,EACAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaD;AAlHIC,EAAA;AAAA,EADHC,EAAS,EAAE,WAAW,GAAO,CAAA;AAAA,GAJlBvB,EAKR,WAAA,SAAA,CAAA;AA2BJsB,EAAA;AAAA,EADCC,EAAS,EAAE,WAAW,GAAO,CAAA;AAAA,GA/BlBvB,EAgCZ,WAAA,UAAA,CAAA;AAGiBsB,EAAA;AAAA,EADhBE,EAAM;AAAA,GAlCKxB,EAmCK,WAAA,kBAAA,CAAA;AAnCLA,IAANsB,EAAA;AAAA,EADNG,EAAc,uDAAuD;AAAA,GACzDzB,CAAA;AA0Hb,MAAA0B,IAAe1B;"}