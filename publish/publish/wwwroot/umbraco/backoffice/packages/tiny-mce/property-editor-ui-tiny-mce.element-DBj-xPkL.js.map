{"version":3,"file":"property-editor-ui-tiny-mce.element-DBj-xPkL.js","sources":["../../../src/packages/tiny-mce/property-editors/tiny-mce/property-editor-ui-tiny-mce.element.ts"],"sourcesContent":["import type { UmbInputTinyMceElement } from '../../components/input-tiny-mce/input-tiny-mce.element.js';\r\nimport { customElement, html } from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbPropertyEditorUiRteElementBase } from '@umbraco-cms/backoffice/rte';\r\n\r\nimport '../../components/input-tiny-mce/input-tiny-mce.element.js';\r\n\r\n/**\r\n * @element umb-property-editor-ui-tiny-mce\r\n */\r\n@customElement('umb-property-editor-ui-tiny-mce')\r\nexport class UmbPropertyEditorUITinyMceElement extends UmbPropertyEditorUiRteElementBase {\r\n\t#onChange(event: CustomEvent & { target: UmbInputTinyMceElement }) {\r\n\t\tconst markup = typeof event.target.value === 'string' ? event.target.value : '';\r\n\r\n\t\t// If we don't get any markup clear the property editor value.\r\n\t\tif (markup === '') {\r\n\t\t\tthis.value = undefined;\r\n\t\t\tthis._fireChangeEvent();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Remove unused Blocks of Blocks Layout. Leaving only the Blocks that are present in Markup.\r\n\t\tconst usedContentKeys: string[] = [];\r\n\r\n\t\t// Regex matching all block elements in the markup, and extracting the content key. It's the same as the one used on the backend.\r\n\t\tconst regex = new RegExp(\r\n\t\t\t/<umb-rte-block(?:-inline)?(?: class=\"(?:.[^\"]*)\")? data-content-key=\"(?<key>.[^\"]*)\">(?:<!--Umbraco-Block-->)?<\\/umb-rte-block(?:-inline)?>/gi,\r\n\t\t);\r\n\t\tlet blockElement: RegExpExecArray | null;\r\n\t\twhile ((blockElement = regex.exec(markup)) !== null) {\r\n\t\t\tif (blockElement.groups?.key) {\r\n\t\t\t\tusedContentKeys.push(blockElement.groups.key);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.value) {\r\n\t\t\tthis.value = {\r\n\t\t\t\t...this.value,\r\n\t\t\t\tmarkup: markup,\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\tthis.value = {\r\n\t\t\t\tmarkup: markup,\r\n\t\t\t\tblocks: {\r\n\t\t\t\t\tlayout: {},\r\n\t\t\t\t\tcontentData: [],\r\n\t\t\t\t\tsettingsData: [],\r\n\t\t\t\t\texpose: [],\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// lets run this one after we set the value, to make sure we don't reset the value.\r\n\t\tthis._filterUnusedBlocks(usedContentKeys);\r\n\r\n\t\tthis._fireChangeEvent();\r\n\t}\r\n\r\n\toverride render() {\r\n\t\treturn html`\r\n\t\t\t<umb-input-tiny-mce\r\n\t\t\t\t.configuration=${this._config}\r\n\t\t\t\t.value=${this._markup}\r\n\t\t\t\t@change=${this.#onChange}\r\n\t\t\t\t?readonly=${this.readonly}>\r\n\t\t\t</umb-input-tiny-mce>\r\n\t\t`;\r\n\t}\r\n}\r\n\r\nexport default UmbPropertyEditorUITinyMceElement;\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-property-editor-ui-tiny-mce': UmbPropertyEditorUITinyMceElement;\r\n\t}\r\n}\r\n"],"names":["_UmbPropertyEditorUITinyMceElement_instances","onChange_fn","UmbPropertyEditorUITinyMceElement","UmbPropertyEditorUiRteElementBase","__privateAdd","html","__privateMethod","event","markup","usedContentKeys","regex","blockElement","__decorateClass","customElement","UmbPropertyEditorUITinyMceElement$1"],"mappings":";;;;;;;;;8OAAAA,GAAAC;AAUa,IAAAC,IAAN,cAAgDC,EAAkC;AAAA,EAAlF,cAAA;AAAA,UAAA,GAAA,SAAA,GAAAC,EAAA,MAAAJ,CAAA;AAAA,EAAA;AAAA,EAgDG,SAAS;AACV,WAAAK;AAAA;AAAA,qBAEY,KAAK,OAAO;AAAA,aACpB,KAAK,OAAO;AAAA,cACXC,QAAKN,GAASC,CAAA,CAAA;AAAA,gBACZ,KAAK,QAAQ;AAAA;AAAA;AAAA,EAAA;AAI7B;AA1DOD,IAAA,oBAAA,QAAA;AACNC,IAAS,SAACM,GAAyD;AAC5D,QAAAC,IAAS,OAAOD,EAAM,OAAO,SAAU,WAAWA,EAAM,OAAO,QAAQ;AAG7E,MAAIC,MAAW,IAAI;AAClB,SAAK,QAAQ,QACb,KAAK,iBAAiB;AACtB;AAAA,EAAA;AAID,QAAMC,IAA4B,CAAC,GAG7BC,IAAQ,IAAI;AAAA,IACjB;AAAA,EACD;AACI,MAAAC;AACJ,UAAQA,IAAeD,EAAM,KAAKF,CAAM,OAAO;AAC1C,IAAAG,EAAa,QAAQ,OACRF,EAAA,KAAKE,EAAa,OAAO,GAAG;AAI9C,EAAI,KAAK,QACR,KAAK,QAAQ;AAAA,IACZ,GAAG,KAAK;AAAA,IACR,QAAAH;AAAA,EACD,IAEA,KAAK,QAAQ;AAAA,IACZ,QAAAA;AAAA,IACA,QAAQ;AAAA,MACP,QAAQ,CAAC;AAAA,MACT,aAAa,CAAC;AAAA,MACd,cAAc,CAAC;AAAA,MACf,QAAQ,CAAA;AAAA,IAAC;AAAA,EAEX,GAID,KAAK,oBAAoBC,CAAe,GAExC,KAAK,iBAAiB;AACvB;AA9CYP,IAANU,EAAA;AAAA,EADNC,EAAc,iCAAiC;AAAA,GACnCX,CAAA;AA4Db,MAAAY,IAAeZ;"}