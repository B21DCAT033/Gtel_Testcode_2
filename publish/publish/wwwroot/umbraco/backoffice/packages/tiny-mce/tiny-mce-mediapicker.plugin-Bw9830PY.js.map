{"version":3,"file":"tiny-mce-mediapicker.plugin-Bw9830PY.js","sources":["../../../src/packages/tiny-mce/plugins/tiny-mce-mediapicker.plugin.ts"],"sourcesContent":["import { type TinyMcePluginArguments, UmbTinyMcePluginBase } from '../components/input-tiny-mce/tiny-mce-plugin.js';\r\nimport { getGuidFromUdi } from '@umbraco-cms/backoffice/utils';\r\nimport { UMB_MODAL_MANAGER_CONTEXT } from '@umbraco-cms/backoffice/modal';\r\nimport type { RawEditorOptions } from '@umbraco-cms/backoffice/external/tinymce';\r\nimport { UmbTemporaryFileRepository } from '@umbraco-cms/backoffice/temporary-file';\r\nimport { UmbId } from '@umbraco-cms/backoffice/id';\r\nimport {\r\n\tsizeImageInEditor,\r\n\tuploadBlobImages,\r\n\tUMB_MEDIA_PICKER_MODAL,\r\n\tUMB_MEDIA_CAPTION_ALT_TEXT_MODAL,\r\n} from '@umbraco-cms/backoffice/media';\r\nimport { UmbLocalizationController } from '@umbraco-cms/backoffice/localization-api';\r\n\r\ninterface MediaPickerTargetData {\r\n\taltText?: string;\r\n\turl?: string;\r\n\tcaption?: string;\r\n\tudi?: string;\r\n\tid?: string;\r\n\ttmpimg?: string;\r\n}\r\n\r\ninterface MediaPickerResultData {\r\n\tid?: string;\r\n\tsrc?: string;\r\n\talt?: string;\r\n\t'data-udi'?: string;\r\n\t'data-caption'?: string;\r\n}\r\n\r\nexport default class UmbTinyMceMediaPickerPlugin extends UmbTinyMcePluginBase {\r\n\t#modalManager?: typeof UMB_MODAL_MANAGER_CONTEXT.TYPE;\r\n\treadonly #temporaryFileRepository;\r\n\r\n\tconstructor(args: TinyMcePluginArguments) {\r\n\t\tsuper(args);\r\n\t\tconst localize = new UmbLocalizationController(args.host);\r\n\r\n\t\tthis.#temporaryFileRepository = new UmbTemporaryFileRepository(args.host);\r\n\r\n\t\tthis.consumeContext(UMB_MODAL_MANAGER_CONTEXT, (instance) => {\r\n\t\t\tthis.#modalManager = instance;\r\n\t\t});\r\n\r\n\t\tthis.editor.ui.registry.addToggleButton('umbmediapicker', {\r\n\t\t\ticon: 'image',\r\n\t\t\ttooltip: localize.term('general_mediaPicker'),\r\n\t\t\tonAction: () => this.#onAction(),\r\n\t\t\tonSetup: (api) => {\r\n\t\t\t\tconst changed = this.editor.selection.selectorChangedWithUnbind('img[data-udi]', (state) =>\r\n\t\t\t\t\tapi.setActive(state),\r\n\t\t\t\t);\r\n\t\t\t\treturn () => changed.unbind();\r\n\t\t\t},\r\n\t\t});\r\n\r\n\t\t// Register global options for the editor\r\n\t\tthis.editor.options.register('maxImageSize', { processor: 'number', default: 500 });\r\n\r\n\t\t// Adjust Editor settings to allow pasting images\r\n\t\t// but only if the umbmediapicker button is present\r\n\t\tconst toolbar = this.configuration?.getValueByAlias<string[]>('toolbar');\r\n\t\tif (toolbar?.includes('umbmediapicker')) {\r\n\t\t\tthis.editor.options.set('paste_data_images', true);\r\n\t\t\tthis.editor.options.set('automatic_uploads', false);\r\n\t\t\tthis.editor.options.set('images_upload_handler', this.#uploadImageHandler);\r\n\t\t\t// This allows images to be pasted in & stored as Base64 until they get uploaded to server\r\n\t\t\tthis.editor.options.set('images_replace_blob_uris', true);\r\n\r\n\t\t\t// Listen for SetContent to update images\r\n\t\t\tthis.editor.on('SetContent', async (e) => {\r\n\t\t\t\tconst content = e.content;\r\n\r\n\t\t\t\t// Handle images that are pasted in\r\n\t\t\t\tuploadBlobImages(this.editor, content);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/*\r\n\tasync #observeCurrentUser() {\r\n\t\tif (!this.#currentUserContext) return;\r\n\r\n\t\tthis.observe(this.#currentUserContext.currentUser, (currentUser) => (this.#currentUser = currentUser));\r\n\t}\r\n\t*/\r\n\r\n\tasync #onAction() {\r\n\t\tconst selectedElm = this.editor.selection.getNode();\r\n\t\tlet currentTarget: MediaPickerTargetData = {};\r\n\r\n\t\tif (selectedElm.nodeName === 'IMG') {\r\n\t\t\tconst img = selectedElm as HTMLImageElement;\r\n\t\t\tconst hasUdi = img.hasAttribute('data-udi');\r\n\t\t\tconst hasDataTmpImg = img.hasAttribute('data-tmpimg');\r\n\r\n\t\t\tcurrentTarget = {\r\n\t\t\t\taltText: img.alt,\r\n\t\t\t\turl: img.src,\r\n\t\t\t\tcaption: img.dataset.caption,\r\n\t\t\t};\r\n\r\n\t\t\tif (hasUdi) {\r\n\t\t\t\tcurrentTarget['udi'] = img.dataset.udi;\r\n\t\t\t} else {\r\n\t\t\t\tcurrentTarget['id'] = img.getAttribute('rel') ?? undefined;\r\n\t\t\t}\r\n\r\n\t\t\tif (hasDataTmpImg) {\r\n\t\t\t\tcurrentTarget['tmpimg'] = img.dataset.tmpimg;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.#showMediaPicker(currentTarget);\r\n\t}\r\n\r\n\tasync #showMediaPicker(currentTarget: MediaPickerTargetData) {\r\n\t\t/*\r\n\t\tlet startNodeId;\r\n\t\tlet startNodeIsVirtual;\r\n\r\n\t\tif (!this.configuration?.getByAlias('startNodeId')) {\r\n\t\t\tif (this.configuration?.getValueByAlias<boolean>('ignoreUserStartNodes') === true) {\r\n\t\t\t\tstartNodeId = -1;\r\n\t\t\t\tstartNodeIsVirtual = true;\r\n\t\t\t} else {\r\n\t\t\t\tstartNodeId = this.#currentUser?.mediaStartNodeIds?.length !== 1 ? -1 : this.#currentUser?.mediaStartNodeIds[0];\r\n\t\t\t\tstartNodeIsVirtual = this.#currentUser?.mediaStartNodeIds?.length !== 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\t*/\r\n\r\n\t\tconst modalHandler = this.#modalManager?.open(this, UMB_MEDIA_PICKER_MODAL, {\r\n\t\t\tdata: {\r\n\t\t\t\tmultiple: false,\r\n\t\t\t\t//startNodeIsVirtual,\r\n\t\t\t},\r\n\t\t\tvalue: {\r\n\t\t\t\tselection: currentTarget.udi ? [getGuidFromUdi(currentTarget.udi)] : [],\r\n\t\t\t},\r\n\t\t});\r\n\r\n\t\tif (!modalHandler) return;\r\n\r\n\t\tconst { selection } = await modalHandler.onSubmit().catch(() => ({ selection: undefined }));\r\n\t\tif (!selection?.length) return;\r\n\r\n\t\tthis.#showMediaCaptionAltText(selection[0], currentTarget);\r\n\t\tthis.editor.dispatch('Change');\r\n\t}\r\n\r\n\tasync #showMediaCaptionAltText(mediaUnique: string | null, currentTarget: MediaPickerTargetData) {\r\n\t\tif (!mediaUnique) return;\r\n\r\n\t\tconst modalHandler = this.#modalManager?.open(this, UMB_MEDIA_CAPTION_ALT_TEXT_MODAL, {\r\n\t\t\tdata: { mediaUnique },\r\n\t\t\tvalue: {\r\n\t\t\t\turl: '',\r\n\t\t\t\taltText: currentTarget.altText,\r\n\t\t\t\tcaption: currentTarget.caption,\r\n\t\t\t},\r\n\t\t});\r\n\r\n\t\tconst mediaData = await modalHandler?.onSubmit().catch(() => null);\r\n\t\tif (!mediaData) return;\r\n\r\n\t\tconst media: MediaPickerTargetData = {\r\n\t\t\taltText: mediaData?.altText,\r\n\t\t\tcaption: mediaData?.caption,\r\n\t\t\turl: mediaData?.url,\r\n\t\t\tudi: 'umb://media/' + mediaUnique?.replace(/-/g, ''),\r\n\t\t};\r\n\r\n\t\tthis.#insertInEditor(media);\r\n\t}\r\n\r\n\tasync #insertInEditor(media: MediaPickerTargetData) {\r\n\t\tif (!media) return;\r\n\r\n\t\t// We need to create a NEW DOM <img> element to insert\r\n\t\t// setting an attribute of ID to __mcenew, so we can gather a reference to the node, to be able to update its size accordingly to the size of the image.\r\n\t\tconst img: MediaPickerResultData = {\r\n\t\t\talt: media.altText,\r\n\t\t\tsrc: media.url ? media.url : 'nothing.jpg',\r\n\t\t\tid: '__mcenew',\r\n\t\t\t'data-udi': media.udi,\r\n\t\t\t'data-caption': media.caption,\r\n\t\t};\r\n\t\tconst newImage = this.editor.dom.createHTML('img', img as Record<string, string | null>);\r\n\t\tconst parentElement = this.editor.selection.getNode().parentElement;\r\n\r\n\t\tif (img['data-caption'] && parentElement) {\r\n\t\t\tconst figCaption = this.editor.dom.createHTML('figcaption', {}, img['data-caption']);\r\n\t\t\tconst combined = newImage + figCaption;\r\n\r\n\t\t\tif (parentElement.nodeName !== 'FIGURE') {\r\n\t\t\t\tconst fragment = this.editor.dom.createHTML('figure', {}, combined);\r\n\t\t\t\tthis.editor.selection.setContent(fragment);\r\n\t\t\t} else {\r\n\t\t\t\tparentElement.innerHTML = combined;\r\n\t\t\t}\r\n\t\t} else if (parentElement?.nodeName === 'FIGURE' && parentElement.parentElement) {\r\n\t\t\t//if caption is removed, remove the figure element\r\n\t\t\tparentElement.parentElement.innerHTML = newImage;\r\n\t\t} else {\r\n\t\t\tthis.editor.selection.setContent(newImage);\r\n\t\t}\r\n\r\n\t\t// Using settimeout to wait for a DoM-render, so we can find the new element by ID.\r\n\t\tsetTimeout(() => {\r\n\t\t\tconst imgElm = this.editor.dom.get('__mcenew') as HTMLImageElement;\r\n\t\t\tif (!imgElm) return;\r\n\r\n\t\t\tthis.editor.dom.setAttrib(imgElm, 'id', null);\r\n\r\n\t\t\t// When image is loaded we are ready to call sizeImageInEditor.\r\n\t\t\tconst onImageLoaded = () => {\r\n\t\t\t\tsizeImageInEditor(this.editor, imgElm, img.src);\r\n\t\t\t\tthis.editor.dispatch('Change');\r\n\t\t\t};\r\n\r\n\t\t\t// Check if image already is loaded.\r\n\t\t\tif (imgElm.complete === true) {\r\n\t\t\t\tonImageLoaded();\r\n\t\t\t} else {\r\n\t\t\t\timgElm.onload = onImageLoaded;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\treadonly #uploadImageHandler: RawEditorOptions['images_upload_handler'] = (blobInfo, progress) => {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tprogress(0);\r\n\r\n\t\t\tconst id = UmbId.new();\r\n\t\t\tconst fileBlob = blobInfo.blob();\r\n\t\t\tconst file = new File([fileBlob], blobInfo.filename(), { type: fileBlob.type });\r\n\r\n\t\t\tdocument.dispatchEvent(new CustomEvent('rte.file.uploading', { composed: true, bubbles: true }));\r\n\r\n\t\t\tthis.#temporaryFileRepository\r\n\t\t\t\t.upload(id, file, (evt) => {\r\n\t\t\t\t\tprogress((evt.loaded / evt.total) * 100);\r\n\t\t\t\t})\r\n\t\t\t\t.then((response) => {\r\n\t\t\t\t\tif (response.error) {\r\n\t\t\t\t\t\treject(response.error);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Put temp location into localstorage (used to update the img with data-tmpimg later on)\r\n\t\t\t\t\tconst blobUri = window.URL.createObjectURL(fileBlob);\r\n\t\t\t\t\tsessionStorage.setItem(`tinymce__${blobUri}`, id);\r\n\t\t\t\t\tresolve(blobUri);\r\n\t\t\t\t})\r\n\t\t\t\t.catch(reject)\r\n\t\t\t\t.finally(() => {\r\n\t\t\t\t\tprogress(100);\r\n\t\t\t\t\tdocument.dispatchEvent(new CustomEvent('rte.file.uploaded', { composed: true, bubbles: true }));\r\n\t\t\t\t});\r\n\t\t});\r\n\t};\r\n}\r\n"],"names":["UmbTinyMceMediaPickerPlugin","UmbTinyMcePluginBase","#modalManager","#temporaryFileRepository","args","localize","UmbLocalizationController","UmbTemporaryFileRepository","UMB_MODAL_MANAGER_CONTEXT","instance","#onAction","api","changed","state","#uploadImageHandler","e","content","uploadBlobImages","selectedElm","currentTarget","img","hasUdi","hasDataTmpImg","#showMediaPicker","modalHandler","UMB_MEDIA_PICKER_MODAL","getGuidFromUdi","selection","#showMediaCaptionAltText","mediaUnique","mediaData","UMB_MEDIA_CAPTION_ALT_TEXT_MODAL","media","#insertInEditor","newImage","parentElement","figCaption","combined","fragment","imgElm","onImageLoaded","sizeImageInEditor","blobInfo","progress","resolve","reject","id","UmbId","fileBlob","file","evt","response","blobUri"],"mappings":"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"}