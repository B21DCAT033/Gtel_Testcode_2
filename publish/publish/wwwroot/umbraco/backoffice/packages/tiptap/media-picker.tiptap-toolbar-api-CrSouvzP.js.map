{"version":3,"file":"media-picker.tiptap-toolbar-api-CrSouvzP.js","sources":["../../../src/packages/tiptap/extensions/toolbar/media-picker.tiptap-toolbar-api.ts"],"sourcesContent":["import { UmbTiptapToolbarElementApiBase } from '../base.js';\r\nimport { getGuidFromUdi, getProcessedImageUrl, imageSize } from '@umbraco-cms/backoffice/utils';\r\nimport { ImageCropModeModel } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport { UMB_MEDIA_CAPTION_ALT_TEXT_MODAL, UMB_MEDIA_PICKER_MODAL } from '@umbraco-cms/backoffice/media';\r\nimport { UMB_MODAL_MANAGER_CONTEXT } from '@umbraco-cms/backoffice/modal';\r\nimport type { Editor } from '@umbraco-cms/backoffice/external/tiptap';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport type { UmbMediaCaptionAltTextModalValue } from '@umbraco-cms/backoffice/media';\r\n\r\nexport default class UmbTiptapToolbarMediaPickerToolbarExtensionApi extends UmbTiptapToolbarElementApiBase {\r\n\t#modalManager?: typeof UMB_MODAL_MANAGER_CONTEXT.TYPE;\r\n\r\n\t/**\r\n\t * @returns {number} The maximum width of uploaded images\r\n\t */\r\n\tget maxWidth(): number {\r\n\t\tconst maxImageSize = parseInt(this.configuration?.getValueByAlias('maxImageSize') ?? '', 10);\r\n\t\treturn isNaN(maxImageSize) ? 500 : maxImageSize;\r\n\t}\r\n\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host);\r\n\r\n\t\tthis.consumeContext(UMB_MODAL_MANAGER_CONTEXT, (instance) => {\r\n\t\t\tthis.#modalManager = instance;\r\n\t\t});\r\n\t}\r\n\r\n\toverride isActive(editor?: Editor) {\r\n\t\treturn editor?.isActive('image') === true || editor?.isActive('figure') === true;\r\n\t}\r\n\r\n\toverride async execute(editor: Editor) {\r\n\t\tconst currentTarget = editor.getAttributes('image');\r\n\t\tconst figure = editor.getAttributes('figure');\r\n\r\n\t\tlet currentMediaUdi: string | undefined = undefined;\r\n\t\tif (currentTarget?.['data-udi']) {\r\n\t\t\tcurrentMediaUdi = getGuidFromUdi(currentTarget['data-udi']);\r\n\t\t}\r\n\r\n\t\tlet currentAltText: string | undefined = undefined;\r\n\t\tif (currentTarget?.alt) {\r\n\t\t\tcurrentAltText = currentTarget.alt;\r\n\t\t}\r\n\r\n\t\tlet currentCaption: string | undefined = undefined;\r\n\t\tif (figure?.figcaption) {\r\n\t\t\tcurrentCaption = figure.figcaption;\r\n\t\t}\r\n\r\n\t\tconst selection = await this.#openMediaPicker(currentMediaUdi);\r\n\t\tif (!selection?.length) return;\r\n\r\n\t\tconst mediaGuid = selection[0];\r\n\r\n\t\tif (!mediaGuid) {\r\n\t\t\tthrow new Error('No media selected');\r\n\t\t}\r\n\r\n\t\tconst media = await this.#showMediaCaptionAltText(mediaGuid, currentAltText, currentCaption);\r\n\t\tif (!media) return;\r\n\r\n\t\tthis.#insertInEditor(editor, mediaGuid, media);\r\n\t}\r\n\r\n\tasync #openMediaPicker(currentMediaUdi?: string) {\r\n\t\tconst modalHandler = this.#modalManager?.open(this, UMB_MEDIA_PICKER_MODAL, {\r\n\t\t\tdata: {\r\n\t\t\t\tmultiple: false,\r\n\t\t\t\t//startNodeIsVirtual,\r\n\t\t\t},\r\n\t\t\tvalue: {\r\n\t\t\t\tselection: currentMediaUdi ? [currentMediaUdi] : [],\r\n\t\t\t},\r\n\t\t});\r\n\r\n\t\tif (!modalHandler) return;\r\n\r\n\t\tconst { selection } = await modalHandler.onSubmit().catch(() => ({ selection: undefined }));\r\n\r\n\t\treturn selection;\r\n\t}\r\n\r\n\tasync #showMediaCaptionAltText(mediaUnique: string, altText?: string, caption?: string) {\r\n\t\tconst modalHandler = this.#modalManager?.open(this, UMB_MEDIA_CAPTION_ALT_TEXT_MODAL, {\r\n\t\t\tdata: { mediaUnique },\r\n\t\t\tvalue: {\r\n\t\t\t\turl: '',\r\n\t\t\t\taltText,\r\n\t\t\t\tcaption,\r\n\t\t\t},\r\n\t\t});\r\n\t\tconst mediaData = await modalHandler?.onSubmit().catch(() => null);\r\n\t\treturn mediaData;\r\n\t}\r\n\r\n\tasync #insertInEditor(editor: Editor, mediaUnique: string, media: UmbMediaCaptionAltTextModalValue) {\r\n\t\tif (!media?.url) return;\r\n\r\n\t\tconst { width, height } = await imageSize(media.url, { maxWidth: this.maxWidth });\r\n\t\tconst src = await getProcessedImageUrl(media.url, { width, height, mode: ImageCropModeModel.MAX });\r\n\r\n\t\tconst img = {\r\n\t\t\talt: media.altText,\r\n\t\t\tsrc,\r\n\t\t\t'data-udi': `umb://media/${mediaUnique.replace(/-/g, '')}`,\r\n\t\t\twidth: width.toString(),\r\n\t\t\theight: height.toString(),\r\n\t\t};\r\n\r\n\t\tif (media.caption) {\r\n\t\t\treturn editor.commands.insertContent({\r\n\t\t\t\ttype: 'figure',\r\n\t\t\t\tcontent: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttype: 'paragraph',\r\n\t\t\t\t\t\tcontent: [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\ttype: 'image',\r\n\t\t\t\t\t\t\t\tattrs: img,\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttype: 'figcaption',\r\n\t\t\t\t\t\tcontent: [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\ttype: 'text',\r\n\t\t\t\t\t\t\t\ttext: media.caption,\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn editor.commands.setImage(img);\r\n\t}\r\n}\r\n"],"names":["UmbTiptapToolbarMediaPickerToolbarExtensionApi","UmbTiptapToolbarElementApiBase","#modalManager","maxImageSize","host","UMB_MODAL_MANAGER_CONTEXT","instance","editor","currentTarget","figure","currentMediaUdi","getGuidFromUdi","currentAltText","currentCaption","selection","#openMediaPicker","mediaGuid","media","#showMediaCaptionAltText","#insertInEditor","modalHandler","UMB_MEDIA_PICKER_MODAL","mediaUnique","altText","caption","UMB_MEDIA_CAPTION_ALT_TEXT_MODAL","width","height","imageSize","src","getProcessedImageUrl","ImageCropModeModel","img"],"mappings":"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"}