{"version":3,"file":"user-group-detail.repository-CY170Kxb.js","sources":["../../../src/packages/user/user-group/repository/detail/user-group-detail.server.data-source.ts","../../../src/packages/user/user-group/repository/detail/user-group-detail.repository.ts"],"sourcesContent":["import type { UmbUserGroupDetailModel } from '../../types.js';\r\nimport { UMB_USER_GROUP_ENTITY_TYPE } from '../../entity.js';\r\nimport type {\r\n\tCreateUserGroupRequestModel,\r\n\tUpdateUserGroupRequestModel,\r\n} from '@umbraco-cms/backoffice/external/backend-api';\r\nimport { UserGroupService } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport { UmbId } from '@umbraco-cms/backoffice/id';\r\nimport type { UmbDetailDataSource } from '@umbraco-cms/backoffice/repository';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { tryExecuteAndNotify } from '@umbraco-cms/backoffice/resources';\r\n\r\n/**\r\n * A data source for the User Group that fetches data from the server\r\n * @class UmbUserGroupServerDataSource\r\n * @implements {RepositoryDetailDataSource}\r\n */\r\nexport class UmbUserGroupServerDataSource implements UmbDetailDataSource<UmbUserGroupDetailModel> {\r\n\t#host: UmbControllerHost;\r\n\r\n\t/**\r\n\t * Creates an instance of UmbUserGroupServerDataSource.\r\n\t * @param {UmbControllerHost} host - The controller host for this controller to be appended to\r\n\t * @memberof UmbUserGroupServerDataSource\r\n\t */\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tthis.#host = host;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new User Group scaffold\r\n\t * @param {(string | null)} parentUnique\r\n\t * @returns { CreateUserGroupRequestModel }\r\n\t * @memberof UmbUserGroupServerDataSource\r\n\t */\r\n\tasync createScaffold() {\r\n\t\tconst data: UmbUserGroupDetailModel = {\r\n\t\t\talias: '',\r\n\t\t\taliasCanBeChanged: true,\r\n\t\t\tdocumentRootAccess: false,\r\n\t\t\tdocumentStartNode: null,\r\n\t\t\tentityType: UMB_USER_GROUP_ENTITY_TYPE,\r\n\t\t\tfallbackPermissions: [],\r\n\t\t\thasAccessToAllLanguages: false,\r\n\t\t\ticon: 'icon-users',\r\n\t\t\tisDeletable: true,\r\n\t\t\tlanguages: [],\r\n\t\t\tmediaRootAccess: false,\r\n\t\t\tmediaStartNode: null,\r\n\t\t\tname: '',\r\n\t\t\tpermissions: [],\r\n\t\t\tsections: [],\r\n\t\t\tunique: UmbId.new(),\r\n\t\t};\r\n\r\n\t\treturn { data };\r\n\t}\r\n\r\n\t/**\r\n\t * Fetches a User Group with the given id from the server\r\n\t * @param {string} unique\r\n\t * @returns {*}\r\n\t * @memberof UmbUserGroupServerDataSource\r\n\t */\r\n\tasync read(unique: string) {\r\n\t\tif (!unique) throw new Error('Unique is missing');\r\n\r\n\t\tconst { data, error } = await tryExecuteAndNotify(this.#host, UserGroupService.getUserGroupById({ id: unique }));\r\n\r\n\t\tif (error || !data) {\r\n\t\t\treturn { error };\r\n\t\t}\r\n\r\n\t\t// TODO: make data mapper to prevent errors\r\n\t\tconst userGroup: UmbUserGroupDetailModel = {\r\n\t\t\talias: data.alias,\r\n\t\t\tdocumentRootAccess: data.documentRootAccess,\r\n\t\t\tdocumentStartNode: data.documentStartNode ? { unique: data.documentStartNode.id } : null,\r\n\t\t\tentityType: UMB_USER_GROUP_ENTITY_TYPE,\r\n\t\t\tfallbackPermissions: data.fallbackPermissions,\r\n\t\t\thasAccessToAllLanguages: data.hasAccessToAllLanguages,\r\n\t\t\ticon: data.icon || null,\r\n\t\t\tisDeletable: data.isDeletable,\r\n\t\t\taliasCanBeChanged: data.aliasCanBeChanged,\r\n\t\t\tlanguages: data.languages,\r\n\t\t\tmediaRootAccess: data.mediaRootAccess,\r\n\t\t\tmediaStartNode: data.mediaStartNode ? { unique: data.mediaStartNode.id } : null,\r\n\t\t\tname: data.name,\r\n\t\t\tpermissions: data.permissions,\r\n\t\t\tsections: data.sections,\r\n\t\t\tunique: data.id,\r\n\t\t};\r\n\r\n\t\treturn { data: userGroup };\r\n\t}\r\n\r\n\t/**\r\n\t * Inserts a new User Group on the server\r\n\t * @param {UmbUserGroupDetailModel} model\r\n\t * @returns {*}\r\n\t * @memberof UmbUserGroupServerDataSource\r\n\t */\r\n\tasync create(model: UmbUserGroupDetailModel) {\r\n\t\tif (!model) throw new Error('User Group is missing');\r\n\r\n\t\t// TODO: make data mapper to prevent errors\r\n\t\tconst requestBody: CreateUserGroupRequestModel = {\r\n\t\t\talias: model.alias,\r\n\t\t\tdocumentRootAccess: model.documentRootAccess,\r\n\t\t\tdocumentStartNode: model.documentStartNode ? { id: model.documentStartNode.unique } : null,\r\n\t\t\tfallbackPermissions: model.fallbackPermissions,\r\n\t\t\thasAccessToAllLanguages: model.hasAccessToAllLanguages,\r\n\t\t\ticon: model.icon,\r\n\t\t\tlanguages: model.languages,\r\n\t\t\tmediaRootAccess: model.mediaRootAccess,\r\n\t\t\tmediaStartNode: model.mediaStartNode ? { id: model.mediaStartNode.unique } : null,\r\n\t\t\tname: model.name,\r\n\t\t\tpermissions: model.permissions,\r\n\t\t\tsections: model.sections,\r\n\t\t};\r\n\r\n\t\tconst { data, error } = await tryExecuteAndNotify(\r\n\t\t\tthis.#host,\r\n\t\t\tUserGroupService.postUserGroup({\r\n\t\t\t\trequestBody,\r\n\t\t\t}),\r\n\t\t);\r\n\r\n\t\tif (data) {\r\n\t\t\treturn this.read(data);\r\n\t\t}\r\n\r\n\t\treturn { error };\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a UserGroup on the server\r\n\t * @param {UmbUserGroupDetailModel} UserGroup\r\n\t * @param model\r\n\t * @returns {*}\r\n\t * @memberof UmbUserGroupServerDataSource\r\n\t */\r\n\tasync update(model: UmbUserGroupDetailModel) {\r\n\t\tif (!model.unique) throw new Error('Unique is missing');\r\n\r\n\t\t// TODO: make data mapper to prevent errors\r\n\t\tconst requestBody: UpdateUserGroupRequestModel = {\r\n\t\t\talias: model.alias,\r\n\t\t\tdocumentRootAccess: model.documentRootAccess,\r\n\t\t\tdocumentStartNode: model.documentStartNode ? { id: model.documentStartNode.unique } : null,\r\n\t\t\tfallbackPermissions: model.fallbackPermissions,\r\n\t\t\thasAccessToAllLanguages: model.hasAccessToAllLanguages,\r\n\t\t\ticon: model.icon,\r\n\t\t\tlanguages: model.languages,\r\n\t\t\tmediaRootAccess: model.mediaRootAccess,\r\n\t\t\tmediaStartNode: model.mediaStartNode ? { id: model.mediaStartNode.unique } : null,\r\n\t\t\tname: model.name,\r\n\t\t\tpermissions: model.permissions,\r\n\t\t\tsections: model.sections,\r\n\t\t};\r\n\r\n\t\tconst { error } = await tryExecuteAndNotify(\r\n\t\t\tthis.#host,\r\n\t\t\tUserGroupService.putUserGroupById({\r\n\t\t\t\tid: model.unique,\r\n\t\t\t\trequestBody,\r\n\t\t\t}),\r\n\t\t);\r\n\r\n\t\tif (!error) {\r\n\t\t\treturn this.read(model.unique);\r\n\t\t}\r\n\r\n\t\treturn { error };\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes a User Group on the server\r\n\t * @param {string} unique\r\n\t * @returns {*}\r\n\t * @memberof UmbUserGroupServerDataSource\r\n\t */\r\n\tasync delete(unique: string) {\r\n\t\tif (!unique) throw new Error('Unique is missing');\r\n\r\n\t\treturn tryExecuteAndNotify(\r\n\t\t\tthis.#host,\r\n\t\t\tUserGroupService.deleteUserGroupById({\r\n\t\t\t\tid: unique,\r\n\t\t\t}),\r\n\t\t);\r\n\t}\r\n}\r\n","import type { UmbUserGroupDetailModel } from '../../types.js';\r\nimport { UmbUserGroupServerDataSource } from './user-group-detail.server.data-source.js';\r\nimport { UMB_USER_GROUP_DETAIL_STORE_CONTEXT } from './user-group-detail.store.token.js';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbDetailRepositoryBase } from '@umbraco-cms/backoffice/repository';\r\n\r\nexport class UmbUserGroupDetailRepository extends UmbDetailRepositoryBase<UmbUserGroupDetailModel> {\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host, UmbUserGroupServerDataSource, UMB_USER_GROUP_DETAIL_STORE_CONTEXT);\r\n\t}\r\n\r\n\toverride async create(model: UmbUserGroupDetailModel) {\r\n\t\treturn super.create(model, null);\r\n\t}\r\n}\r\nexport default UmbUserGroupDetailRepository;\r\n"],"names":["UmbUserGroupServerDataSource","#host","host","UMB_USER_GROUP_ENTITY_TYPE","UmbId","unique","data","error","tryExecuteAndNotify","UserGroupService","model","requestBody","UmbUserGroupDetailRepository","UmbDetailRepositoryBase","UMB_USER_GROUP_DETAIL_STORE_CONTEXT"],"mappings":"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"}